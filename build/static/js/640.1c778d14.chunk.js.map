{"version":3,"file":"static/js/640.1c778d14.chunk.js","mappings":"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","sources":["../node_modules/@capacitor/local-notifications/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { PermissionState } from '@capacitor/core';\n\nimport type {\n  DeliveredNotifications,\n  EnabledResult,\n  ListChannelsResult,\n  LocalNotificationSchema,\n  LocalNotificationsPlugin,\n  PendingResult,\n  PermissionStatus,\n  ScheduleOptions,\n  ScheduleResult,\n  SettingsPermissionStatus,\n} from './definitions';\n\nexport class LocalNotificationsWeb\n  extends WebPlugin\n  implements LocalNotificationsPlugin\n{\n  protected pending: LocalNotificationSchema[] = [];\n  protected deliveredNotifications: Notification[] = [];\n\n  async getDeliveredNotifications(): Promise<DeliveredNotifications> {\n    const deliveredSchemas = [];\n    for (const notification of this.deliveredNotifications) {\n      const deliveredSchema: LocalNotificationSchema = {\n        title: notification.title,\n        id: parseInt(notification.tag),\n        body: notification.body,\n      };\n      deliveredSchemas.push(deliveredSchema);\n    }\n    return {\n      notifications: deliveredSchemas,\n    };\n  }\n  async removeDeliveredNotifications(\n    delivered: DeliveredNotifications,\n  ): Promise<void> {\n    for (const toRemove of delivered.notifications) {\n      const found = this.deliveredNotifications.find(\n        n => n.tag === String(toRemove.id),\n      );\n      found?.close();\n      this.deliveredNotifications = this.deliveredNotifications.filter(\n        () => !found,\n      );\n    }\n  }\n  async removeAllDeliveredNotifications(): Promise<void> {\n    for (const notification of this.deliveredNotifications) {\n      notification.close();\n    }\n    this.deliveredNotifications = [];\n  }\n  async createChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async deleteChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async listChannels(): Promise<ListChannelsResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async schedule(options: ScheduleOptions): Promise<ScheduleResult> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    for (const notification of options.notifications) {\n      this.sendNotification(notification);\n    }\n\n    return {\n      notifications: options.notifications.map(notification => ({\n        id: notification.id,\n      })),\n    };\n  }\n\n  async getPending(): Promise<PendingResult> {\n    return {\n      notifications: this.pending,\n    };\n  }\n\n  async registerActionTypes(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async cancel(pending: ScheduleResult): Promise<void> {\n    this.pending = this.pending.filter(\n      notification =>\n        !pending.notifications.find(n => n.id === notification.id),\n    );\n  }\n\n  async areEnabled(): Promise<EnabledResult> {\n    const { display } = await this.checkPermissions();\n\n    return {\n      value: display === 'granted',\n    };\n  }\n\n  async changeExactNotificationSetting(): Promise<SettingsPermissionStatus> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async checkExactNotificationSetting(): Promise<SettingsPermissionStatus> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      await Notification.requestPermission(),\n    );\n\n    return { display };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      Notification.permission,\n    );\n\n    return { display };\n  }\n\n  protected hasNotificationSupport = (): boolean => {\n    if (!('Notification' in window) || !Notification.requestPermission) {\n      return false;\n    }\n\n    if (Notification.permission !== 'granted') {\n      // don't test for `new Notification` if permission has already been granted\n      // otherwise this sends a real notification on supported browsers\n      try {\n        new Notification('');\n      } catch (e) {\n        if (e.name == 'TypeError') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  protected transformNotificationPermission(\n    permission: NotificationPermission,\n  ): PermissionState {\n    switch (permission) {\n      case 'granted':\n        return 'granted';\n      case 'denied':\n        return 'denied';\n      default:\n        return 'prompt';\n    }\n  }\n\n  protected sendPending(): void {\n    const toRemove: LocalNotificationSchema[] = [];\n    const now = new Date().getTime();\n\n    for (const notification of this.pending) {\n      if (\n        notification.schedule?.at &&\n        notification.schedule.at.getTime() <= now\n      ) {\n        this.buildNotification(notification);\n        toRemove.push(notification);\n      }\n    }\n\n    this.pending = this.pending.filter(\n      notification => !toRemove.find(n => n === notification),\n    );\n  }\n\n  protected sendNotification(notification: LocalNotificationSchema): void {\n    if (notification.schedule?.at) {\n      const diff = notification.schedule.at.getTime() - new Date().getTime();\n\n      this.pending.push(notification);\n      setTimeout(() => {\n        this.sendPending();\n      }, diff);\n      return;\n    }\n    this.buildNotification(notification);\n  }\n\n  protected buildNotification(\n    notification: LocalNotificationSchema,\n  ): Notification {\n    const localNotification = new Notification(notification.title, {\n      body: notification.body,\n      tag: String(notification.id),\n    });\n    localNotification.addEventListener(\n      'click',\n      this.onClick.bind(this, notification),\n      false,\n    );\n    localNotification.addEventListener(\n      'show',\n      this.onShow.bind(this, notification),\n      false,\n    );\n    localNotification.addEventListener(\n      'close',\n      () => {\n        this.deliveredNotifications = this.deliveredNotifications.filter(\n          () => !this,\n        );\n      },\n      false,\n    );\n    this.deliveredNotifications.push(localNotification);\n    return localNotification;\n  }\n\n  protected onClick(notification: LocalNotificationSchema): void {\n    const data = {\n      actionId: 'tap',\n      notification,\n    };\n    this.notifyListeners('localNotificationActionPerformed', data);\n  }\n\n  protected onShow(notification: LocalNotificationSchema): void {\n    this.notifyListeners('localNotificationReceived', notification);\n  }\n}\n"],"names":["LocalNotificationsWeb","WebPlugin","constructor","pending","deliveredNotifications","hasNotificationSupport","window","Notification","requestPermission","permission","e","name","getDeliveredNotifications","deliveredSchemas","notification","this","deliveredSchema","title","id","parseInt","tag","body","push","notifications","removeDeliveredNotifications","delivered","toRemove","found","find","n","String","close","filter","removeAllDeliveredNotifications","createChannel","unimplemented","deleteChannel","listChannels","schedule","options","unavailable","sendNotification","map","getPending","registerActionTypes","cancel","areEnabled","display","checkPermissions","value","changeExactNotificationSetting","checkExactNotificationSetting","requestPermissions","transformNotificationPermission","sendPending","now","Date","getTime","_a","at","buildNotification","diff","setTimeout","localNotification","addEventListener","onClick","bind","onShow","data","actionId","notifyListeners"],"sourceRoot":""}