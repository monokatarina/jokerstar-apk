{
  "api": {
    "name": "CapacitorAPI",
    "slug": "capacitorapi",
    "docs": "",
    "tags": [],
    "methods": [],
    "properties": [
      {
        "name": "CapacitorDevice",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "CapacitorDevice"
        ],
        "type": "CapacitorDevice"
      },
      {
        "name": "CapacitorKV",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "CapacitorKV"
        ],
        "type": "CapacitorKV"
      },
      {
        "name": "CapacitorNotifications",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "CapacitorNotifications"
        ],
        "type": "CapacitorNotifications"
      },
      {
        "name": "CapacitorGeolocation",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "CapacitorGeolocation"
        ],
        "type": "CapacitorGeolocation"
      },
      {
        "name": "CapacitorWatch",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "CapacitorWatch"
        ],
        "type": "CapacitorWatch"
      },
      {
        "name": "CapacitorApp",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "CapacitorApp"
        ],
        "type": "CapacitorApp"
      }
    ]
  },
  "interfaces": [
    {
      "name": "CapacitorDevice",
      "slug": "capacitordevice",
      "docs": "Get information on the device, such as network connectivity and battery status.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "getBatteryStatus",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Get the current battery status for the device.",
          "complexTypes": [
            "BatteryStatus"
          ],
          "type": "() => BatteryStatus"
        },
        {
          "name": "getNetworkStatus",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Get the current network status for the device.",
          "complexTypes": [
            "NetworkStatus"
          ],
          "type": "() => NetworkStatus"
        }
      ]
    },
    {
      "name": "BatteryStatus",
      "slug": "batterystatus",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "batteryLevel",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "isCharging",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean"
        }
      ]
    },
    {
      "name": "NetworkStatus",
      "slug": "networkstatus",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "connected",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean"
        },
        {
          "name": "connectionType",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "CapacitorKV",
      "slug": "capacitorkv",
      "docs": "A simple string key / value store backed by UserDefaults on iOS and Shared Preferences on Android.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "set",
          "tags": [
            {
              "text": "key",
              "name": "param"
            },
            {
              "text": "value",
              "name": "param"
            },
            {
              "name": "returns"
            },
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set a string value with the given key.",
          "complexTypes": [],
          "type": "(key: string, value: string) => void"
        },
        {
          "name": "get",
          "tags": [
            {
              "text": "key",
              "name": "param"
            },
            {
              "name": "returns"
            },
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Get a string value for the given key.",
          "complexTypes": [],
          "type": "(key: string) => { value: string; }"
        },
        {
          "name": "remove",
          "tags": [
            {
              "text": "key",
              "name": "param"
            },
            {
              "name": "returns"
            },
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Remove a value with the given key.",
          "complexTypes": [],
          "type": "(key: string) => void"
        }
      ]
    },
    {
      "name": "CapacitorNotifications",
      "slug": "capacitornotifications",
      "docs": "Send basic local notifications.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "schedule",
          "tags": [
            {
              "text": "`CapacitorNotifications.schedule()`",
              "name": "example"
            },
            {
              "text": "options",
              "name": "param"
            },
            {
              "text": "void",
              "name": "returns"
            },
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Schedule a local notification",
          "complexTypes": [
            "NotificationScheduleOptions"
          ],
          "type": "(options: {}) => void"
        },
        {
          "name": "setBadge",
          "tags": [
            {
              "text": "`CapacitorNotifications.setBadge({...})`",
              "name": "example"
            },
            {
              "text": "options",
              "name": "param"
            },
            {
              "text": "void",
              "name": "returns"
            },
            {
              "text": "2.0.0",
              "name": "since"
            }
          ],
          "docs": "Set the application badge count",
          "complexTypes": [
            "NotificationBadgeOptions"
          ],
          "type": "(options: NotificationBadgeOptions) => void"
        },
        {
          "name": "clearBadge",
          "tags": [
            {
              "text": "`CapacitorNotifications.clearBadge()`",
              "name": "example"
            },
            {
              "text": "void",
              "name": "returns"
            },
            {
              "text": "2.0.0",
              "name": "since"
            }
          ],
          "docs": "Clears the application badge count",
          "complexTypes": [],
          "type": "() => void"
        }
      ]
    },
    {
      "name": "NotificationScheduleOptions",
      "slug": "notificationscheduleoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The notification identifier.\nOn Android it's a 32-bit int.\nSo the value should be between -2147483648 and 2147483647 inclusive.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "title",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The title of the notification.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "body",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The body of the notification, shown below the title.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "scheduleAt",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Date to send this notification.",
          "complexTypes": [
            "Date"
          ],
          "type": "Date"
        },
        {
          "name": "sound",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Name of the audio file to play when this notification is displayed.\n\nInclude the file extension with the filename.\n\nOn iOS, the file should be in the app bundle.\nOn Android, the file should be in res/raw folder.\n\nRecommended format is `.wav` because is supported by both iOS and Android.\n\nOnly available for iOS and Android < 26.\nFor Android 26+ use channelId of a channel configured with the desired sound.\n\nIf the sound file is not found, (i.e. empty string or wrong name)\nthe default system notification sound will be used.\nIf not provided, it will produce the default sound on Android and no sound on iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "actionTypeId",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Associate an action type with this notification.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "threadIdentifier",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Used to group multiple notifications.\n\nSets `threadIdentifier` on the\n[`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "summaryArgument",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The string this notification adds to the category's summary format string.\n\nSets `summaryArgument` on the\n[`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent).\n\nOnly available for iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "group",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Used to group multiple notifications.\n\nCalls `setGroup()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "groupSummary",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "If true, this notification becomes the summary for a group of\nnotifications.\n\nCalls `setGroupSummary()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android when using `group`.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "extra",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set extra data to store within this notification.",
          "complexTypes": [],
          "type": "any"
        },
        {
          "name": "ongoing",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "If true, the notification can't be swiped away.\n\nCalls `setOngoing()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "autoCancel",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "If true, the notification is canceled when the user clicks on it.\n\nCalls `setAutoCancel()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "largeBody",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Sets a multiline text block for display in a big text notification style.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "summaryText",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Used to set the summary text detail in inbox and big text notification styles.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "smallIcon",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set a custom status bar icon.\n\nIf set, this overrides the `smallIcon` option from Capacitor\nconfiguration.\n\nIcons should be placed in your app's `res/drawable` folder. The value for\nthis option should be the drawable resource ID, which is the filename\nwithout an extension.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "largeIcon",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Set a large icon for notifications.\n\nIcons should be placed in your app's `res/drawable` folder. The value for\nthis option should be the drawable resource ID, which is the filename\nwithout an extension.\n\nOnly available for Android.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "channelId",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Specifies the channel the notification should be delivered on.\n\nIf channel with the given name does not exist then the notification will\nnot fire. If not provided, it will use the default channel.\n\nCalls `setChannelId()` on\n[`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\nwith the provided value.\n\nOnly available for Android 26+.",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "NotificationBadgeOptions",
      "slug": "notificationbadgeoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "count",
          "tags": [
            {
              "text": "2.0.0",
              "name": "since"
            }
          ],
          "docs": "The number to set on the application badge count.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "notificationTitle",
          "tags": [
            {
              "text": "2.0.0",
              "name": "since"
            }
          ],
          "docs": "The **required** title for the associated badge count notification.\n\nOnly for Android.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "notificationSubtitle",
          "tags": [
            {
              "text": "2.0.0",
              "name": "since"
            }
          ],
          "docs": "The subtitle for the associated badge count notification.\n\nOnly for Android.",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "CapacitorGeolocation",
      "slug": "capacitorgeolocation",
      "docs": "Get access to device location information.",
      "tags": [
        {
          "text": "1.0.0",
          "name": "since"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "getCurrentPosition",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Get the device's last known location",
          "complexTypes": [
            "GetCurrentPositionResult"
          ],
          "type": "() => GetCurrentPositionResult"
        }
      ]
    },
    {
      "name": "GetCurrentPositionResult",
      "slug": "getcurrentpositionresult",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "latitude",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Latitude in decimal degrees",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "longitude",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "longitude in decimal degrees",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "accuracy",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Accuracy level of the latitude and longitude coordinates in meters",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "altitude",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The altitude the user is at (if available)",
          "complexTypes": [],
          "type": "number | null"
        },
        {
          "name": "altitudeAccuracy",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Accuracy level of the altitude coordinate in meters, if available.\n\nAvailable on all iOS versions and on Android 8.0+.",
          "complexTypes": [],
          "type": "number | null | undefined"
        },
        {
          "name": "speed",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The speed the user is traveling (if available)",
          "complexTypes": [],
          "type": "number | null"
        },
        {
          "name": "heading",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The heading the user is facing (if available)",
          "complexTypes": [],
          "type": "number | null"
        }
      ]
    },
    {
      "name": "CapacitorWatch",
      "slug": "capacitorwatch",
      "docs": "Interact with a watch paired with this app\n\nsendMessage, transferUserInfo and updateApplicationContext are raw routes to the WCSession delegate methods, but have no effects currently in a CapacitorWatch Watch application.\nThey could be used if a native watch app is developed as a companion app to a Capacitor app",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "sendMessage",
          "tags": [],
          "docs": "Sends a message to the watch with the sendMessage() WCSession delegate method\n\nThis has no effect on a CapacitorWatch watch app",
          "complexTypes": [],
          "type": "(options: []) => void"
        },
        {
          "name": "transferUserInfo",
          "tags": [],
          "docs": "Sends information to the watch with the transferUserInfo() WCSession delegate method\n\nThis has no effect on a CapacitorWatch watch app",
          "complexTypes": [],
          "type": "(options: []) => void"
        },
        {
          "name": "updateApplicationContext",
          "tags": [],
          "docs": "Updates the application context on the watch with the updateApplicationContext() WCSession delegate method\n\nThis has no effect on a CapacitorWatch watch app",
          "complexTypes": [],
          "type": "(options: []) => void"
        },
        {
          "name": "isReachable",
          "tags": [],
          "docs": "Checks to see if the compaion watch is reachable",
          "complexTypes": [],
          "type": "boolean"
        },
        {
          "name": "updateWatchUI",
          "tags": [
            {
              "text": "options the new WatchUI you want to show on the watch",
              "name": "param"
            },
            {
              "text": "void",
              "name": "returns"
            }
          ],
          "docs": "Replaces the current UI on the watch with what is specified here.",
          "complexTypes": [],
          "type": "(options: { watchUI: string; }) => void"
        },
        {
          "name": "updateWatchData",
          "tags": [
            {
              "text": "options the new data to send to the watch",
              "name": "param"
            },
            {
              "text": "void",
              "name": "returns"
            }
          ],
          "docs": "Updates the data the watch is using to display variables in text and button fields",
          "complexTypes": [],
          "type": "(options: { data: { [key: string]: string; }; }) => void"
        }
      ]
    },
    {
      "name": "CapacitorApp",
      "slug": "capacitorapp",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "getState",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "AppState"
          ],
          "type": "() => AppState"
        },
        {
          "name": "getInfo",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "AppInfo"
          ],
          "type": "() => AppInfo"
        }
      ]
    },
    {
      "name": "AppState",
      "slug": "appstate",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "isActive",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Whether the app is active or not.",
          "complexTypes": [],
          "type": "boolean"
        }
      ]
    },
    {
      "name": "AppInfo",
      "slug": "appinfo",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "name",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The name of the app.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The identifier of the app.\nOn iOS it's the Bundle Identifier.\nOn Android it's the Application ID",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "build",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The build version.\nOn iOS it's the CFBundleVersion.\nOn Android it's the versionCode.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "version",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The app version.\nOn iOS it's the CFBundleShortVersionString.\nOn Android it's package's versionName.",
          "complexTypes": [],
          "type": "string"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": [
    {
      "name": "BackgroundRunner",
      "slug": "backgroundrunner",
      "properties": [
        {
          "name": "label",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"com.example.background.task\"",
              "name": "example"
            }
          ],
          "docs": "The name of the runner, used in logs.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "src",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"runners/background.js\"",
              "name": "example"
            }
          ],
          "docs": "The path to the runner JavaScript file, relative to the app bundle.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "event",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"myCustomEvent\"",
              "name": "example"
            }
          ],
          "docs": "The name of the event that will be called when the OS executes the background task.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "repeat",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "true",
              "name": "example"
            }
          ],
          "docs": "If background task should repeat based on the interval set in `interval`.",
          "complexTypes": [],
          "type": "boolean"
        },
        {
          "name": "interval",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "15",
              "name": "example"
            }
          ],
          "docs": "The number of minutes after the the app is put into the background in which the background task should begin.\n\nIf `repeat` is true, this also specifies the number of minutes between each execution.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "autoStart",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "true",
              "name": "example"
            }
          ],
          "docs": "Automatically register and schedule background task on app load.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ],
      "docs": "On load, Background Runner will automatically register a\nbackground task that will be scheduled and run once your app is\nbackgrounded."
    }
  ]
}