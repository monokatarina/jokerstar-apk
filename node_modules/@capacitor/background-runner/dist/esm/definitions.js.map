{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\nimport type { PermissionState } from '@capacitor/core';\n\nexport interface BackgroundRunnerConfig {\n  /**\n   * The name of the runner, used in logs.\n   *\n   * @since 1.0.0\n   */\n  label: string;\n  /**\n   * The path to the runner JavaScript file, relative to the app bundle.\n   *\n   * @since 1.0.0\n   */\n  src: string;\n  /**\n   * The name of the event that will be called when the OS executes the background task.\n   *\n   * @since 1.0.0\n   */\n  event: string;\n  /**\n   * If background task should repeat based on the interval set in `interval`.\n   *\n   * @since 1.0.0\n   */\n  repeat: boolean;\n  /**\n   * The number of minutes after the the app is put into the background in which the background task should begin.\n   *\n   * If `repeat` is true, this also specifies the number of minutes between each execution.\n   *\n   * @since 1.0.0\n   */\n  interval: number;\n  /**\n   * Automatically register and schedule background task on app load.\n   *\n   * @since 1.0.0\n   */\n  autoStart?: boolean;\n}\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    /**\n     * On load, Background Runner will automatically register a\n     * background task that will be scheduled and run once your app is\n     * backgrounded.\n     */\n    BackgroundRunner?: {\n      /**\n       * The name of the runner, used in logs.\n       *\n       * @since 1.0.0\n       * @example \"com.example.background.task\"\n       */\n      label: string;\n      /**\n       * The path to the runner JavaScript file, relative to the app bundle.\n       *\n       * @since 1.0.0\n       * @example \"runners/background.js\"\n       */\n      src: string;\n      /**\n       * The name of the event that will be called when the OS executes the background task.\n       *\n       * @since 1.0.0\n       * @example \"myCustomEvent\"\n       */\n      event: string;\n      /**\n       * If background task should repeat based on the interval set in `interval`.\n       *\n       * @since 1.0.0\n       * @example true\n       */\n      repeat: boolean;\n      /**\n       * The number of minutes after the the app is put into the background in which the background task should begin.\n       *\n       * If `repeat` is true, this also specifies the number of minutes between each execution.\n       *\n       * @since 1.0.0\n       * @example 15\n       */\n      interval: number;\n      /**\n       * Automatically register and schedule background task on app load.\n       *\n       * @since 1.0.0\n       * @example true\n       */\n      autoStart?: boolean;\n    };\n  }\n}\n\nexport type API = 'geolocation' | 'notifications';\n\nexport interface PermissionStatus {\n  geolocation: PermissionState;\n  notifications: PermissionState;\n}\n\nexport interface DispatchEventOptions {\n  /**\n   * The runner label to dispatch the event to\n   *\n   * @since 1.0.0\n   */\n  label: string;\n  /**\n   * The name of the registered event listener.\n   *\n   * @since 1.0.0\n   */\n  event: string;\n  details: { [key: string]: any };\n}\n\nexport interface RequestPermissionOptions {\n  apis: API[];\n}\n\nexport interface RegisterBackgroundTaskOptions {\n  runner: BackgroundRunnerConfig;\n}\n\nexport interface BackgroundRunnerPlugin {\n  /**\n   * Check permissions for the various Capacitor device APIs.\n   *\n   * @since 1.0.0\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  /**\n   * Request permission to display local notifications.\n   *\n   * @since 1.0.0\n   */\n  requestPermissions(\n    options: RequestPermissionOptions,\n  ): Promise<PermissionStatus>;\n  /**\n   * Dispatches an event to the configured runner.\n   * @param options\n   * @since 1.0.0\n   */\n  dispatchEvent<T = void>(options: DispatchEventOptions): Promise<T>;\n}\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    BackgroundRunner?: BackgroundRunnerConfig;\n  }\n}\n"]}