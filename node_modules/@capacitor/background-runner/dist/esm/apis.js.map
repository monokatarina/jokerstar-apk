{"version":3,"file":"apis.js","sourceRoot":"","sources":["../../src/apis.ts"],"names":[],"mappings":"","sourcesContent":["export interface GetCurrentPositionResult {\n  /**\n   * Latitude in decimal degrees\n   *\n   * @since 1.0.0\n   */\n  latitude: number;\n  /**\n   * longitude in decimal degrees\n   *\n   * @since 1.0.0\n   */\n  longitude: number;\n  /**\n   * Accuracy level of the latitude and longitude coordinates in meters\n   *\n   * @since 1.0.0\n   */\n  accuracy: number;\n  /**\n   * The altitude the user is at (if available)\n   *\n   * @since 1.0.0\n   */\n  altitude: number | null;\n  /**\n   * Accuracy level of the altitude coordinate in meters, if available.\n   *\n   * Available on all iOS versions and on Android 8.0+.\n   *\n   * @since 1.0.0\n   */\n  altitudeAccuracy?: number | null | undefined;\n  /**\n   * The speed the user is traveling (if available)\n   *\n   * @since 1.0.0\n   */\n  speed: number | null;\n  /**\n   * The heading the user is facing (if available)\n   *\n   * @since 1.0.0\n   */\n  heading: number | null;\n}\n\nexport interface BatteryStatus {\n  batteryLevel: number;\n  isCharging: boolean;\n}\n\nexport interface NetworkStatus {\n  connected: boolean;\n  connectionType: string;\n}\n\nexport interface NotificationBadgeOptions {\n  /**\n   * The number to set on the application badge count.\n   *\n   * @since 2.0.0\n   */\n  count: number;\n  /**\n   * The **required** title for the associated badge count notification.\n   *\n   * Only for Android.\n   *\n   * @since 2.0.0\n   */\n  notificationTitle: string;\n  /**\n   * The subtitle for the associated badge count notification.\n   *\n   * Only for Android.\n   *\n   * @since 2.0.0\n   */\n  notificationSubtitle: string;\n}\n\nexport interface NotificationScheduleOptions {\n  /**\n   * The notification identifier.\n   * On Android it's a 32-bit int.\n   * So the value should be between -2147483648 and 2147483647 inclusive.\n   *\n   * @since 1.0.0\n   */\n  id: number;\n  /**\n   * The title of the notification.\n   *\n   * @since 1.0.0\n   */\n  title: string;\n  /**\n   * The body of the notification, shown below the title.\n   *\n   * @since 1.0.0\n   */\n  body: string;\n  /**\n   * Date to send this notification.\n   *\n   * @since 1.0.0\n   */\n  scheduleAt: Date;\n  /**\n   * Name of the audio file to play when this notification is displayed.\n   *\n   * Include the file extension with the filename.\n   *\n   * On iOS, the file should be in the app bundle.\n   * On Android, the file should be in res/raw folder.\n   *\n   * Recommended format is `.wav` because is supported by both iOS and Android.\n   *\n   * Only available for iOS and Android < 26.\n   * For Android 26+ use channelId of a channel configured with the desired sound.\n   *\n   * If the sound file is not found, (i.e. empty string or wrong name)\n   * the default system notification sound will be used.\n   * If not provided, it will produce the default sound on Android and no sound on iOS.\n   *\n   * @since 1.0.0\n   */\n  sound?: string;\n  /**\n   * Associate an action type with this notification.\n   *\n   * @since 1.0.0\n   */\n  actionTypeId?: string;\n  /**\n   * Used to group multiple notifications.\n   *\n   * Sets `threadIdentifier` on the\n   * [`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent).\n   *\n   * Only available for iOS.\n   *\n   * @since 1.0.0\n   */\n  threadIdentifier?: string;\n  /**\n   * The string this notification adds to the category's summary format string.\n   *\n   * Sets `summaryArgument` on the\n   * [`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent).\n   *\n   * Only available for iOS.\n   *\n   * @since 1.0.0\n   */\n  summaryArgument?: string;\n  /**\n   * Used to group multiple notifications.\n   *\n   * Calls `setGroup()` on\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\n   * with the provided value.\n   *\n   * Only available for Android.\n   *\n   * @since 1.0.0\n   */\n  group?: string;\n  /**\n   * If true, this notification becomes the summary for a group of\n   * notifications.\n   *\n   * Calls `setGroupSummary()` on\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\n   * with the provided value.\n   *\n   * Only available for Android when using `group`.\n   *\n   * @since 1.0.0\n   */\n  groupSummary?: string;\n  /**\n   * Set extra data to store within this notification.\n   *\n   * @since 1.0.0\n   */\n  extra?: any;\n  /**\n   * If true, the notification can't be swiped away.\n   *\n   * Calls `setOngoing()` on\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\n   * with the provided value.\n   *\n   * Only available for Android.\n   *\n   * @since 1.0.0\n   */\n  ongoing?: boolean;\n  /**\n   * If true, the notification is canceled when the user clicks on it.\n   *\n   * Calls `setAutoCancel()` on\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\n   * with the provided value.\n   *\n   * Only available for Android.\n   *\n   * @since 1.0.0\n   */\n  autoCancel?: boolean;\n  /**\n   * Sets a multiline text block for display in a big text notification style.\n   *\n   * @since 1.0.0\n   */\n  largeBody?: string;\n  /**\n   * Used to set the summary text detail in inbox and big text notification styles.\n   *\n   * Only available for Android.\n   *\n   * @since 1.0.0\n   */\n  summaryText?: string;\n  /**\n   * Set a custom status bar icon.\n   *\n   * If set, this overrides the `smallIcon` option from Capacitor\n   * configuration.\n   *\n   * Icons should be placed in your app's `res/drawable` folder. The value for\n   * this option should be the drawable resource ID, which is the filename\n   * without an extension.\n   *\n   * Only available for Android.\n   *\n   * @since 1.0.0\n   */\n  smallIcon?: string;\n  /**\n   * Set a large icon for notifications.\n   *\n   * Icons should be placed in your app's `res/drawable` folder. The value for\n   * this option should be the drawable resource ID, which is the filename\n   * without an extension.\n   *\n   * Only available for Android.\n   *\n   * @since 1.0.0\n   */\n  largeIcon?: string;\n  /**\n   * Specifies the channel the notification should be delivered on.\n   *\n   * If channel with the given name does not exist then the notification will\n   * not fire. If not provided, it will use the default channel.\n   *\n   * Calls `setChannelId()` on\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\n   * with the provided value.\n   *\n   * Only available for Android 26+.\n   *\n   * @since 1.0.0\n   */\n  channelId?: string;\n}\n\nexport interface AppInfo {\n  /**\n   * The name of the app.\n   *\n   * @since 1.0.0\n   */\n  name: string;\n\n  /**\n   * The identifier of the app.\n   * On iOS it's the Bundle Identifier.\n   * On Android it's the Application ID\n   *\n   * @since 1.0.0\n   */\n  id: string;\n\n  /**\n   * The build version.\n   * On iOS it's the CFBundleVersion.\n   * On Android it's the versionCode.\n   *\n   * @since 1.0.0\n   */\n  build: string;\n\n  /**\n   * The app version.\n   * On iOS it's the CFBundleShortVersionString.\n   * On Android it's package's versionName.\n   *\n   * @since 1.0.0\n   */\n  version: string;\n}\n\nexport interface AppState {\n  /**\n   * Whether the app is active or not.\n   *\n   * @since 1.0.0\n   */\n  isActive: boolean;\n}\n\n/**\n * Get access to device location information.\n *\n * @since 1.0.0\n */\nexport interface CapacitorGeolocation {\n  /**\n   * Get the device's last known location\n   * @since 1.0.0\n   */\n  getCurrentPosition: () => GetCurrentPositionResult;\n}\n\n/**\n * A simple string key / value store backed by UserDefaults on iOS and Shared Preferences on Android.\n */\nexport interface CapacitorKV {\n  /**\n   * Set a string value with the given key.\n   *\n   * @param key\n   * @param value\n   * @returns\n   * @since 1.0.0\n   */\n  set: (key: string, value: string) => void;\n  /**\n   * Get a string value for the given key.\n   * @param key\n   * @returns\n   * @since 1.0.0\n   */\n  get: (key: string) => { value: string };\n  /**\n   * Remove a value with the given key.\n   * @param key\n   * @returns\n   * @since 1.0.0\n   */\n  remove: (key: string) => void;\n}\n\n/**\n * Get information on the device, such as network connectivity and battery status.\n */\nexport interface CapacitorDevice {\n  /**\n   * Get the current battery status for the device.\n   *\n   * @since 1.0.0\n   */\n  getBatteryStatus: () => BatteryStatus;\n  /**\n   * Get the current network status for the device.\n   *\n   * @since 1.0.0\n   */\n  getNetworkStatus: () => NetworkStatus;\n}\n\n/**\n * Send basic local notifications.\n */\nexport interface CapacitorNotifications {\n  /**\n   * Schedule a local notification\n   * @example `CapacitorNotifications.schedule()`\n   * @param options\n   * @returns void\n   * @since 1.0.0\n   */\n  schedule: (options: NotificationScheduleOptions[]) => void;\n  /**\n   * Set the application badge count\n   * @example `CapacitorNotifications.setBadge({...})`\n   * @param options\n   * @returns void\n   * @since 2.0.0\n   */\n  setBadge: (options: NotificationBadgeOptions) => void;\n  /**\n   * Clears the application badge count\n   * @example `CapacitorNotifications.clearBadge()`\n   * @returns void\n   * @since 2.0.0\n   */\n  clearBadge: () => void;\n}\n\n/**\n * Interact with a watch paired with this app\n *\n * sendMessage, transferUserInfo and updateApplicationContext are raw routes to the WCSession delegate methods, but have no effects currently in a CapacitorWatch Watch application.\n * They could be used if a native watch app is developed as a companion app to a Capacitor app\n */\nexport interface CapacitorWatch {\n  /**\n   * Sends a message to the watch with the sendMessage() WCSession delegate method\n   *\n   * This has no effect on a CapacitorWatch watch app\n   */\n  sendMessage: (options: []) => void;\n  /**\n   * Sends information to the watch with the transferUserInfo() WCSession delegate method\n   *\n   * This has no effect on a CapacitorWatch watch app\n   */\n  transferUserInfo: (options: []) => void;\n  /**\n   * Updates the application context on the watch with the updateApplicationContext() WCSession delegate method\n   *\n   * This has no effect on a CapacitorWatch watch app\n   */\n  updateApplicationContext: (options: []) => void;\n  /**\n   * Checks to see if the compaion watch is reachable\n   */\n  isReachable: boolean;\n  /**\n   * Replaces the current UI on the watch with what is specified here.\n   * @param options the new WatchUI you want to show on the watch\n   * @returns void\n   */\n  updateWatchUI: (options: { watchUI: string }) => void;\n  /**\n   * Updates the data the watch is using to display variables in text and button fields\n   * @param options the new data to send to the watch\n   * @returns void\n   */\n  updateWatchData: (options: { data: { [key: string]: string } }) => void;\n}\n\nexport interface CapacitorApp {\n  getState: () => AppState;\n  getInfo: () => AppInfo;\n}\n\nexport interface CapacitorAPI {\n  CapacitorDevice: CapacitorDevice;\n  CapacitorKV: CapacitorKV;\n  CapacitorNotifications: CapacitorNotifications;\n  CapacitorGeolocation: CapacitorGeolocation;\n  CapacitorWatch: CapacitorWatch;\n  CapacitorApp: CapacitorApp;\n}\n"]}