{"ast":null,"code":"import React,{useState,useEffect}from'react';import styled from'styled-components';import api from'../services/api';import MemeCard from'../components/MemeCard';import UploadButton from'../components/UploadButton';import{useNavigate}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import{FiRefreshCw}from'react-icons/fi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FeedContainer=styled.div`\n  max-width: 100%;\n  width: 100%;\n  padding: 0;\n  background-color: var(--background);\n`;const FeedGrid=styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1px;\n  width: 100%;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`;const SquareMemeContainer=styled.div`\n  position: relative;\n  width: 100%;\n  padding-bottom: 100%; /* Mantém aspecto quadrado */\n  overflow: hidden;\n  background: #000;\n`;const SquareMemeContent=styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;const EmptyFeed=styled.div`\n  width: 100%;\n  padding: 40px 20px;\n  text-align: center;\n  color: var(--text-light);\n  \n  h3 {\n    font-size: 1.2rem;\n    margin-bottom: 10px;\n  }\n`;const LoadingIndicator=styled.div`\n  width: 100%;\n  padding: 40px;\n  text-align: center;\n  color: var(--text-light);\n`;const ErrorMessage=styled.div`\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n  color: var(--dislike-color);\n  \n  button {\n    margin-top: 15px;\n    padding: 8px 16px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    border-radius: 20px;\n    display: inline-flex;\n    align-items: center;\n    gap: 5px;\n  }\n`;const FeedPage=()=>{const[memes,setMemes]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const{user,logout}=useAuth();const navigate=useNavigate();const fetchMemes=async()=>{try{setLoading(true);setError(null);const{data}=await api.get('/memes');const validMemes=Array.isArray(data===null||data===void 0?void 0:data.data)?data.data.filter(meme=>!meme.isDeleted):[];setMemes(validMemes);}catch(error){var _error$response;console.error('Erro ao carregar feed:',error);setError('Erro ao carregar o feed. Tente novamente mais tarde.');if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){await logout();navigate('/login');}}finally{setLoading(false);}};const handleMemeDeleted=deletedMemeId=>{setMemes(prevMemes=>prevMemes.filter(meme=>meme._id!==deletedMemeId));};useEffect(()=>{fetchMemes();},[]);if(loading){return/*#__PURE__*/_jsx(FeedContainer,{children:/*#__PURE__*/_jsx(LoadingIndicator,{children:\"Carregando...\"})});}if(error){return/*#__PURE__*/_jsx(FeedContainer,{children:/*#__PURE__*/_jsxs(ErrorMessage,{children:[error,/*#__PURE__*/_jsxs(\"button\",{onClick:fetchMemes,children:[/*#__PURE__*/_jsx(FiRefreshCw,{}),\" Tentar novamente\"]})]})});}return/*#__PURE__*/_jsx(FeedContainer,{children:/*#__PURE__*/_jsx(FeedGrid,{children:memes.length===0?/*#__PURE__*/_jsxs(EmptyFeed,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Nenhum post encontrado\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Seja o primeiro a postar!\"}),/*#__PURE__*/_jsx(UploadButton,{})]}):memes.map(meme=>/*#__PURE__*/_jsx(SquareMemeContainer,{children:/*#__PURE__*/_jsx(SquareMemeContent,{children:/*#__PURE__*/_jsx(MemeCard,{meme:meme,onDelete:handleMemeDeleted,onCommentCountChange:newCount=>{setMemes(prevMemes=>prevMemes.map(m=>m._id===meme._id?{...m,commentCount:newCount}:m));},isSquareView:true})})},meme._id))})});};export default FeedPage;","map":{"version":3,"names":["React","useState","useEffect","styled","api","MemeCard","UploadButton","useNavigate","useAuth","FiRefreshCw","jsx","_jsx","jsxs","_jsxs","FeedContainer","div","FeedGrid","SquareMemeContainer","SquareMemeContent","EmptyFeed","LoadingIndicator","ErrorMessage","FeedPage","memes","setMemes","loading","setLoading","error","setError","user","logout","navigate","fetchMemes","data","get","validMemes","Array","isArray","filter","meme","isDeleted","_error$response","console","response","status","handleMemeDeleted","deletedMemeId","prevMemes","_id","children","onClick","length","map","onDelete","onCommentCountChange","newCount","m","commentCount","isSquareView"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/jokersta_apk/src/pages/FeedPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport UploadButton from '../components/UploadButton';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { FiRefreshCw } from 'react-icons/fi';\n\nconst FeedContainer = styled.div`\n  max-width: 100%;\n  width: 100%;\n  padding: 0;\n  background-color: var(--background);\n`;\n\nconst FeedGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1px;\n  width: 100%;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`;\n\nconst SquareMemeContainer = styled.div`\n  position: relative;\n  width: 100%;\n  padding-bottom: 100%; /* Mantém aspecto quadrado */\n  overflow: hidden;\n  background: #000;\n`;\n\nconst SquareMemeContent = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst EmptyFeed = styled.div`\n  width: 100%;\n  padding: 40px 20px;\n  text-align: center;\n  color: var(--text-light);\n  \n  h3 {\n    font-size: 1.2rem;\n    margin-bottom: 10px;\n  }\n`;\n\nconst LoadingIndicator = styled.div`\n  width: 100%;\n  padding: 40px;\n  text-align: center;\n  color: var(--text-light);\n`;\n\nconst ErrorMessage = styled.div`\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n  color: var(--dislike-color);\n  \n  button {\n    margin-top: 15px;\n    padding: 8px 16px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    border-radius: 20px;\n    display: inline-flex;\n    align-items: center;\n    gap: 5px;\n  }\n`;\n\nconst FeedPage = () => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const fetchMemes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { data } = await api.get('/memes');\n      \n      const validMemes = Array.isArray(data?.data) \n        ? data.data.filter(meme => !meme.isDeleted)\n        : [];\n      \n      setMemes(validMemes);\n    } catch (error) {\n      console.error('Erro ao carregar feed:', error);\n      setError('Erro ao carregar o feed. Tente novamente mais tarde.');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMemeDeleted = (deletedMemeId) => {\n    setMemes(prevMemes => prevMemes.filter(meme => meme._id !== deletedMemeId));\n  };\n\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n\n  if (loading) {\n    return (\n      <FeedContainer>\n        <LoadingIndicator>Carregando...</LoadingIndicator>\n      </FeedContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      <FeedContainer>\n        <ErrorMessage>\n          {error}\n          <button onClick={fetchMemes}>\n            <FiRefreshCw /> Tentar novamente\n          </button>\n        </ErrorMessage>\n      </FeedContainer>\n    );\n  }\n\n  return (\n    <FeedContainer>\n      <FeedGrid>\n        {memes.length === 0 ? (\n          <EmptyFeed>\n            <h3>Nenhum post encontrado</h3>\n            <p>Seja o primeiro a postar!</p>\n            <UploadButton />\n          </EmptyFeed>\n        ) : (\n          memes.map(meme => (\n            <SquareMemeContainer key={meme._id}>\n              <SquareMemeContent>\n                <MemeCard \n                  meme={meme}\n                  onDelete={handleMemeDeleted}\n                  onCommentCountChange={(newCount) => {\n                    setMemes(prevMemes => prevMemes.map(m => \n                      m._id === meme._id ? { ...m, commentCount: newCount } : m\n                    ))}\n                  }\n                  isSquareView\n                />\n              </SquareMemeContent>\n            </SquareMemeContainer>\n          ))\n        )}\n      </FeedGrid>\n    </FeedContainer>\n  );\n};\n\nexport default FeedPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}