{"ast":null,"code":"import React,{useState,useEffect}from'react';import styled from'styled-components';import api from'../services/api';import MemeCard from'../components/MemeCard';import UploadButton from'../components/UploadButton';import{useNavigate}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import{FiRefreshCw}from'react-icons/fi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FeedContainer=styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: var(--background);\n`;const FeedHeader=styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;const FeedTitle=styled.h1`\n  font-size: 24px;\n  color: var(--text);\n`;const RefreshButton=styled.button`\n  background: var(--card-bg);\n  border: 1px solid var(--border-light);\n  padding: 8px 16px;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 14px;\n  color: var(--text);\n  transition: var(--transition);\n  \n  &:hover {\n    background: var(--border-light);\n    box-shadow: var(--shadow-hover);\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n`;const RepostButton=styled.button`\n  background: var(--card-bg);\n  border: 1px solid var(--border-light);\n  padding: 8px 16px;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  margin-top: 8px;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 14px;\n  color: var(--text);\n  transition: var(--transition);\n  \n  &:hover {\n    background: var(--border-light);\n    box-shadow: var(--shadow-hover);\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n`;const EmptyFeed=styled.div`\n  text-align: center;\n  padding: 40px 20px;\n  background: var(--card-bg);\n  border-radius: var(--radius-md);\n  box-shadow: var(--shadow);\n  color: var(--text);\n`;const LoadingIndicator=styled.div`\n  text-align: center;\n  padding: 40px;\n  font-size: 18px;\n  color: var(--text-light);\n`;const ErrorMessage=styled.div`\n  text-align: center;\n  padding: 20px;\n  background: var(--card-bg);\n  color: var(--dislike-color);\n  border-radius: var(--radius-md);\n  margin: 20px 0;\n  box-shadow: var(--shadow);\n  border: 1px solid var(--border-light);\n`;const FeedPage=()=>{const[memes,setMemes]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[deletingMemeId,setDeletingMemeId]=useState(null);const{user,logout}=useAuth();const navigate=useNavigate();const fetchMemes=async()=>{try{setLoading(true);setError(null);const{data}=await api.get('/memes');// Filtra memes deletados no frontend (backup caso o backend não filtre)\nconst validMemes=Array.isArray(data===null||data===void 0?void 0:data.data)?data.data.filter(meme=>!meme.isDeleted):[];setMemes(validMemes);}catch(error){var _error$response;console.error('Erro ao carregar feed:',error);setError('Erro ao carregar o feed. Tente novamente mais tarde.');if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){await logout();navigate('/login');}}finally{setLoading(false);}};const handleMemeDeleted=deletedMemeId=>{// Remove o meme deletado da lista local\nsetMemes(prevMemes=>prevMemes.filter(meme=>meme._id!==deletedMemeId));setDeletingMemeId(null);};const handleRepost=async memeId=>{try{await api.post(`/memes/${memeId}/repost`);await fetchMemes();// Atualiza a lista após repostar\n}catch(error){var _error$response2;console.error('Erro ao repostar:',error);setError('Erro ao repostar');if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===401){await logout();navigate('/login');}}};useEffect(()=>{fetchMemes();},[]);if(loading){return/*#__PURE__*/_jsx(FeedContainer,{children:/*#__PURE__*/_jsx(LoadingIndicator,{children:\"Carregando memes...\"})});}if(error){return/*#__PURE__*/_jsx(FeedContainer,{children:/*#__PURE__*/_jsxs(ErrorMessage,{children:[error,/*#__PURE__*/_jsxs(RefreshButton,{onClick:fetchMemes,children:[/*#__PURE__*/_jsx(FiRefreshCw,{}),\" Tentar novamente\"]})]})});}return/*#__PURE__*/_jsxs(FeedContainer,{children:[/*#__PURE__*/_jsxs(FeedHeader,{children:[/*#__PURE__*/_jsx(FeedTitle,{children:\"Feed\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(UploadButton,{}),/*#__PURE__*/_jsxs(RefreshButton,{onClick:fetchMemes,children:[/*#__PURE__*/_jsx(FiRefreshCw,{}),\" Atualizar\"]})]})]}),memes.length===0?/*#__PURE__*/_jsxs(EmptyFeed,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Nenhuma postagem encontrada\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Que tal criar a primeira?\"}),/*#__PURE__*/_jsx(UploadButton,{style:{marginTop:'20px'}})]}):/*#__PURE__*/_jsx(\"div\",{className:\"feed-list\",children:memes.map(meme=>{var _meme$author;return/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'24px'},children:[/*#__PURE__*/_jsx(MemeCard,{meme:meme,onDelete:handleMemeDeleted,isDeleting:deletingMemeId===meme._id,onStartDelete:()=>setDeletingMemeId(meme._id),onCommentCountChange:newCount=>{// Atualiza a contagem no estado local\nsetMemes(prevMemes=>prevMemes.map(m=>m._id===meme._id?{...m,commentCount:newCount}:m));},commentCount:meme.commentCount||0}),user&&user._id!==((_meme$author=meme.author)===null||_meme$author===void 0?void 0:_meme$author._id)&&/*#__PURE__*/_jsxs(RepostButton,{onClick:()=>handleRepost(meme._id),children:[/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDD01\"}),\" Repostar (\",meme.repostCount||0,\")\"]})]},meme._id);})})]});};export default FeedPage;","map":{"version":3,"names":["React","useState","useEffect","styled","api","MemeCard","UploadButton","useNavigate","useAuth","FiRefreshCw","jsx","_jsx","jsxs","_jsxs","FeedContainer","div","FeedHeader","FeedTitle","h1","RefreshButton","button","RepostButton","EmptyFeed","LoadingIndicator","ErrorMessage","FeedPage","memes","setMemes","loading","setLoading","error","setError","deletingMemeId","setDeletingMemeId","user","logout","navigate","fetchMemes","data","get","validMemes","Array","isArray","filter","meme","isDeleted","_error$response","console","response","status","handleMemeDeleted","deletedMemeId","prevMemes","_id","handleRepost","memeId","post","_error$response2","children","onClick","length","style","marginTop","className","map","_meme$author","marginBottom","onDelete","isDeleting","onStartDelete","onCommentCountChange","newCount","m","commentCount","author","repostCount"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/jokerstar-apk/src/pages/FeedPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport UploadButton from '../components/UploadButton';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { FiRefreshCw } from 'react-icons/fi';\n\nconst FeedContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: var(--background);\n`;\n\nconst FeedHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst FeedTitle = styled.h1`\n  font-size: 24px;\n  color: var(--text);\n`;\n\nconst RefreshButton = styled.button`\n  background: var(--card-bg);\n  border: 1px solid var(--border-light);\n  padding: 8px 16px;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 14px;\n  color: var(--text);\n  transition: var(--transition);\n  \n  &:hover {\n    background: var(--border-light);\n    box-shadow: var(--shadow-hover);\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n`;\n\nconst RepostButton = styled.button`\n  background: var(--card-bg);\n  border: 1px solid var(--border-light);\n  padding: 8px 16px;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  margin-top: 8px;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 14px;\n  color: var(--text);\n  transition: var(--transition);\n  \n  &:hover {\n    background: var(--border-light);\n    box-shadow: var(--shadow-hover);\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n`;\n\nconst EmptyFeed = styled.div`\n  text-align: center;\n  padding: 40px 20px;\n  background: var(--card-bg);\n  border-radius: var(--radius-md);\n  box-shadow: var(--shadow);\n  color: var(--text);\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 40px;\n  font-size: 18px;\n  color: var(--text-light);\n`;\n\nconst ErrorMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  background: var(--card-bg);\n  color: var(--dislike-color);\n  border-radius: var(--radius-md);\n  margin: 20px 0;\n  box-shadow: var(--shadow);\n  border: 1px solid var(--border-light);\n`;\n\nconst FeedPage = () => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [deletingMemeId, setDeletingMemeId] = useState(null);\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const fetchMemes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { data } = await api.get('/memes');\n      \n      // Filtra memes deletados no frontend (backup caso o backend não filtre)\n      const validMemes = Array.isArray(data?.data) \n        ? data.data.filter(meme => !meme.isDeleted)\n        : [];\n      \n      setMemes(validMemes);\n    } catch (error) {\n      console.error('Erro ao carregar feed:', error);\n      setError('Erro ao carregar o feed. Tente novamente mais tarde.');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMemeDeleted = (deletedMemeId) => {\n    // Remove o meme deletado da lista local\n    setMemes(prevMemes => prevMemes.filter(meme => meme._id !== deletedMemeId));\n    setDeletingMemeId(null);\n  };\n\n  const handleRepost = async (memeId) => {\n    try {\n      await api.post(`/memes/${memeId}/repost`);\n      await fetchMemes(); // Atualiza a lista após repostar\n    } catch (error) {\n      console.error('Erro ao repostar:', error);\n      setError('Erro ao repostar');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n\n  if (loading) {\n    return (\n      <FeedContainer>\n        <LoadingIndicator>Carregando memes...</LoadingIndicator>\n      </FeedContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      <FeedContainer>\n        <ErrorMessage>\n          {error}\n          <RefreshButton onClick={fetchMemes}>\n            <FiRefreshCw /> Tentar novamente\n          </RefreshButton>\n        </ErrorMessage>\n      </FeedContainer>\n    );\n  }\n\n  return (\n    <FeedContainer>\n      <FeedHeader>\n        <FeedTitle>Feed</FeedTitle>\n        <div>\n          <UploadButton />\n          <RefreshButton onClick={fetchMemes}>\n            <FiRefreshCw /> Atualizar\n          </RefreshButton>\n        </div>\n      </FeedHeader>\n      \n      {memes.length === 0 ? (\n        <EmptyFeed>\n          <h3>Nenhuma postagem encontrada</h3>\n          <p>Que tal criar a primeira?</p>\n          <UploadButton style={{ marginTop: '20px' }} />\n        </EmptyFeed>\n      ) : (\n        <div className=\"feed-list\">\n          {memes.map(meme => (\n            <div key={meme._id} style={{ marginBottom: '24px' }}>\n              <MemeCard \n                meme={meme}\n                onDelete={handleMemeDeleted}\n                isDeleting={deletingMemeId === meme._id}\n                onStartDelete={() => setDeletingMemeId(meme._id)}\n                onCommentCountChange={(newCount) => {\n                  // Atualiza a contagem no estado local\n                  setMemes(prevMemes => prevMemes.map(m => \n                    m._id === meme._id ? { ...m, commentCount: newCount } : m\n                  ))}}\n                commentCount={meme.commentCount || 0}\n              />\n              {user && user._id !== meme.author?._id && (\n                <RepostButton onClick={() => handleRepost(meme._id)}>\n                  <span>🔁</span> Repostar ({meme.repostCount || 0})\n                </RepostButton>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </FeedContainer>\n  );\n};\n\nexport default FeedPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}