{"ast":null,"code":"// contexts/NotificationContext.jsx\nimport React,{createContext,useContext,useState,useEffect}from'react';import api from'../services/api';import{useAuth}from'./AuthContext';import{setupNotificationListener,initSocket,removeNotificationListeners}from'../services/socket';import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext();export const NotificationProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);const[unreadCount,setUnreadCount]=useState(0);const[loading,setLoading]=useState(true);const{user}=useAuth();// Carrega notificações iniciais\nconst loadNotifications=async()=>{try{setLoading(true);const response=await api.get('/notifications',{params:{limit:20,skip:0}});console.log('Notifications response:',response);setNotifications(response.data.data);}catch(error){console.error('Failed to load notifications:',error);}finally{setLoading(false);}};// Carrega contagem de não lidas\nconst loadUnreadCount=async()=>{if(!user)return;try{const response=await api.get('/notifications/unread-count');setUnreadCount(response.data.count);}catch(error){console.error('Failed to load unread count:',error);}};// Marca notificações como lidas\nconst markAsRead=async notificationIds=>{if(!notificationIds||notificationIds.length===0)return;try{await api.post('/notifications/mark-read',{notificationIds});setUnreadCount(prev=>Math.max(0,prev-notificationIds.length));setNotifications(prev=>prev.map(n=>notificationIds.includes(n._id)?{...n,read:true}:n));}catch(error){console.error('Failed to mark as read:',error);}};// Configura WebSocket quando o usuário loga\nuseEffect(()=>{if(!user)return;// 1. Inicializa o socket com o token do usuário\nconst token=localStorage.getItem('token');const socket=initSocket(token);socket.on('connect_error',err=>{console.error('Connection error:',err);});// 2. Handler para novas notificações\nconst handleNewNotification=notification=>{// Atualiza o estado de forma segura\nsetNotifications(prev=>[notification,...prev]);setUnreadCount(prev=>prev+1);// Mostra alerta se a página não está em foco\nif(document.visibilityState!=='visible'){showNotificationAlert(notification);}};// 3. Configura o listener\nsocket.on('new-notification',handleNewNotification);// 4. Carrega notificações existentes\nconst loadData=async()=>{try{await loadNotifications();await loadUnreadCount();}catch(error){console.error('Error loading notifications:',error);}};loadData();// 5. Cleanup function\nreturn()=>{// Remove apenas o listener específico\nsocket.off('new-notification',handleNewNotification);// Opcional: desconecta o socket se necessário\n// disconnectSocket();\n};},[user,loadNotifications,loadUnreadCount]);// Função para mostrar alerta de notificação\nconst showNotificationAlert=notification=>{if('Notification'in window&&Notification.permission==='granted'){var _notification$sender,_notification$sender$;const title=getNotificationTitle(notification);const options={body:getNotificationBody(notification),icon:((_notification$sender=notification.sender)===null||_notification$sender===void 0?void 0:(_notification$sender$=_notification$sender.profile)===null||_notification$sender$===void 0?void 0:_notification$sender$.avatar)||'/logo192.png'};new Notification(title,options);}};// Funções auxiliares para texto de notificação\nconst getNotificationTitle=notification=>{var _notification$sender2,_notification$metadat,_notification$sender3,_notification$metadat2;switch(notification.type){case'like':return`${((_notification$sender2=notification.sender)===null||_notification$sender2===void 0?void 0:_notification$sender2.username)||'Alguém'} curtiu seu meme`;case'like_grouped':return`Seu meme tem ${((_notification$metadat=notification.metadata)===null||_notification$metadat===void 0?void 0:_notification$metadat.count)||'muitas'} curtidas`;case'comment':return`${((_notification$sender3=notification.sender)===null||_notification$sender3===void 0?void 0:_notification$sender3.username)||'Alguém'} comentou no seu meme`;case'comment_grouped':return`Seu meme tem ${((_notification$metadat2=notification.metadata)===null||_notification$metadat2===void 0?void 0:_notification$metadat2.count)||'muitos'} comentários`;// outros tipos...\ndefault:return'Nova notificação';}};const getNotificationBody=notification=>{var _notification$meme,_notification$meme2;switch(notification.type){case'like':case'comment':return(_notification$meme=notification.meme)!==null&&_notification$meme!==void 0&&_notification$meme.caption?truncate(notification.meme.caption,50):'Veja agora';case'like_grouped':case'comment_grouped':return(_notification$meme2=notification.meme)!==null&&_notification$meme2!==void 0&&_notification$meme2.caption?truncate(notification.meme.caption,50):'Veja todas as interações';default:return'';}};const truncate=(str,n)=>{return(str===null||str===void 0?void 0:str.length)>n?str.substr(0,n-1)+'...':str;};return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:{notifications,unreadCount,loading,markAsRead,loadNotifications,loadUnreadCount},children:children});};export const useNotifications=()=>{const context=useContext(NotificationContext);if(!context){throw new Error('useNotifications must be used within a NotificationProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","useAuth","setupNotificationListener","initSocket","removeNotificationListeners","jsx","_jsx","NotificationContext","NotificationProvider","_ref","children","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","user","loadNotifications","response","get","params","limit","skip","console","log","data","error","loadUnreadCount","count","markAsRead","notificationIds","length","post","prev","Math","max","map","n","includes","_id","read","token","localStorage","getItem","socket","on","err","handleNewNotification","notification","document","visibilityState","showNotificationAlert","loadData","off","window","Notification","permission","_notification$sender","_notification$sender$","title","getNotificationTitle","options","body","getNotificationBody","icon","sender","profile","avatar","_notification$sender2","_notification$metadat","_notification$sender3","_notification$metadat2","type","username","metadata","_notification$meme","_notification$meme2","meme","caption","truncate","str","substr","Provider","value","useNotifications","context","Error"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/client2/src/contexts/NotificationContext.jsx"],"sourcesContent":["// contexts/NotificationContext.jsx\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\nimport { useAuth } from './AuthContext';\r\nimport { setupNotificationListener, initSocket, removeNotificationListeners } from '../services/socket';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const { user } = useAuth();\r\n\r\n  // Carrega notificações iniciais\r\n  const loadNotifications = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('/notifications', {\r\n        params: { limit: 20, skip: 0 }\r\n      });\r\n      console.log('Notifications response:', response);\r\n      setNotifications(response.data.data);\r\n    } catch (error) {\r\n      console.error('Failed to load notifications:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Carrega contagem de não lidas\r\n  const loadUnreadCount = async () => {\r\n    if (!user) return;\r\n    try {\r\n      const response = await api.get('/notifications/unread-count');\r\n      setUnreadCount(response.data.count);\r\n    } catch (error) {\r\n      console.error('Failed to load unread count:', error);\r\n    }\r\n  };\r\n\r\n  // Marca notificações como lidas\r\n  const markAsRead = async (notificationIds) => {\r\n    if (!notificationIds || notificationIds.length === 0) return;\r\n    try {\r\n      await api.post('/notifications/mark-read', { notificationIds });\r\n      setUnreadCount(prev => Math.max(0, prev - notificationIds.length));\r\n      setNotifications(prev => \r\n        prev.map(n => \r\n          notificationIds.includes(n._id) ? { ...n, read: true } : n\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to mark as read:', error);\r\n    }\r\n  };\r\n\r\n  // Configura WebSocket quando o usuário loga\r\n  useEffect(() => {\r\n    if (!user) return;\r\n  \r\n    // 1. Inicializa o socket com o token do usuário\r\n    const token = localStorage.getItem('token');\r\n    const socket = initSocket(token);\r\n    socket.on('connect_error', (err) => {\r\n        console.error('Connection error:', err);\r\n      });\r\n    \r\n  \r\n    // 2. Handler para novas notificações\r\n    const handleNewNotification = (notification) => {\r\n      // Atualiza o estado de forma segura\r\n      setNotifications(prev => [notification, ...prev]);\r\n      setUnreadCount(prev => prev + 1);\r\n      \r\n      // Mostra alerta se a página não está em foco\r\n      if (document.visibilityState !== 'visible') {\r\n        showNotificationAlert(notification);\r\n      }\r\n    };\r\n  \r\n    // 3. Configura o listener\r\n    socket.on('new-notification', handleNewNotification);\r\n  \r\n    // 4. Carrega notificações existentes\r\n    const loadData = async () => {\r\n      try {\r\n        await loadNotifications();\r\n        await loadUnreadCount();\r\n      } catch (error) {\r\n        console.error('Error loading notifications:', error);\r\n      }\r\n    };\r\n    loadData();\r\n  \r\n    // 5. Cleanup function\r\n    return () => {\r\n      // Remove apenas o listener específico\r\n      socket.off('new-notification', handleNewNotification);\r\n      \r\n      // Opcional: desconecta o socket se necessário\r\n      // disconnectSocket();\r\n    };\r\n  }, [user, loadNotifications, loadUnreadCount]);\r\n\r\n  // Função para mostrar alerta de notificação\r\n  const showNotificationAlert = (notification) => {\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const title = getNotificationTitle(notification);\r\n      const options = {\r\n        body: getNotificationBody(notification),\r\n        icon: notification.sender?.profile?.avatar || '/logo192.png'\r\n      };\r\n      new Notification(title, options);\r\n    }\r\n  };\r\n\r\n  // Funções auxiliares para texto de notificação\r\n  const getNotificationTitle = (notification) => {\r\n    switch(notification.type) {\r\n      case 'like':\r\n        return `${notification.sender?.username || 'Alguém'} curtiu seu meme`;\r\n      case 'like_grouped':\r\n        return `Seu meme tem ${notification.metadata?.count || 'muitas'} curtidas`;\r\n      case 'comment':\r\n        return `${notification.sender?.username || 'Alguém'} comentou no seu meme`;\r\n      case 'comment_grouped':\r\n        return `Seu meme tem ${notification.metadata?.count || 'muitos'} comentários`;\r\n      // outros tipos...\r\n      default:\r\n        return 'Nova notificação';\r\n    }\r\n  };\r\n\r\n  const getNotificationBody = (notification) => {\r\n    switch(notification.type) {\r\n      case 'like':\r\n      case 'comment':\r\n        return notification.meme?.caption \r\n          ? truncate(notification.meme.caption, 50) \r\n          : 'Veja agora';\r\n      case 'like_grouped':\r\n      case 'comment_grouped':\r\n        return notification.meme?.caption \r\n          ? truncate(notification.meme.caption, 50) \r\n          : 'Veja todas as interações';\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n\r\n  const truncate = (str, n) => {\r\n    return str?.length > n ? str.substr(0, n-1) + '...' : str;\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider\r\n      value={{\r\n        notifications,\r\n        unreadCount,\r\n        loading,\r\n        markAsRead,\r\n        loadNotifications,\r\n        loadUnreadCount\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}