{"ast":null,"code":"// src/services/socket.js\nimport{io}from'socket.io-client';const API_URL=process.env.REACT_APP_API_URL||'https://api.jokesteronline.org';let socket;/**\r\n * Inicializa a conexão do socket\r\n * @param {string} token - Token JWT do usuário\r\n * @returns {Socket} Instância do socket\r\n */export const initSocket=token=>{if(!socket){socket=io(API_URL,{auth:{token},transports:['websocket'],reconnection:true,reconnectionAttempts:5,reconnectionDelay:1000});// Eventos para debug\nsocket.on('connect',()=>{console.log('Socket conectado:',socket.id);});socket.on('disconnect',()=>{console.log('Socket desconectado');});socket.on('connect_error',err=>{console.error('Erro de conexão:',err);});}return socket;};/**\r\n * Obtém a instância atual do socket\r\n * @returns {Socket|null} Instância do socket ou null\r\n */export const getSocket=()=>socket;/**\r\n * Configura um listener para notificações\r\n * @param {function} callback - Função a ser chamada quando uma notificação chegar\r\n */export const setupNotificationListener=callback=>{if(socket){socket.on('new-notification',callback);}else{console.warn('Socket não inicializado');}};/**\r\n * Remove todos os listeners de notificação\r\n */export const removeNotificationListeners=()=>{if(socket){socket.off('new-notification');}};/**\r\n * Desconecta o socket\r\n */export const disconnectSocket=()=>{if(socket){socket.disconnect();socket=null;}};","map":{"version":3,"names":["io","API_URL","process","env","REACT_APP_API_URL","socket","initSocket","token","auth","transports","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","id","err","error","getSocket","setupNotificationListener","callback","warn","removeNotificationListeners","off","disconnectSocket","disconnect"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/client2/src/services/socket.js"],"sourcesContent":["// src/services/socket.js\r\nimport { io } from 'socket.io-client';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'https://api.jokesteronline.org';\r\nlet socket;\r\n\r\n/**\r\n * Inicializa a conexão do socket\r\n * @param {string} token - Token JWT do usuário\r\n * @returns {Socket} Instância do socket\r\n */\r\nexport const initSocket = (token) => {\r\n  if (!socket) {\r\n    socket = io(API_URL, {\r\n      auth: { token },\r\n      transports: ['websocket'],\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000\r\n    });\r\n\r\n    // Eventos para debug\r\n    socket.on('connect', () => {\r\n      console.log('Socket conectado:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Socket desconectado');\r\n    });\r\n\r\n    socket.on('connect_error', (err) => {\r\n      console.error('Erro de conexão:', err);\r\n    });\r\n  }\r\n  return socket;\r\n};\r\n\r\n/**\r\n * Obtém a instância atual do socket\r\n * @returns {Socket|null} Instância do socket ou null\r\n */\r\nexport const getSocket = () => socket;\r\n\r\n/**\r\n * Configura um listener para notificações\r\n * @param {function} callback - Função a ser chamada quando uma notificação chegar\r\n */\r\nexport const setupNotificationListener = (callback) => {\r\n  if (socket) {\r\n    socket.on('new-notification', callback);\r\n  } else {\r\n    console.warn('Socket não inicializado');\r\n  }\r\n};\r\n\r\n/**\r\n * Remove todos os listeners de notificação\r\n */\r\nexport const removeNotificationListeners = () => {\r\n  if (socket) {\r\n    socket.off('new-notification');\r\n  }\r\n};\r\n\r\n/**\r\n * Desconecta o socket\r\n */\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAASA,EAAE,KAAQ,kBAAkB,CAErC,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,gCAAgC,CACjF,GAAI,CAAAC,MAAM,CAEV;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,UAAU,CAAIC,KAAK,EAAK,CACnC,GAAI,CAACF,MAAM,CAAE,CACXA,MAAM,CAAGL,EAAE,CAACC,OAAO,CAAE,CACnBO,IAAI,CAAE,CAAED,KAAM,CAAC,CACfE,UAAU,CAAE,CAAC,WAAW,CAAC,CACzBC,YAAY,CAAE,IAAI,CAClBC,oBAAoB,CAAE,CAAC,CACvBC,iBAAiB,CAAE,IACrB,CAAC,CAAC,CAEF;AACAP,MAAM,CAACQ,EAAE,CAAC,SAAS,CAAE,IAAM,CACzBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEV,MAAM,CAACW,EAAE,CAAC,CAC7C,CAAC,CAAC,CAEFX,MAAM,CAACQ,EAAE,CAAC,YAAY,CAAE,IAAM,CAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CACpC,CAAC,CAAC,CAEFV,MAAM,CAACQ,EAAE,CAAC,eAAe,CAAGI,GAAG,EAAK,CAClCH,OAAO,CAACI,KAAK,CAAC,kBAAkB,CAAED,GAAG,CAAC,CACxC,CAAC,CAAC,CACJ,CACA,MAAO,CAAAZ,MAAM,CACf,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAc,SAAS,CAAGA,CAAA,GAAMd,MAAM,CAErC;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAe,yBAAyB,CAAIC,QAAQ,EAAK,CACrD,GAAIhB,MAAM,CAAE,CACVA,MAAM,CAACQ,EAAE,CAAC,kBAAkB,CAAEQ,QAAQ,CAAC,CACzC,CAAC,IAAM,CACLP,OAAO,CAACQ,IAAI,CAAC,yBAAyB,CAAC,CACzC,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,2BAA2B,CAAGA,CAAA,GAAM,CAC/C,GAAIlB,MAAM,CAAE,CACVA,MAAM,CAACmB,GAAG,CAAC,kBAAkB,CAAC,CAChC,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CACpC,GAAIpB,MAAM,CAAE,CACVA,MAAM,CAACqB,UAAU,CAAC,CAAC,CACnBrB,MAAM,CAAG,IAAI,CACf,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}