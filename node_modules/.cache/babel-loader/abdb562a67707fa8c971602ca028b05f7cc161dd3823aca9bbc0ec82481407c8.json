{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ifunny-clone\\\\client\\\\src\\\\components\\\\MemeThumbnail.jsx\";\n// src/components/MemeThumbnail.jsx\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThumbnailContainer = styled(Link)`\n  display: block;\n  border-radius: 8px;\n  overflow: hidden;\n  position: relative;\n  aspect-ratio: 1;\n  background: #f5f5f5;\n`;\n_c = ThumbnailContainer;\nconst ThumbnailImage = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: transform 0.3s;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n_c2 = ThumbnailImage;\nconst RepostBadge = styled.div`\n  position: absolute;\n  top: 5px;\n  left: 5px;\n  background: rgba(0,0,0,0.7);\n  color: white;\n  padding: 3px 6px;\n  border-radius: 4px;\n  font-size: 0.8rem;\n`;\nconst MemeThumbnail = ({\n  meme\n}) => {\n  // Construa a URL correta\n  const getMediaUrl = () => {\n    if (!meme.mediaUrl) return ''; // Ou uma imagem padrão\n    if (meme.mediaUrl.startsWith('http')) return meme.mediaUrl;\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}${meme.mediaUrl}`;\n  };\n  return /*#__PURE__*/_jsxDEV(ThumbnailContainer, {\n    to: `/memes/${meme._id}`,\n    children: /*#__PURE__*/_jsxDEV(ThumbnailImage, {\n      src: getMediaUrl(),\n      alt: meme.caption || 'Meme thumbnail',\n      crossOrigin: \"anonymous\",\n      onError: e => {\n        e.target.src = 'https://placehold.co/600x400?text=Imagem+não+carregada';\n        e.target.onerror = null;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n};\n_c3 = MemeThumbnail;\nexport default MemeThumbnail;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ThumbnailContainer\");\n$RefreshReg$(_c2, \"ThumbnailImage\");\n$RefreshReg$(_c3, \"MemeThumbnail\");","map":{"version":3,"names":["styled","Link","jsxDEV","_jsxDEV","ThumbnailContainer","_c","ThumbnailImage","img","_c2","RepostBadge","div","MemeThumbnail","meme","getMediaUrl","mediaUrl","startsWith","process","env","REACT_APP_API_URL","to","_id","children","src","alt","caption","crossOrigin","onError","e","target","onerror","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/ifunny-clone/client/src/components/MemeThumbnail.jsx"],"sourcesContent":["// src/components/MemeThumbnail.jsx\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ThumbnailContainer = styled(Link)`\r\n  display: block;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  position: relative;\r\n  aspect-ratio: 1;\r\n  background: #f5f5f5;\r\n`;\r\n\r\nconst ThumbnailImage = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  transition: transform 0.3s;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\nconst RepostBadge = styled.div`\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 5px;\r\n  background: rgba(0,0,0,0.7);\r\n  color: white;\r\n  padding: 3px 6px;\r\n  border-radius: 4px;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst MemeThumbnail = ({ meme }) => {\r\n    // Construa a URL correta\r\n    const getMediaUrl = () => {\r\n      if (!meme.mediaUrl) return ''; // Ou uma imagem padrão\r\n      if (meme.mediaUrl.startsWith('http')) return meme.mediaUrl;\r\n      return `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}${meme.mediaUrl}`;\r\n    };\r\n  \r\n    return (\r\n      <ThumbnailContainer to={`/memes/${meme._id}`}>\r\n        <ThumbnailImage \r\n          src={getMediaUrl()}\r\n          alt={meme.caption || 'Meme thumbnail'}\r\n          crossOrigin=\"anonymous\"\r\n          onError={(e) => {\r\n            e.target.src = 'https://placehold.co/600x400?text=Imagem+não+carregada';\r\n            e.target.onerror = null;\r\n          }}\r\n        />\r\n      </ThumbnailContainer>\r\n    );\r\n  };\r\n\r\nexport default MemeThumbnail;"],"mappings":";AAAA;AACA,OAAOA,MAAM,MAAM,mBAAmB;AACtC,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,kBAAkB,GAAGJ,MAAM,CAACC,IAAI,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACI,EAAA,GAPID,kBAAkB;AASxB,MAAME,cAAc,GAAGN,MAAM,CAACO,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GATIF,cAAc;AAUpB,MAAMG,WAAW,GAAGT,MAAM,CAACU,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAChC;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACD,IAAI,CAACE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;IAC/B,IAAIF,IAAI,CAACE,QAAQ,CAACC,UAAU,CAAC,MAAM,CAAC,EAAE,OAAOH,IAAI,CAACE,QAAQ;IAC1D,OAAO,GAAGE,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,GAAGN,IAAI,CAACE,QAAQ,EAAE;EACtF,CAAC;EAED,oBACEX,OAAA,CAACC,kBAAkB;IAACe,EAAE,EAAE,UAAUP,IAAI,CAACQ,GAAG,EAAG;IAAAC,QAAA,eAC3ClB,OAAA,CAACG,cAAc;MACbgB,GAAG,EAAET,WAAW,CAAC,CAAE;MACnBU,GAAG,EAAEX,IAAI,CAACY,OAAO,IAAI,gBAAiB;MACtCC,WAAW,EAAC,WAAW;MACvBC,OAAO,EAAGC,CAAC,IAAK;QACdA,CAAC,CAACC,MAAM,CAACN,GAAG,GAAG,wDAAwD;QACvEK,CAAC,CAACC,MAAM,CAACC,OAAO,GAAG,IAAI;MACzB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEzB,CAAC;AAACC,GAAA,GArBEvB,aAAa;AAuBnB,eAAeA,aAAa;AAAC,IAAAN,EAAA,EAAAG,GAAA,EAAA0B,GAAA;AAAAC,YAAA,CAAA9B,EAAA;AAAA8B,YAAA,CAAA3B,GAAA;AAAA2B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}