{"ast":null,"code":"// contexts/NotificationContext.jsx\nimport React,{createContext,useContext,useState,useEffect,useCallback}from'react';import api from'../services/api';import{useAuth}from'./AuthContext';import{initSocket}from'../services/socket';import{debounce}from'lodash';import{initNotifications}from'../utils/notifications';import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext();export const NotificationProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);const[unreadCount,setUnreadCount]=useState(0);const[loading,setLoading]=useState(true);const{user}=useAuth();const[socket,setSocket]=useState(null);// Debounced version of setNotifications to prevent rapid updates\nconst setNotificationsDirectly=useCallback(newNotifications=>{setNotifications(newNotifications);},[]);// Carrega notificações iniciais\nconst loadNotifications=useCallback(async()=>{try{var _response$data;setLoading(true);const response=await api.get('/notifications',{params:{limit:20,skip:0,sort:'-createdAt'}});// Verifica a estrutura dos dados e atualiza o estado\nconst notificationsData=Array.isArray((_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.data)?response.data.data:[];setNotificationsDirectly(notificationsData);}catch(error){console.error('Failed to load notifications:',error);setNotificationsDirectly([]);}finally{setLoading(false);}},[setNotificationsDirectly]);// Carrega contagem de não lidas\nconst loadUnreadCount=useCallback(async()=>{if(!user)return;try{const response=await api.get('/notifications/unread-count');setUnreadCount(response.data.count||0);}catch(error){console.error('Failed to load unread count:',error);setUnreadCount(0);}},[user]);// Marca notificações como lidas\nconst markAsRead=useCallback(async notificationIds=>{if(!notificationIds||notificationIds.length===0)return;try{await api.post('/notifications/mark-read',{notificationIds});setUnreadCount(prev=>Math.max(0,prev-notificationIds.length));setNotifications(prev=>prev.map(n=>notificationIds.includes(n._id)?{...n,read:true}:n));}catch(error){console.error('Failed to mark as read:',error);}},[]);// Limpa todas as notificações\nconst clearAllNotifications=useCallback(async()=>{try{await api.delete('/notifications');setNotifications([]);setUnreadCount(0);return true;}catch(error){console.error('Failed to clear notifications:',error);return false;}},[]);// Função para mostrar alerta de notificação\nconst showNotificationAlert=useCallback(notification=>{if('Notification'in window&&Notification.permission==='granted'){var _notification$sender,_notification$sender$;const title=getNotificationTitle(notification);const options={body:getNotificationBody(notification),icon:((_notification$sender=notification.sender)===null||_notification$sender===void 0?void 0:(_notification$sender$=_notification$sender.profile)===null||_notification$sender$===void 0?void 0:_notification$sender$.avatar)||'/logo192.png',badge:'/logo192.png'};// Fecha notificações anteriores para evitar acúmulo\nif(window.lastNotification){window.lastNotification.close();}window.lastNotification=new Notification(title,options);// Configura ação ao clicar na notificação\nwindow.lastNotification.onclick=()=>{window.focus();if(notification.meme){window.location.href=`/memes/${notification.meme._id}`;}else if(notification.comment){window.location.href=`/comments/${notification.comment._id}`;}else if(notification.reply){window.location.href=`/replies/${notification.reply._id}`;}};}},[]);// Handler para novas notificações via WebSocket\nconst handleNewNotification=useCallback(notification=>{console.log('Nova notificação recebida (antes do estado):',notification);setNotifications(prev=>{const newNotifications=[notification,...prev].slice(0,100);console.log('Notificações após atualização:',newNotifications);return newNotifications;});setUnreadCount(prev=>prev+1);if(document.visibilityState!=='visible'){showNotificationAlert(notification);}},[showNotificationAlert]);// Configura WebSocket e carrega dados iniciais\nuseEffect(()=>{if(!user){setNotifications([]);setUnreadCount(0);if(socket){socket.disconnect();setSocket(null);}return;}// Inicializa notificações nativas\nconst initializeNotifications=async()=>{if(Capacitor.isNativePlatform()){try{await initNotifications();}catch(error){console.error('Notification initialization error:',error);}}else if('Notification'in window&&Notification.permission!=='denied'){Notification.requestPermission().catch(console.error);}};initializeNotifications();// Configuração do WebSocket\nconst setupSocket=()=>{const token=localStorage.getItem('token');if(!token)return null;const newSocket=initSocket(token);// Evento de conexão estabelecida\nnewSocket.on('connect',()=>{console.log('WebSocket connected');// Autentica o socket após conexão\nnewSocket.emit('authenticate',token);});// Evento de erro de conexão\nnewSocket.on('connect_error',err=>{console.error('WebSocket connection error:',err.message);// Tentativa de reconexão após um delay\nsetTimeout(()=>{console.log('Attempting to reconnect WebSocket...');newSocket.connect();},5000);// 5 segundos\n});// Evento de desconexão\nnewSocket.on('disconnect',reason=>{console.log('WebSocket disconnected:',reason);// Reconecta apenas se não foi uma desconexão intencional\nif(reason!=='io client disconnect'){setTimeout(()=>{console.log('Reconnecting after disconnect...');newSocket.connect();},3000);// 3 segundos\n}});// Evento de reconexão falha\nnewSocket.on('reconnect_failed',()=>{console.error('WebSocket reconnection failed');});// Evento de nova notificação\nnewSocket.on('new-notification',handleNewNotification);// Evento de notificações marcadas como lidas\nnewSocket.on('notifications-read',readIds=>{setNotifications(prev=>prev.map(n=>readIds.includes(n._id)?{...n,read:true}:n));});return newSocket;};const socketInstance=setupSocket();setSocket(socketInstance);// Carrega dados iniciais com tratamento de erro\nconst loadInitialData=async()=>{try{setLoading(true);await Promise.all([loadNotifications(),loadUnreadCount()]);}catch(error){console.error('Error loading initial data:',error);}finally{setLoading(false);}};loadInitialData();// Verifica periodicamente a conexão (opcional)\nconst connectionCheckInterval=setInterval(()=>{if(socketInstance&&!socketInstance.connected){console.log('WebSocket not connected, attempting to reconnect...');socketInstance.connect();}},30000);// A cada 30 segundos\n// Cleanup\nreturn()=>{clearInterval(connectionCheckInterval);if(socketInstance){socketInstance.off('connect');socketInstance.off('connect_error');socketInstance.off('disconnect');socketInstance.off('reconnect_failed');socketInstance.off('new-notification');socketInstance.off('notifications-read');socketInstance.disconnect();}};},[user,handleNewNotification,loadNotifications,loadUnreadCount]);// Funções auxiliares para texto de notificação\nconst getNotificationTitle=notification=>{var _notification$sender2,_notification$metadat,_notification$sender3,_notification$metadat2,_notification$sender4,_notification$sender5;switch(notification.type){case'like':return`${((_notification$sender2=notification.sender)===null||_notification$sender2===void 0?void 0:_notification$sender2.username)||'Alguém'} curtiu seu meme`;case'like_grouped':return`Seu meme tem ${((_notification$metadat=notification.metadata)===null||_notification$metadat===void 0?void 0:_notification$metadat.count)||'muitas'} curtidas`;case'comment':return`${((_notification$sender3=notification.sender)===null||_notification$sender3===void 0?void 0:_notification$sender3.username)||'Alguém'} comentou no seu meme`;case'comment_grouped':return`Seu meme tem ${((_notification$metadat2=notification.metadata)===null||_notification$metadat2===void 0?void 0:_notification$metadat2.count)||'muitos'} comentários`;case'reply':return`${((_notification$sender4=notification.sender)===null||_notification$sender4===void 0?void 0:_notification$sender4.username)||'Alguém'} respondeu seu comentário`;case'mention':return`${((_notification$sender5=notification.sender)===null||_notification$sender5===void 0?void 0:_notification$sender5.username)||'Alguém'} te mencionou`;default:return'Nova notificação';}};const getNotificationBody=notification=>{var _notification$meme,_notification$meme2,_notification$reply,_notification$comment;switch(notification.type){case'like':case'comment':return(_notification$meme=notification.meme)!==null&&_notification$meme!==void 0&&_notification$meme.caption?truncate(notification.meme.caption,50):'Veja agora';case'like_grouped':case'comment_grouped':return(_notification$meme2=notification.meme)!==null&&_notification$meme2!==void 0&&_notification$meme2.caption?truncate(notification.meme.caption,50):'Veja todas as interações';case'reply':return(_notification$reply=notification.reply)!==null&&_notification$reply!==void 0&&_notification$reply.text?truncate(notification.reply.text,50):'Veja a resposta';case'mention':return(_notification$comment=notification.comment)!==null&&_notification$comment!==void 0&&_notification$comment.text?truncate(notification.comment.text,50):'Veja a menção';default:return'';}};const truncate=(str,n)=>{return(str===null||str===void 0?void 0:str.length)>n?str.substr(0,n-1)+'...':str;};return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:{notifications,unreadCount,loading,markAsRead,clearAllNotifications,loadNotifications,loadUnreadCount},children:children});};export const useNotifications=()=>{const context=useContext(NotificationContext);if(!context){throw new Error('useNotifications must be used within a NotificationProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","api","useAuth","initSocket","debounce","initNotifications","jsx","_jsx","NotificationContext","NotificationProvider","_ref","children","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","user","socket","setSocket","setNotificationsDirectly","newNotifications","loadNotifications","_response$data","response","get","params","limit","skip","sort","notificationsData","Array","isArray","data","error","console","loadUnreadCount","count","markAsRead","notificationIds","length","post","prev","Math","max","map","n","includes","_id","read","clearAllNotifications","delete","showNotificationAlert","notification","window","Notification","permission","_notification$sender","_notification$sender$","title","getNotificationTitle","options","body","getNotificationBody","icon","sender","profile","avatar","badge","lastNotification","close","onclick","focus","meme","location","href","comment","reply","handleNewNotification","log","slice","document","visibilityState","disconnect","initializeNotifications","Capacitor","isNativePlatform","requestPermission","catch","setupSocket","token","localStorage","getItem","newSocket","on","emit","err","message","setTimeout","connect","reason","readIds","socketInstance","loadInitialData","Promise","all","connectionCheckInterval","setInterval","connected","clearInterval","off","_notification$sender2","_notification$metadat","_notification$sender3","_notification$metadat2","_notification$sender4","_notification$sender5","type","username","metadata","_notification$meme","_notification$meme2","_notification$reply","_notification$comment","caption","truncate","text","str","substr","Provider","value","useNotifications","context","Error"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/jokersta_apk/src/contexts/NotificationContext.jsx"],"sourcesContent":["// contexts/NotificationContext.jsx\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport api from '../services/api';\r\nimport { useAuth } from './AuthContext';\r\nimport { initSocket } from '../services/socket';\r\nimport { debounce } from 'lodash';\r\nimport { initNotifications } from '../utils/notifications';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const { user } = useAuth();\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  // Debounced version of setNotifications to prevent rapid updates\r\n  const setNotificationsDirectly = useCallback((newNotifications) => {\r\n    setNotifications(newNotifications);\r\n  }, []);\r\n\r\n  // Carrega notificações iniciais\r\n  const loadNotifications = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('/notifications', {\r\n        params: { limit: 20, skip: 0, sort: '-createdAt' }\r\n      });\r\n      \r\n      // Verifica a estrutura dos dados e atualiza o estado\r\n      const notificationsData = Array.isArray(response.data?.data) \r\n        ? response.data.data \r\n        : [];\r\n      \r\n      setNotificationsDirectly(notificationsData);\r\n    } catch (error) {\r\n      console.error('Failed to load notifications:', error);\r\n      setNotificationsDirectly([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [setNotificationsDirectly]);\r\n\r\n  // Carrega contagem de não lidas\r\n  const loadUnreadCount = useCallback(async () => {\r\n    if (!user) return;\r\n    try {\r\n      const response = await api.get('/notifications/unread-count');\r\n      setUnreadCount(response.data.count || 0);\r\n    } catch (error) {\r\n      console.error('Failed to load unread count:', error);\r\n      setUnreadCount(0);\r\n    }\r\n  }, [user]);\r\n\r\n  // Marca notificações como lidas\r\n  const markAsRead = useCallback(async (notificationIds) => {\r\n    if (!notificationIds || notificationIds.length === 0) return;\r\n    try {\r\n      await api.post('/notifications/mark-read', { notificationIds });\r\n      setUnreadCount(prev => Math.max(0, prev - notificationIds.length));\r\n      setNotifications(prev => \r\n        prev.map(n => \r\n          notificationIds.includes(n._id) ? { ...n, read: true } : n\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to mark as read:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Limpa todas as notificações\r\n  const clearAllNotifications = useCallback(async () => {\r\n    try {\r\n      await api.delete('/notifications');\r\n      setNotifications([]);\r\n      setUnreadCount(0);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to clear notifications:', error);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Função para mostrar alerta de notificação\r\n  const showNotificationAlert = useCallback((notification) => {\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const title = getNotificationTitle(notification);\r\n      const options = {\r\n        body: getNotificationBody(notification),\r\n        icon: notification.sender?.profile?.avatar || '/logo192.png',\r\n        badge: '/logo192.png'\r\n      };\r\n      \r\n      // Fecha notificações anteriores para evitar acúmulo\r\n      if (window.lastNotification) {\r\n        window.lastNotification.close();\r\n      }\r\n      \r\n      window.lastNotification = new Notification(title, options);\r\n      \r\n      // Configura ação ao clicar na notificação\r\n      window.lastNotification.onclick = () => {\r\n        window.focus();\r\n        if (notification.meme) {\r\n          window.location.href = `/memes/${notification.meme._id}`;\r\n        } else if (notification.comment) {\r\n          window.location.href = `/comments/${notification.comment._id}`;\r\n        } else if (notification.reply) {\r\n          window.location.href = `/replies/${notification.reply._id}`;\r\n        }\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // Handler para novas notificações via WebSocket\r\nconst handleNewNotification = useCallback((notification) => {\r\n  console.log('Nova notificação recebida (antes do estado):', notification);\r\n  \r\n  setNotifications(prev => {\r\n    const newNotifications = [notification, ...prev].slice(0, 100);\r\n    console.log('Notificações após atualização:', newNotifications);\r\n    return newNotifications;\r\n  });\r\n  \r\n  setUnreadCount(prev => prev + 1);\r\n  \r\n  if (document.visibilityState !== 'visible') {\r\n    showNotificationAlert(notification);\r\n  }\r\n}, [showNotificationAlert]);\r\n// Configura WebSocket e carrega dados iniciais\r\nuseEffect(() => {\r\n  if (!user) {\r\n    setNotifications([]);\r\n    setUnreadCount(0);\r\n    if (socket) {\r\n      socket.disconnect();\r\n      setSocket(null);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Inicializa notificações nativas\r\n  const initializeNotifications = async () => {\r\n    if (Capacitor.isNativePlatform()) {\r\n      try {\r\n        await initNotifications();\r\n      } catch (error) {\r\n        console.error('Notification initialization error:', error);\r\n      }\r\n    } else if ('Notification' in window && Notification.permission !== 'denied') {\r\n      Notification.requestPermission().catch(console.error);\r\n    }\r\n  };\r\n  initializeNotifications();\r\n\r\n  // Configuração do WebSocket\r\n  const setupSocket = () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return null;\r\n\r\n    const newSocket = initSocket(token);\r\n    \r\n    // Evento de conexão estabelecida\r\n    newSocket.on('connect', () => {\r\n      console.log('WebSocket connected');\r\n      // Autentica o socket após conexão\r\n      newSocket.emit('authenticate', token);\r\n    });\r\n\r\n    // Evento de erro de conexão\r\n    newSocket.on('connect_error', (err) => {\r\n      console.error('WebSocket connection error:', err.message);\r\n      \r\n      // Tentativa de reconexão após um delay\r\n      setTimeout(() => {\r\n        console.log('Attempting to reconnect WebSocket...');\r\n        newSocket.connect();\r\n      }, 5000); // 5 segundos\r\n    });\r\n\r\n    // Evento de desconexão\r\n    newSocket.on('disconnect', (reason) => {\r\n      console.log('WebSocket disconnected:', reason);\r\n      \r\n      // Reconecta apenas se não foi uma desconexão intencional\r\n      if (reason !== 'io client disconnect') {\r\n        setTimeout(() => {\r\n          console.log('Reconnecting after disconnect...');\r\n          newSocket.connect();\r\n        }, 3000); // 3 segundos\r\n      }\r\n    });\r\n\r\n    // Evento de reconexão falha\r\n    newSocket.on('reconnect_failed', () => {\r\n      console.error('WebSocket reconnection failed');\r\n    });\r\n\r\n    // Evento de nova notificação\r\n    newSocket.on('new-notification', handleNewNotification);\r\n\r\n    // Evento de notificações marcadas como lidas\r\n    newSocket.on('notifications-read', (readIds) => {\r\n      setNotifications(prev => \r\n        prev.map(n => \r\n          readIds.includes(n._id) ? { ...n, read: true } : n\r\n        )\r\n      );\r\n    });\r\n\r\n    return newSocket;\r\n  };\r\n\r\n  const socketInstance = setupSocket();\r\n  setSocket(socketInstance);\r\n\r\n  // Carrega dados iniciais com tratamento de erro\r\n  const loadInitialData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await Promise.all([\r\n        loadNotifications(),\r\n        loadUnreadCount()\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error loading initial data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  loadInitialData();\r\n\r\n  // Verifica periodicamente a conexão (opcional)\r\n  const connectionCheckInterval = setInterval(() => {\r\n    if (socketInstance && !socketInstance.connected) {\r\n      console.log('WebSocket not connected, attempting to reconnect...');\r\n      socketInstance.connect();\r\n    }\r\n  }, 30000); // A cada 30 segundos\r\n\r\n  // Cleanup\r\n  return () => {\r\n    clearInterval(connectionCheckInterval);\r\n    if (socketInstance) {\r\n      socketInstance.off('connect');\r\n      socketInstance.off('connect_error');\r\n      socketInstance.off('disconnect');\r\n      socketInstance.off('reconnect_failed');\r\n      socketInstance.off('new-notification');\r\n      socketInstance.off('notifications-read');\r\n      socketInstance.disconnect();\r\n    }\r\n  };\r\n}, [user, handleNewNotification, loadNotifications, loadUnreadCount]);\r\n\r\n  // Funções auxiliares para texto de notificação\r\n  const getNotificationTitle = (notification) => {\r\n    switch(notification.type) {\r\n      case 'like':\r\n        return `${notification.sender?.username || 'Alguém'} curtiu seu meme`;\r\n      case 'like_grouped':\r\n        return `Seu meme tem ${notification.metadata?.count || 'muitas'} curtidas`;\r\n      case 'comment':\r\n        return `${notification.sender?.username || 'Alguém'} comentou no seu meme`;\r\n      case 'comment_grouped':\r\n        return `Seu meme tem ${notification.metadata?.count || 'muitos'} comentários`;\r\n      case 'reply':\r\n        return `${notification.sender?.username || 'Alguém'} respondeu seu comentário`;\r\n      case 'mention':\r\n        return `${notification.sender?.username || 'Alguém'} te mencionou`;\r\n      default:\r\n        return 'Nova notificação';\r\n    }\r\n  };\r\n  \r\n  const getNotificationBody = (notification) => {\r\n    switch(notification.type) {\r\n      case 'like':\r\n      case 'comment':\r\n        return notification.meme?.caption \r\n          ? truncate(notification.meme.caption, 50) \r\n          : 'Veja agora';\r\n      case 'like_grouped':\r\n      case 'comment_grouped':\r\n        return notification.meme?.caption \r\n          ? truncate(notification.meme.caption, 50) \r\n          : 'Veja todas as interações';\r\n      case 'reply':\r\n        return notification.reply?.text \r\n          ? truncate(notification.reply.text, 50) \r\n          : 'Veja a resposta';\r\n      case 'mention':\r\n        return notification.comment?.text \r\n          ? truncate(notification.comment.text, 50) \r\n          : 'Veja a menção';\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n\r\n  const truncate = (str, n) => {\r\n    return str?.length > n ? str.substr(0, n-1) + '...' : str;\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider\r\n      value={{\r\n        notifications,\r\n        unreadCount,\r\n        loading,\r\n        markAsRead,\r\n        clearAllNotifications,\r\n        loadNotifications,\r\n        loadUnreadCount\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAC1F,MAAO,CAAAC,GAAG,KAAM,iBAAiB,CACjC,OAASC,OAAO,KAAQ,eAAe,CACvC,OAASC,UAAU,KAAQ,oBAAoB,CAC/C,OAASC,QAAQ,KAAQ,QAAQ,CACjC,OAASC,iBAAiB,KAAQ,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE3D,KAAM,CAAAC,mBAAmB,cAAGZ,aAAa,CAAC,CAAC,CAE3C,MAAO,MAAM,CAAAa,oBAAoB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC/C,KAAM,CAACE,aAAa,CAAEC,gBAAgB,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACgB,WAAW,CAAEC,cAAc,CAAC,CAAGjB,QAAQ,CAAC,CAAC,CAAC,CACjD,KAAM,CAACkB,OAAO,CAAEC,UAAU,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAAEoB,IAAK,CAAC,CAAGhB,OAAO,CAAC,CAAC,CAC1B,KAAM,CAACiB,MAAM,CAAEC,SAAS,CAAC,CAAGtB,QAAQ,CAAC,IAAI,CAAC,CAE1C;AACA,KAAM,CAAAuB,wBAAwB,CAAGrB,WAAW,CAAEsB,gBAAgB,EAAK,CACjET,gBAAgB,CAACS,gBAAgB,CAAC,CACpC,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAC,iBAAiB,CAAGvB,WAAW,CAAC,SAAY,CAChD,GAAI,KAAAwB,cAAA,CACFP,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAxB,GAAG,CAACyB,GAAG,CAAC,gBAAgB,CAAE,CAC/CC,MAAM,CAAE,CAAEC,KAAK,CAAE,EAAE,CAAEC,IAAI,CAAE,CAAC,CAAEC,IAAI,CAAE,YAAa,CACnD,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,iBAAiB,CAAGC,KAAK,CAACC,OAAO,EAAAT,cAAA,CAACC,QAAQ,CAACS,IAAI,UAAAV,cAAA,iBAAbA,cAAA,CAAeU,IAAI,CAAC,CACxDT,QAAQ,CAACS,IAAI,CAACA,IAAI,CAClB,EAAE,CAENb,wBAAwB,CAACU,iBAAiB,CAAC,CAC7C,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrDd,wBAAwB,CAAC,EAAE,CAAC,CAC9B,CAAC,OAAS,CACRJ,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,CAACI,wBAAwB,CAAC,CAAC,CAE9B;AACA,KAAM,CAAAgB,eAAe,CAAGrC,WAAW,CAAC,SAAY,CAC9C,GAAI,CAACkB,IAAI,CAAE,OACX,GAAI,CACF,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAxB,GAAG,CAACyB,GAAG,CAAC,6BAA6B,CAAC,CAC7DX,cAAc,CAACU,QAAQ,CAACS,IAAI,CAACI,KAAK,EAAI,CAAC,CAAC,CAC1C,CAAE,MAAOH,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDpB,cAAc,CAAC,CAAC,CAAC,CACnB,CACF,CAAC,CAAE,CAACG,IAAI,CAAC,CAAC,CAEV;AACA,KAAM,CAAAqB,UAAU,CAAGvC,WAAW,CAAC,KAAO,CAAAwC,eAAe,EAAK,CACxD,GAAI,CAACA,eAAe,EAAIA,eAAe,CAACC,MAAM,GAAK,CAAC,CAAE,OACtD,GAAI,CACF,KAAM,CAAAxC,GAAG,CAACyC,IAAI,CAAC,0BAA0B,CAAE,CAAEF,eAAgB,CAAC,CAAC,CAC/DzB,cAAc,CAAC4B,IAAI,EAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEF,IAAI,CAAGH,eAAe,CAACC,MAAM,CAAC,CAAC,CAClE5B,gBAAgB,CAAC8B,IAAI,EACnBA,IAAI,CAACG,GAAG,CAACC,CAAC,EACRP,eAAe,CAACQ,QAAQ,CAACD,CAAC,CAACE,GAAG,CAAC,CAAG,CAAE,GAAGF,CAAC,CAAEG,IAAI,CAAE,IAAK,CAAC,CAAGH,CAC3D,CACF,CAAC,CACH,CAAE,MAAOZ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACjD,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAgB,qBAAqB,CAAGnD,WAAW,CAAC,SAAY,CACpD,GAAI,CACF,KAAM,CAAAC,GAAG,CAACmD,MAAM,CAAC,gBAAgB,CAAC,CAClCvC,gBAAgB,CAAC,EAAE,CAAC,CACpBE,cAAc,CAAC,CAAC,CAAC,CACjB,MAAO,KAAI,CACb,CAAE,MAAOoB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,MAAK,CACd,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAkB,qBAAqB,CAAGrD,WAAW,CAAEsD,YAAY,EAAK,CAC1D,GAAI,cAAc,EAAI,CAAAC,MAAM,EAAIC,YAAY,CAACC,UAAU,GAAK,SAAS,CAAE,KAAAC,oBAAA,CAAAC,qBAAA,CACrE,KAAM,CAAAC,KAAK,CAAGC,oBAAoB,CAACP,YAAY,CAAC,CAChD,KAAM,CAAAQ,OAAO,CAAG,CACdC,IAAI,CAAEC,mBAAmB,CAACV,YAAY,CAAC,CACvCW,IAAI,CAAE,EAAAP,oBAAA,CAAAJ,YAAY,CAACY,MAAM,UAAAR,oBAAA,kBAAAC,qBAAA,CAAnBD,oBAAA,CAAqBS,OAAO,UAAAR,qBAAA,iBAA5BA,qBAAA,CAA8BS,MAAM,GAAI,cAAc,CAC5DC,KAAK,CAAE,cACT,CAAC,CAED;AACA,GAAId,MAAM,CAACe,gBAAgB,CAAE,CAC3Bf,MAAM,CAACe,gBAAgB,CAACC,KAAK,CAAC,CAAC,CACjC,CAEAhB,MAAM,CAACe,gBAAgB,CAAG,GAAI,CAAAd,YAAY,CAACI,KAAK,CAAEE,OAAO,CAAC,CAE1D;AACAP,MAAM,CAACe,gBAAgB,CAACE,OAAO,CAAG,IAAM,CACtCjB,MAAM,CAACkB,KAAK,CAAC,CAAC,CACd,GAAInB,YAAY,CAACoB,IAAI,CAAE,CACrBnB,MAAM,CAACoB,QAAQ,CAACC,IAAI,CAAG,UAAUtB,YAAY,CAACoB,IAAI,CAACzB,GAAG,EAAE,CAC1D,CAAC,IAAM,IAAIK,YAAY,CAACuB,OAAO,CAAE,CAC/BtB,MAAM,CAACoB,QAAQ,CAACC,IAAI,CAAG,aAAatB,YAAY,CAACuB,OAAO,CAAC5B,GAAG,EAAE,CAChE,CAAC,IAAM,IAAIK,YAAY,CAACwB,KAAK,CAAE,CAC7BvB,MAAM,CAACoB,QAAQ,CAACC,IAAI,CAAG,YAAYtB,YAAY,CAACwB,KAAK,CAAC7B,GAAG,EAAE,CAC7D,CACF,CAAC,CACH,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACF,KAAM,CAAA8B,qBAAqB,CAAG/E,WAAW,CAAEsD,YAAY,EAAK,CAC1DlB,OAAO,CAAC4C,GAAG,CAAC,8CAA8C,CAAE1B,YAAY,CAAC,CAEzEzC,gBAAgB,CAAC8B,IAAI,EAAI,CACvB,KAAM,CAAArB,gBAAgB,CAAG,CAACgC,YAAY,CAAE,GAAGX,IAAI,CAAC,CAACsC,KAAK,CAAC,CAAC,CAAE,GAAG,CAAC,CAC9D7C,OAAO,CAAC4C,GAAG,CAAC,gCAAgC,CAAE1D,gBAAgB,CAAC,CAC/D,MAAO,CAAAA,gBAAgB,CACzB,CAAC,CAAC,CAEFP,cAAc,CAAC4B,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAEhC,GAAIuC,QAAQ,CAACC,eAAe,GAAK,SAAS,CAAE,CAC1C9B,qBAAqB,CAACC,YAAY,CAAC,CACrC,CACF,CAAC,CAAE,CAACD,qBAAqB,CAAC,CAAC,CAC3B;AACAtD,SAAS,CAAC,IAAM,CACd,GAAI,CAACmB,IAAI,CAAE,CACTL,gBAAgB,CAAC,EAAE,CAAC,CACpBE,cAAc,CAAC,CAAC,CAAC,CACjB,GAAII,MAAM,CAAE,CACVA,MAAM,CAACiE,UAAU,CAAC,CAAC,CACnBhE,SAAS,CAAC,IAAI,CAAC,CACjB,CACA,OACF,CAEA;AACA,KAAM,CAAAiE,uBAAuB,CAAG,KAAAA,CAAA,GAAY,CAC1C,GAAIC,SAAS,CAACC,gBAAgB,CAAC,CAAC,CAAE,CAChC,GAAI,CACF,KAAM,CAAAlF,iBAAiB,CAAC,CAAC,CAC3B,CAAE,MAAO8B,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC5D,CACF,CAAC,IAAM,IAAI,cAAc,EAAI,CAAAoB,MAAM,EAAIC,YAAY,CAACC,UAAU,GAAK,QAAQ,CAAE,CAC3ED,YAAY,CAACgC,iBAAiB,CAAC,CAAC,CAACC,KAAK,CAACrD,OAAO,CAACD,KAAK,CAAC,CACvD,CACF,CAAC,CACDkD,uBAAuB,CAAC,CAAC,CAEzB;AACA,KAAM,CAAAK,WAAW,CAAGA,CAAA,GAAM,CACxB,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAI,CAACF,KAAK,CAAE,MAAO,KAAI,CAEvB,KAAM,CAAAG,SAAS,CAAG3F,UAAU,CAACwF,KAAK,CAAC,CAEnC;AACAG,SAAS,CAACC,EAAE,CAAC,SAAS,CAAE,IAAM,CAC5B3D,OAAO,CAAC4C,GAAG,CAAC,qBAAqB,CAAC,CAClC;AACAc,SAAS,CAACE,IAAI,CAAC,cAAc,CAAEL,KAAK,CAAC,CACvC,CAAC,CAAC,CAEF;AACAG,SAAS,CAACC,EAAE,CAAC,eAAe,CAAGE,GAAG,EAAK,CACrC7D,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAE8D,GAAG,CAACC,OAAO,CAAC,CAEzD;AACAC,UAAU,CAAC,IAAM,CACf/D,OAAO,CAAC4C,GAAG,CAAC,sCAAsC,CAAC,CACnDc,SAAS,CAACM,OAAO,CAAC,CAAC,CACrB,CAAC,CAAE,IAAI,CAAC,CAAE;AACZ,CAAC,CAAC,CAEF;AACAN,SAAS,CAACC,EAAE,CAAC,YAAY,CAAGM,MAAM,EAAK,CACrCjE,OAAO,CAAC4C,GAAG,CAAC,yBAAyB,CAAEqB,MAAM,CAAC,CAE9C;AACA,GAAIA,MAAM,GAAK,sBAAsB,CAAE,CACrCF,UAAU,CAAC,IAAM,CACf/D,OAAO,CAAC4C,GAAG,CAAC,kCAAkC,CAAC,CAC/Cc,SAAS,CAACM,OAAO,CAAC,CAAC,CACrB,CAAC,CAAE,IAAI,CAAC,CAAE;AACZ,CACF,CAAC,CAAC,CAEF;AACAN,SAAS,CAACC,EAAE,CAAC,kBAAkB,CAAE,IAAM,CACrC3D,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAC,CAChD,CAAC,CAAC,CAEF;AACA2D,SAAS,CAACC,EAAE,CAAC,kBAAkB,CAAEhB,qBAAqB,CAAC,CAEvD;AACAe,SAAS,CAACC,EAAE,CAAC,oBAAoB,CAAGO,OAAO,EAAK,CAC9CzF,gBAAgB,CAAC8B,IAAI,EACnBA,IAAI,CAACG,GAAG,CAACC,CAAC,EACRuD,OAAO,CAACtD,QAAQ,CAACD,CAAC,CAACE,GAAG,CAAC,CAAG,CAAE,GAAGF,CAAC,CAAEG,IAAI,CAAE,IAAK,CAAC,CAAGH,CACnD,CACF,CAAC,CACH,CAAC,CAAC,CAEF,MAAO,CAAA+C,SAAS,CAClB,CAAC,CAED,KAAM,CAAAS,cAAc,CAAGb,WAAW,CAAC,CAAC,CACpCtE,SAAS,CAACmF,cAAc,CAAC,CAEzB;AACA,KAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACFvF,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAAwF,OAAO,CAACC,GAAG,CAAC,CAChBnF,iBAAiB,CAAC,CAAC,CACnBc,eAAe,CAAC,CAAC,CAClB,CAAC,CACJ,CAAE,MAAOF,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CAAC,OAAS,CACRlB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDuF,eAAe,CAAC,CAAC,CAEjB;AACA,KAAM,CAAAG,uBAAuB,CAAGC,WAAW,CAAC,IAAM,CAChD,GAAIL,cAAc,EAAI,CAACA,cAAc,CAACM,SAAS,CAAE,CAC/CzE,OAAO,CAAC4C,GAAG,CAAC,qDAAqD,CAAC,CAClEuB,cAAc,CAACH,OAAO,CAAC,CAAC,CAC1B,CACF,CAAC,CAAE,KAAK,CAAC,CAAE;AAEX;AACA,MAAO,IAAM,CACXU,aAAa,CAACH,uBAAuB,CAAC,CACtC,GAAIJ,cAAc,CAAE,CAClBA,cAAc,CAACQ,GAAG,CAAC,SAAS,CAAC,CAC7BR,cAAc,CAACQ,GAAG,CAAC,eAAe,CAAC,CACnCR,cAAc,CAACQ,GAAG,CAAC,YAAY,CAAC,CAChCR,cAAc,CAACQ,GAAG,CAAC,kBAAkB,CAAC,CACtCR,cAAc,CAACQ,GAAG,CAAC,kBAAkB,CAAC,CACtCR,cAAc,CAACQ,GAAG,CAAC,oBAAoB,CAAC,CACxCR,cAAc,CAACnB,UAAU,CAAC,CAAC,CAC7B,CACF,CAAC,CACH,CAAC,CAAE,CAAClE,IAAI,CAAE6D,qBAAqB,CAAExD,iBAAiB,CAAEc,eAAe,CAAC,CAAC,CAEnE;AACA,KAAM,CAAAwB,oBAAoB,CAAIP,YAAY,EAAK,KAAA0D,qBAAA,CAAAC,qBAAA,CAAAC,qBAAA,CAAAC,sBAAA,CAAAC,qBAAA,CAAAC,qBAAA,CAC7C,OAAO/D,YAAY,CAACgE,IAAI,EACtB,IAAK,MAAM,CACT,MAAO,GAAG,EAAAN,qBAAA,CAAA1D,YAAY,CAACY,MAAM,UAAA8C,qBAAA,iBAAnBA,qBAAA,CAAqBO,QAAQ,GAAI,QAAQ,kBAAkB,CACvE,IAAK,cAAc,CACjB,MAAO,gBAAgB,EAAAN,qBAAA,CAAA3D,YAAY,CAACkE,QAAQ,UAAAP,qBAAA,iBAArBA,qBAAA,CAAuB3E,KAAK,GAAI,QAAQ,WAAW,CAC5E,IAAK,SAAS,CACZ,MAAO,GAAG,EAAA4E,qBAAA,CAAA5D,YAAY,CAACY,MAAM,UAAAgD,qBAAA,iBAAnBA,qBAAA,CAAqBK,QAAQ,GAAI,QAAQ,uBAAuB,CAC5E,IAAK,iBAAiB,CACpB,MAAO,gBAAgB,EAAAJ,sBAAA,CAAA7D,YAAY,CAACkE,QAAQ,UAAAL,sBAAA,iBAArBA,sBAAA,CAAuB7E,KAAK,GAAI,QAAQ,cAAc,CAC/E,IAAK,OAAO,CACV,MAAO,GAAG,EAAA8E,qBAAA,CAAA9D,YAAY,CAACY,MAAM,UAAAkD,qBAAA,iBAAnBA,qBAAA,CAAqBG,QAAQ,GAAI,QAAQ,2BAA2B,CAChF,IAAK,SAAS,CACZ,MAAO,GAAG,EAAAF,qBAAA,CAAA/D,YAAY,CAACY,MAAM,UAAAmD,qBAAA,iBAAnBA,qBAAA,CAAqBE,QAAQ,GAAI,QAAQ,eAAe,CACpE,QACE,MAAO,kBAAkB,CAC7B,CACF,CAAC,CAED,KAAM,CAAAvD,mBAAmB,CAAIV,YAAY,EAAK,KAAAmE,kBAAA,CAAAC,mBAAA,CAAAC,mBAAA,CAAAC,qBAAA,CAC5C,OAAOtE,YAAY,CAACgE,IAAI,EACtB,IAAK,MAAM,CACX,IAAK,SAAS,CACZ,MAAO,CAAAG,kBAAA,CAAAnE,YAAY,CAACoB,IAAI,UAAA+C,kBAAA,WAAjBA,kBAAA,CAAmBI,OAAO,CAC7BC,QAAQ,CAACxE,YAAY,CAACoB,IAAI,CAACmD,OAAO,CAAE,EAAE,CAAC,CACvC,YAAY,CAClB,IAAK,cAAc,CACnB,IAAK,iBAAiB,CACpB,MAAO,CAAAH,mBAAA,CAAApE,YAAY,CAACoB,IAAI,UAAAgD,mBAAA,WAAjBA,mBAAA,CAAmBG,OAAO,CAC7BC,QAAQ,CAACxE,YAAY,CAACoB,IAAI,CAACmD,OAAO,CAAE,EAAE,CAAC,CACvC,0BAA0B,CAChC,IAAK,OAAO,CACV,MAAO,CAAAF,mBAAA,CAAArE,YAAY,CAACwB,KAAK,UAAA6C,mBAAA,WAAlBA,mBAAA,CAAoBI,IAAI,CAC3BD,QAAQ,CAACxE,YAAY,CAACwB,KAAK,CAACiD,IAAI,CAAE,EAAE,CAAC,CACrC,iBAAiB,CACvB,IAAK,SAAS,CACZ,MAAO,CAAAH,qBAAA,CAAAtE,YAAY,CAACuB,OAAO,UAAA+C,qBAAA,WAApBA,qBAAA,CAAsBG,IAAI,CAC7BD,QAAQ,CAACxE,YAAY,CAACuB,OAAO,CAACkD,IAAI,CAAE,EAAE,CAAC,CACvC,eAAe,CACrB,QACE,MAAO,EAAE,CACb,CACF,CAAC,CAED,KAAM,CAAAD,QAAQ,CAAGA,CAACE,GAAG,CAAEjF,CAAC,GAAK,CAC3B,MAAO,CAAAiF,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAEvF,MAAM,EAAGM,CAAC,CAAGiF,GAAG,CAACC,MAAM,CAAC,CAAC,CAAElF,CAAC,CAAC,CAAC,CAAC,CAAG,KAAK,CAAGiF,GAAG,CAC3D,CAAC,CAED,mBACEzH,IAAA,CAACC,mBAAmB,CAAC0H,QAAQ,EAC3BC,KAAK,CAAE,CACLvH,aAAa,CACbE,WAAW,CACXE,OAAO,CACPuB,UAAU,CACVY,qBAAqB,CACrB5B,iBAAiB,CACjBc,eACF,CAAE,CAAA1B,QAAA,CAEDA,QAAQ,CACmB,CAAC,CAEnC,CAAC,CAED,MAAO,MAAM,CAAAyH,gBAAgB,CAAGA,CAAA,GAAM,CACpC,KAAM,CAAAC,OAAO,CAAGxI,UAAU,CAACW,mBAAmB,CAAC,CAC/C,GAAI,CAAC6H,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6DAA6D,CAAC,CAChF,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}