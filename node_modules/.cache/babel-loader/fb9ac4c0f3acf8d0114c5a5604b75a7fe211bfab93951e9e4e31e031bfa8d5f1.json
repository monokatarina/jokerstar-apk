{"ast":null,"code":"// src/services/auth.js\nimport api from './api';\n\n/**\n * Tipos de erros personalizados para autenticação\n */\nconst AuthErrorTypes = {\n  CONFLICT: 'CONFLICT',\n  // Quando há conflito (usuário/email já existe)\n  AUTH_ERROR: 'AUTH_ERROR',\n  // Erros de autenticação (credenciais inválidas)\n  SESSION_EXPIRED: 'SESSION_EXPIRED',\n  // Sessão expirada\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  // Problemas de conexão\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  // Erros de validação\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR' // Erros não identificados\n};\n\n/**\n * Registra um novo usuário\n * @param {Object} userData - Dados do usuário para registro\n * @returns {Promise<Object>} Dados do usuário registrado\n * @throws {Object} Erro personalizado\n */\nexport const register = async userData => {\n  var _error$response$data;\n  try {\n    const {\n      data\n    } = await api.post('/auth/register', userData);\n\n    // Armazena o token se vier na resposta\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n    }\n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Register Error:', error);\n\n    // Tratamento específico para cada tipo de erro\n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          throw {\n            type: AuthErrorTypes.VALIDATION_ERROR,\n            message: 'Dados inválidos',\n            details: error.response.data.errors\n          };\n        case 409:\n          throw {\n            type: AuthErrorTypes.CONFLICT,\n            message: error.response.data.message || 'Conflito no registro',\n            conflicts: error.response.data.conflicts\n          };\n        default:\n          throw {\n            type: AuthErrorTypes.UNKNOWN_ERROR,\n            message: ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Erro ao registrar usuário'\n          };\n      }\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao registrar'\n      };\n    }\n  }\n};\n\n/**\n * Realiza o login do usuário\n * @param {Object} credentials - Credenciais de login (email/username e senha)\n * @returns {Promise<Object>} Dados do usuário e token\n * @throws {Object} Erro personalizado\n */\nexport const login = async credentials => {\n  var _error$response$data2, _error$response$data3, _error$response$data4;\n  try {\n    const {\n      data\n    } = await api.post('/auth/login', credentials);\n\n    // Armazena o token\n    localStorage.setItem('token', data.token);\n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Login Error:', error);\n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          throw {\n            type: AuthErrorTypes.VALIDATION_ERROR,\n            message: 'Credenciais inválidas',\n            details: error.response.data.errors\n          };\n        case 401:\n          throw {\n            type: AuthErrorTypes.AUTH_ERROR,\n            message: ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Credenciais inválidas'\n          };\n        case 403:\n          throw {\n            type: AuthErrorTypes.AUTH_ERROR,\n            message: ((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.message) || 'Conta desativada ou bloqueada'\n          };\n        default:\n          throw {\n            type: AuthErrorTypes.UNKNOWN_ERROR,\n            message: ((_error$response$data4 = error.response.data) === null || _error$response$data4 === void 0 ? void 0 : _error$response$data4.message) || 'Erro ao fazer login'\n          };\n      }\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao fazer login'\n      };\n    }\n  }\n};\n\n/**\n * Verifica a autenticação do usuário\n * @returns {Promise<Object>} Dados do usuário autenticado\n * @throws {Object} Erro personalizado\n */\nexport const checkAuth = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw {\n        type: AuthErrorTypes.AUTH_ERROR,\n        message: 'Nenhum token encontrado'\n      };\n    }\n    const {\n      data\n    } = await api.get('/auth/check', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return data;\n  } catch (error) {\n    var _error$response;\n    console.error('[Auth Service] Check Auth Error:', error);\n\n    // Remove o token se for inválido\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n      localStorage.removeItem('token');\n      throw {\n        type: AuthErrorTypes.SESSION_EXPIRED,\n        message: 'Sessão expirada'\n      };\n    }\n    if (error.response) {\n      var _error$response$data5;\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: ((_error$response$data5 = error.response.data) === null || _error$response$data5 === void 0 ? void 0 : _error$response$data5.message) || 'Erro ao verificar autenticação'\n      };\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.message || 'Erro desconhecido ao verificar autenticação'\n      };\n    }\n  }\n};\n\n/**\n * Realiza o logout do usuário\n * @returns {Promise<Object>} Resultado do logout\n * @throws {Object} Erro personalizado\n */\nexport const logout = async () => {\n  try {\n    // Tenta fazer logout no servidor\n    await api.post('/auth/logout');\n\n    // Remove os dados locais independente do resultado\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('[Auth Service] Logout Error:', error);\n\n    // Mesmo com erro, remove os dados locais\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    if (error.response) {\n      var _error$response$data6;\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: ((_error$response$data6 = error.response.data) === null || _error$response$data6 === void 0 ? void 0 : _error$response$data6.message) || 'Erro ao fazer logout'\n      };\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao fazer logout'\n      };\n    }\n  }\n};\n\n/**\n * Solicita redefinição de senha\n * @param {string} email - Email do usuário\n * @returns {Promise<Object>} Resultado da solicitação\n * @throws {Object} Erro personalizado\n */\nexport const requestPasswordReset = async email => {\n  try {\n    const {\n      data\n    } = await api.post('/auth/request-password-reset', {\n      email\n    });\n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Password Reset Request Error:', error);\n    if (error.response) {\n      var _error$response$data7;\n      throw {\n        type: error.response.status === 404 ? AuthErrorTypes.AUTH_ERROR : AuthErrorTypes.UNKNOWN_ERROR,\n        message: ((_error$response$data7 = error.response.data) === null || _error$response$data7 === void 0 ? void 0 : _error$response$data7.message) || 'Erro ao solicitar redefinição de senha'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao solicitar redefinição de senha'\n      };\n    }\n  }\n};\n\n/**\n * Redefine a senha do usuário\n * @param {string} token - Token de redefinição\n * @param {string} newPassword - Nova senha\n * @returns {Promise<Object>} Resultado da redefinição\n * @throws {Object} Erro personalizado\n */\nexport const resetPassword = async (token, newPassword) => {\n  try {\n    const {\n      data\n    } = await api.post('/auth/reset-password', {\n      token,\n      newPassword\n    });\n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Password Reset Error:', error);\n    if (error.response) {\n      var _error$response$data8;\n      throw {\n        type: error.response.status === 400 || error.response.status === 401 ? AuthErrorTypes.AUTH_ERROR : AuthErrorTypes.UNKNOWN_ERROR,\n        message: ((_error$response$data8 = error.response.data) === null || _error$response$data8 === void 0 ? void 0 : _error$response$data8.message) || 'Erro ao redefinir senha'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao redefinir senha'\n      };\n    }\n  }\n};\nexport default {\n  register,\n  login,\n  checkAuth,\n  logout,\n  requestPasswordReset,\n  resetPassword,\n  AuthErrorTypes // Exporta os tipos de erro para uso externo\n};","map":{"version":3,"names":["api","AuthErrorTypes","CONFLICT","AUTH_ERROR","SESSION_EXPIRED","NETWORK_ERROR","VALIDATION_ERROR","UNKNOWN_ERROR","register","userData","_error$response$data","data","post","token","localStorage","setItem","error","console","response","status","type","message","details","errors","conflicts","request","login","credentials","_error$response$data2","_error$response$data3","_error$response$data4","checkAuth","getItem","get","headers","Authorization","_error$response","removeItem","_error$response$data5","logout","success","_error$response$data6","requestPasswordReset","email","_error$response$data7","resetPassword","newPassword","_error$response$data8"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/client2/src/services/auth.js"],"sourcesContent":["// src/services/auth.js\nimport api from './api';\n\n/**\n * Tipos de erros personalizados para autenticação\n */\nconst AuthErrorTypes = {\n  CONFLICT: 'CONFLICT',           // Quando há conflito (usuário/email já existe)\n  AUTH_ERROR: 'AUTH_ERROR',       // Erros de autenticação (credenciais inválidas)\n  SESSION_EXPIRED: 'SESSION_EXPIRED', // Sessão expirada\n  NETWORK_ERROR: 'NETWORK_ERROR', // Problemas de conexão\n  VALIDATION_ERROR: 'VALIDATION_ERROR', // Erros de validação\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR'  // Erros não identificados\n};\n\n/**\n * Registra um novo usuário\n * @param {Object} userData - Dados do usuário para registro\n * @returns {Promise<Object>} Dados do usuário registrado\n * @throws {Object} Erro personalizado\n */\nexport const register = async (userData) => {\n  try {\n    const { data } = await api.post('/auth/register', userData);\n    \n    // Armazena o token se vier na resposta\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Register Error:', error);\n    \n    // Tratamento específico para cada tipo de erro\n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          throw {\n            type: AuthErrorTypes.VALIDATION_ERROR,\n            message: 'Dados inválidos',\n            details: error.response.data.errors\n          };\n        case 409:\n          throw {\n            type: AuthErrorTypes.CONFLICT,\n            message: error.response.data.message || 'Conflito no registro',\n            conflicts: error.response.data.conflicts\n          };\n        default:\n          throw {\n            type: AuthErrorTypes.UNKNOWN_ERROR,\n            message: error.response.data?.message || 'Erro ao registrar usuário'\n          };\n      }\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao registrar'\n      };\n    }\n  }\n};\n\n/**\n * Realiza o login do usuário\n * @param {Object} credentials - Credenciais de login (email/username e senha)\n * @returns {Promise<Object>} Dados do usuário e token\n * @throws {Object} Erro personalizado\n */\nexport const login = async (credentials) => {\n  try {\n    const { data } = await api.post('/auth/login', credentials);\n    \n    // Armazena o token\n    localStorage.setItem('token', data.token);\n    \n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Login Error:', error);\n    \n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          throw {\n            type: AuthErrorTypes.VALIDATION_ERROR,\n            message: 'Credenciais inválidas',\n            details: error.response.data.errors\n          };\n        case 401:\n          throw {\n            type: AuthErrorTypes.AUTH_ERROR,\n            message: error.response.data?.message || 'Credenciais inválidas'\n          };\n        case 403:\n          throw {\n            type: AuthErrorTypes.AUTH_ERROR,\n            message: error.response.data?.message || 'Conta desativada ou bloqueada'\n          };\n        default:\n          throw {\n            type: AuthErrorTypes.UNKNOWN_ERROR,\n            message: error.response.data?.message || 'Erro ao fazer login'\n          };\n      }\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao fazer login'\n      };\n    }\n  }\n};\n\n/**\n * Verifica a autenticação do usuário\n * @returns {Promise<Object>} Dados do usuário autenticado\n * @throws {Object} Erro personalizado\n */\nexport const checkAuth = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw {\n        type: AuthErrorTypes.AUTH_ERROR,\n        message: 'Nenhum token encontrado'\n      };\n    }\n    \n    const { data } = await api.get('/auth/check', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    \n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Check Auth Error:', error);\n    \n    // Remove o token se for inválido\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      throw {\n        type: AuthErrorTypes.SESSION_EXPIRED,\n        message: 'Sessão expirada'\n      };\n    }\n    \n    if (error.response) {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.response.data?.message || 'Erro ao verificar autenticação'\n      };\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.message || 'Erro desconhecido ao verificar autenticação'\n      };\n    }\n  }\n};\n\n/**\n * Realiza o logout do usuário\n * @returns {Promise<Object>} Resultado do logout\n * @throws {Object} Erro personalizado\n */\nexport const logout = async () => {\n  try {\n    // Tenta fazer logout no servidor\n    await api.post('/auth/logout');\n    \n    // Remove os dados locais independente do resultado\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('[Auth Service] Logout Error:', error);\n    \n    // Mesmo com erro, remove os dados locais\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    \n    if (error.response) {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.response.data?.message || 'Erro ao fazer logout'\n      };\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao fazer logout'\n      };\n    }\n  }\n};\n\n/**\n * Solicita redefinição de senha\n * @param {string} email - Email do usuário\n * @returns {Promise<Object>} Resultado da solicitação\n * @throws {Object} Erro personalizado\n */\nexport const requestPasswordReset = async (email) => {\n  try {\n    const { data } = await api.post('/auth/request-password-reset', { email });\n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Password Reset Request Error:', error);\n    \n    if (error.response) {\n      throw {\n        type: error.response.status === 404 \n          ? AuthErrorTypes.AUTH_ERROR \n          : AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.response.data?.message || 'Erro ao solicitar redefinição de senha'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao solicitar redefinição de senha'\n      };\n    }\n  }\n};\n\n/**\n * Redefine a senha do usuário\n * @param {string} token - Token de redefinição\n * @param {string} newPassword - Nova senha\n * @returns {Promise<Object>} Resultado da redefinição\n * @throws {Object} Erro personalizado\n */\nexport const resetPassword = async (token, newPassword) => {\n  try {\n    const { data } = await api.post('/auth/reset-password', { token, newPassword });\n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Password Reset Error:', error);\n    \n    if (error.response) {\n      throw {\n        type: error.response.status === 400 || error.response.status === 401\n          ? AuthErrorTypes.AUTH_ERROR \n          : AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.response.data?.message || 'Erro ao redefinir senha'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao redefinir senha'\n      };\n    }\n  }\n};\n\nexport default {\n  register,\n  login,\n  checkAuth,\n  logout,\n  requestPasswordReset,\n  resetPassword,\n  AuthErrorTypes // Exporta os tipos de erro para uso externo\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}