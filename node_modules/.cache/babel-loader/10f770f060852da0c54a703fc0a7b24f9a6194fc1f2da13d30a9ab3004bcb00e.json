{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ifunny-clone\\\\client\\\\src\\\\components\\\\profile\\\\UserMemes.jsx\",\n  _s = $RefreshSig$();\n// src/components/profile/UserMemes.jsx\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../../services/api';\nimport MemeThumbnail from '../MemeThumbnail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n`;\n_c = MemeGrid;\nconst RepostBadge = styled.div`\n  position: absolute;\n  top: 5px;\n  left: 5px;\n  background: rgba(0,0,0,0.7);\n  color: white;\n  padding: 3px 6px;\n  border-radius: 4px;\n  font-size: 0.8rem;\n`;\n_c2 = RepostBadge;\nconst UserMemes = ({\n  userId\n}) => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchMemes = async () => {\n      try {\n        const {\n          data\n        } = await api.get(`/users/${userId}/memes?includeReposts=true`);\n        setMemes(data);\n      } catch (error) {\n        console.error('Error fetching user memes:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMemes();\n  }, [userId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading memes...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(MemeGrid, {\n    children: memes.map(meme => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: [meme.isRepost && /*#__PURE__*/_jsxDEV(RepostBadge, {\n        children: \"Repostado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(MemeThumbnail, {\n        meme: meme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, meme._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(UserMemes, \"nDBRZJ1EJ/aszkQrVLG0Fxn1kt0=\");\n_c3 = UserMemes;\nexport default UserMemes;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MemeGrid\");\n$RefreshReg$(_c2, \"RepostBadge\");\n$RefreshReg$(_c3, \"UserMemes\");","map":{"version":3,"names":["useState","useEffect","styled","api","MemeThumbnail","jsxDEV","_jsxDEV","MemeGrid","div","_c","RepostBadge","_c2","UserMemes","userId","_s","memes","setMemes","loading","setLoading","fetchMemes","data","get","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","meme","style","position","isRepost","_id","_c3","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/ifunny-clone/client/src/components/profile/UserMemes.jsx"],"sourcesContent":["// src/components/profile/UserMemes.jsx\r\nimport { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport api from '../../services/api';\r\nimport MemeThumbnail from '../MemeThumbnail';\r\n\r\nconst MemeGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  gap: 20px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst RepostBadge = styled.div`\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 5px;\r\n  background: rgba(0,0,0,0.7);\r\n  color: white;\r\n  padding: 3px 6px;\r\n  border-radius: 4px;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst UserMemes = ({ userId }) => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchMemes = async () => {\r\n      try {\r\n        const { data } = await api.get(`/users/${userId}/memes?includeReposts=true`);\r\n        setMemes(data);\r\n      } catch (error) {\r\n        console.error('Error fetching user memes:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMemes();\r\n  }, [userId]);\r\n\r\n  if (loading) return <div>Loading memes...</div>;\r\n\r\n  return (\r\n    <MemeGrid>\r\n      {memes.map(meme => (\r\n        <div key={meme._id} style={{ position: 'relative' }}>\r\n          {meme.isRepost && <RepostBadge>Repostado</RepostBadge>}\r\n          <MemeThumbnail meme={meme} />\r\n        </div>\r\n      ))}\r\n    </MemeGrid>\r\n  );\r\n};\r\n\r\nexport default UserMemes"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,GAAG,MAAM,oBAAoB;AACpC,OAAOC,aAAa,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,QAAQ,GAAGL,MAAM,CAACM,GAAG;AAC3B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,QAAQ;AAOd,MAAMG,WAAW,GAAGR,MAAM,CAACM,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GATID,WAAW;AAWjB,MAAME,SAAS,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMkB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMjB,GAAG,CAACkB,GAAG,CAAC,UAAUR,MAAM,4BAA4B,CAAC;QAC5EG,QAAQ,CAACI,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,SAAS;QACRJ,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EAEZ,IAAII,OAAO,EAAE,oBAAOX,OAAA;IAAAkB,QAAA,EAAK;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE/C,oBACEtB,OAAA,CAACC,QAAQ;IAAAiB,QAAA,EACNT,KAAK,CAACc,GAAG,CAACC,IAAI,iBACbxB,OAAA;MAAoByB,KAAK,EAAE;QAAEC,QAAQ,EAAE;MAAW,CAAE;MAAAR,QAAA,GACjDM,IAAI,CAACG,QAAQ,iBAAI3B,OAAA,CAACI,WAAW;QAAAc,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eACtDtB,OAAA,CAACF,aAAa;QAAC0B,IAAI,EAAEA;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAFrBE,IAAI,CAACI,GAAG;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEf,CAAC;AAACd,EAAA,CA/BIF,SAAS;AAAAuB,GAAA,GAATvB,SAAS;AAiCf,eAAeA,SAAS;AAAA,IAAAH,EAAA,EAAAE,GAAA,EAAAwB,GAAA;AAAAC,YAAA,CAAA3B,EAAA;AAAA2B,YAAA,CAAAzB,GAAA;AAAAyB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}