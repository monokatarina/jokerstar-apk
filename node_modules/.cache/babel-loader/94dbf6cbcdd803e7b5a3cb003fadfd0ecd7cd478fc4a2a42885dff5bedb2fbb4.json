{"ast":null,"code":"// src/components/profile/UserLikes.jsx\nimport{useState,useEffect}from'react';import styled from'styled-components';import api from'../../services/api';import MemeThumbnail from'../MemeThumbnail';import{jsx as _jsx}from\"react/jsx-runtime\";const MemeGrid=styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n`;const UserLikes=_ref=>{let{userId}=_ref;const[memes,setMemes]=useState([]);const[loading,setLoading]=useState(true);useEffect(()=>{const fetchLikedMemes=async()=>{try{const{data}=await api.get(`/users/${userId}/liked-memes`);setMemes(data);}catch(error){console.error('Error fetching liked memes:',error);}finally{setLoading(false);}};fetchLikedMemes();},[userId]);if(loading)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading liked memes...\"});return/*#__PURE__*/_jsx(MemeGrid,{children:memes.map(meme=>/*#__PURE__*/_jsx(MemeThumbnail,{meme:meme},meme._id))});};export default UserLikes;","map":{"version":3,"names":["useState","useEffect","styled","api","MemeThumbnail","jsx","_jsx","MemeGrid","div","UserLikes","_ref","userId","memes","setMemes","loading","setLoading","fetchLikedMemes","data","get","error","console","children","map","meme","_id"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/ifunny2/client/src/components/profile/UserLikes.jsx"],"sourcesContent":["// src/components/profile/UserLikes.jsx\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../../services/api';\nimport MemeThumbnail from '../MemeThumbnail';\n\nconst MemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n`;\n\nconst UserLikes = ({ userId }) => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchLikedMemes = async () => {\n      try {\n        const { data } = await api.get(`/users/${userId}/liked-memes`);\n        setMemes(data);\n      } catch (error) {\n        console.error('Error fetching liked memes:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchLikedMemes();\n  }, [userId]);\n\n  if (loading) return <div>Loading liked memes...</div>;\n\n  return (\n    <MemeGrid>\n      {memes.map(meme => (\n        <MemeThumbnail key={meme._id} meme={meme} />\n      ))}\n    </MemeGrid>\n  );\n};\n\nexport default UserLikes;"],"mappings":"AAAA;AACA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,GAAG,KAAM,oBAAoB,CACpC,MAAO,CAAAC,aAAa,KAAM,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE7C,KAAM,CAAAC,QAAQ,CAAGL,MAAM,CAACM,GAAG;AAC3B;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGC,IAAA,EAAgB,IAAf,CAAEC,MAAO,CAAC,CAAAD,IAAA,CAC3B,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAe,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACF,KAAM,CAAEC,IAAK,CAAC,CAAG,KAAM,CAAAd,GAAG,CAACe,GAAG,CAAC,UAAUP,MAAM,cAAc,CAAC,CAC9DE,QAAQ,CAACI,IAAI,CAAC,CAChB,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CAAC,OAAS,CACRJ,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDC,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,CAACL,MAAM,CAAC,CAAC,CAEZ,GAAIG,OAAO,CAAE,mBAAOR,IAAA,QAAAe,QAAA,CAAK,wBAAsB,CAAK,CAAC,CAErD,mBACEf,IAAA,CAACC,QAAQ,EAAAc,QAAA,CACNT,KAAK,CAACU,GAAG,CAACC,IAAI,eACbjB,IAAA,CAACF,aAAa,EAAgBmB,IAAI,CAAEA,IAAK,EAArBA,IAAI,CAACC,GAAkB,CAC5C,CAAC,CACM,CAAC,CAEf,CAAC,CAED,cAAe,CAAAf,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}