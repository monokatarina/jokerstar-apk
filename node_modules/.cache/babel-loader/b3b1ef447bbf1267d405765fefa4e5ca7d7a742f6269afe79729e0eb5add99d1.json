{"ast":null,"code":"// src/services/socket.js\nimport { io } from 'socket.io-client';\nconst API_URL = process.env.REACT_APP_API_URL || 'https://api.jokesteronline.org';\nlet socket;\n\n/**\r\n * Inicializa a conexão do socket\r\n * @param {string} token - Token JWT do usuário\r\n * @returns {Socket} Instância do socket\r\n */\nexport const initSocket = token => {\n  if (!socket) {\n    socket = io(API_URL, {\n      auth: {\n        token\n      },\n      transports: ['websocket'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    // Eventos para debug\n    socket.on('connect', () => {\n      console.log('Socket conectado:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Socket desconectado');\n    });\n    socket.on('connect_error', err => {\n      console.error('Erro de conexão:', err);\n    });\n  }\n  return socket;\n};\n\n/**\r\n * Obtém a instância atual do socket\r\n * @returns {Socket|null} Instância do socket ou null\r\n */\nexport const getSocket = () => socket;\n\n/**\r\n * Configura um listener para notificações\r\n * @param {function} callback - Função a ser chamada quando uma notificação chegar\r\n */\nexport const setupNotificationListener = callback => {\n  if (socket) {\n    socket.on('new-notification', callback);\n  } else {\n    console.warn('Socket não inicializado');\n  }\n};\n\n/**\r\n * Remove todos os listeners de notificação\r\n */\nexport const removeNotificationListeners = () => {\n  if (socket) {\n    socket.off('new-notification');\n  }\n};\n\n/**\r\n * Desconecta o socket\r\n */\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};","map":{"version":3,"names":["io","API_URL","process","env","REACT_APP_API_URL","socket","initSocket","token","auth","transports","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","id","err","error","getSocket","setupNotificationListener","callback","warn","removeNotificationListeners","off","disconnectSocket","disconnect"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/client2/src/services/socket.js"],"sourcesContent":["// src/services/socket.js\r\nimport { io } from 'socket.io-client';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'https://api.jokesteronline.org';\r\nlet socket;\r\n\r\n/**\r\n * Inicializa a conexão do socket\r\n * @param {string} token - Token JWT do usuário\r\n * @returns {Socket} Instância do socket\r\n */\r\nexport const initSocket = (token) => {\r\n  if (!socket) {\r\n    socket = io(API_URL, {\r\n      auth: { token },\r\n      transports: ['websocket'],\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000\r\n    });\r\n\r\n    // Eventos para debug\r\n    socket.on('connect', () => {\r\n      console.log('Socket conectado:', socket.id);\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Socket desconectado');\r\n    });\r\n\r\n    socket.on('connect_error', (err) => {\r\n      console.error('Erro de conexão:', err);\r\n    });\r\n  }\r\n  return socket;\r\n};\r\n\r\n/**\r\n * Obtém a instância atual do socket\r\n * @returns {Socket|null} Instância do socket ou null\r\n */\r\nexport const getSocket = () => socket;\r\n\r\n/**\r\n * Configura um listener para notificações\r\n * @param {function} callback - Função a ser chamada quando uma notificação chegar\r\n */\r\nexport const setupNotificationListener = (callback) => {\r\n  if (socket) {\r\n    socket.on('new-notification', callback);\r\n  } else {\r\n    console.warn('Socket não inicializado');\r\n  }\r\n};\r\n\r\n/**\r\n * Remove todos os listeners de notificação\r\n */\r\nexport const removeNotificationListeners = () => {\r\n  if (socket) {\r\n    socket.off('new-notification');\r\n  }\r\n};\r\n\r\n/**\r\n * Desconecta o socket\r\n */\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};"],"mappings":"AAAA;AACA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,gCAAgC;AACjF,IAAIC,MAAM;;AAEV;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIC,KAAK,IAAK;EACnC,IAAI,CAACF,MAAM,EAAE;IACXA,MAAM,GAAGL,EAAE,CAACC,OAAO,EAAE;MACnBO,IAAI,EAAE;QAAED;MAAM,CAAC;MACfE,UAAU,EAAE,CAAC,WAAW,CAAC;MACzBC,YAAY,EAAE,IAAI;MAClBC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE;IACrB,CAAC,CAAC;;IAEF;IACAP,MAAM,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEV,MAAM,CAACW,EAAE,CAAC;IAC7C,CAAC,CAAC;IAEFX,MAAM,CAACQ,EAAE,CAAC,YAAY,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC;IAEFV,MAAM,CAACQ,EAAE,CAAC,eAAe,EAAGI,GAAG,IAAK;MAClCH,OAAO,CAACI,KAAK,CAAC,kBAAkB,EAAED,GAAG,CAAC;IACxC,CAAC,CAAC;EACJ;EACA,OAAOZ,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMc,SAAS,GAAGA,CAAA,KAAMd,MAAM;;AAErC;AACA;AACA;AACA;AACA,OAAO,MAAMe,yBAAyB,GAAIC,QAAQ,IAAK;EACrD,IAAIhB,MAAM,EAAE;IACVA,MAAM,CAACQ,EAAE,CAAC,kBAAkB,EAAEQ,QAAQ,CAAC;EACzC,CAAC,MAAM;IACLP,OAAO,CAACQ,IAAI,CAAC,yBAAyB,CAAC;EACzC;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,2BAA2B,GAAGA,CAAA,KAAM;EAC/C,IAAIlB,MAAM,EAAE;IACVA,MAAM,CAACmB,GAAG,CAAC,kBAAkB,CAAC;EAChC;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAIpB,MAAM,EAAE;IACVA,MAAM,CAACqB,UAAU,CAAC,CAAC;IACnBrB,MAAM,GAAG,IAAI;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}