{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ifunny-clone\\\\client\\\\src\\\\pages\\\\FeedPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport UploadButton from '../components/UploadButton';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n_c = FeedContainer;\nconst RepostButton = styled.button`\n  background: #f0f0f0;\n  border: none;\n  padding: 8px 12px;\n  border-radius: 20px;\n  cursor: pointer;\n  margin-top: 8px;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 14px;\n  \n  &:hover {\n    background: #e0e0e0;\n  }\n`;\n_c2 = RepostButton;\nconst FeedPage = () => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    user,\n    logout\n  } = useAuth();\n  const navigate = useNavigate();\n  const handleRepost = async memeId => {\n    try {\n      await api.post(`/memes/${memeId}/repost`);\n      // Atualiza a lista de memes\n      const {\n        data\n      } = await api.get('/memes');\n      setMemes(Array.isArray(data) ? data : []);\n    } catch (error) {\n      var _error$response;\n      console.error('Erro ao repostar:', error);\n      setError('Erro ao repostar');\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        await logout();\n        navigate('/login');\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchMemes = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const {\n          data\n        } = await api.get('/memes');\n        setMemes(Array.isArray(data) ? data : []);\n      } catch (error) {\n        var _error$response2;\n        console.error('Erro ao carregar feed:', error);\n        setError('Erro ao carregar o feed');\n        if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n          await logout();\n          navigate('/login');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMemes();\n  }, [logout, navigate]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Carregando...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(FeedContainer, {\n    children: [/*#__PURE__*/_jsxDEV(UploadButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-list\",\n      children: memes.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nenhuma postagem encontrada. Que tal criar a primeira?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this) : memes.map(meme => {\n        var _meme$author;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(MemeCard, {\n            meme: meme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), user && user._id !== ((_meme$author = meme.author) === null || _meme$author === void 0 ? void 0 : _meme$author._id) && /*#__PURE__*/_jsxDEV(RepostButton, {\n            onClick: () => handleRepost(meme._id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uD83D\\uDD01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this), \" Repostar (\", meme.repostCount || 0, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this)]\n        }, meme._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedPage, \"hkI4VWF6iOhmcKzVtICcfMttyfQ=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c3 = FeedPage;\nexport default FeedPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FeedContainer\");\n$RefreshReg$(_c2, \"RepostButton\");\n$RefreshReg$(_c3, \"FeedPage\");","map":{"version":3,"names":["React","useState","useEffect","styled","api","MemeCard","UploadButton","useNavigate","useAuth","jsxDEV","_jsxDEV","FeedContainer","div","_c","RepostButton","button","_c2","FeedPage","_s","memes","setMemes","loading","setLoading","error","setError","user","logout","navigate","handleRepost","memeId","post","data","get","Array","isArray","_error$response","console","response","status","fetchMemes","_error$response2","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","meme","_meme$author","_id","author","onClick","repostCount","_c3","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/√Årea de Trabalho/ifunny-clone/client/src/pages/FeedPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport api from '../services/api';\r\nimport MemeCard from '../components/MemeCard';\r\nimport UploadButton from '../components/UploadButton';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst FeedContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;\r\n\r\nconst RepostButton = styled.button`\r\n  background: #f0f0f0;\r\n  border: none;\r\n  padding: 8px 12px;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  margin-top: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  font-size: 14px;\r\n  \r\n  &:hover {\r\n    background: #e0e0e0;\r\n  }\r\n`;\r\n\r\nconst FeedPage = () => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const { user, logout } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  const handleRepost = async (memeId) => {\r\n    try {\r\n      await api.post(`/memes/${memeId}/repost`);\r\n      // Atualiza a lista de memes\r\n      const { data } = await api.get('/memes');\r\n      setMemes(Array.isArray(data) ? data : []);\r\n    } catch (error) {\r\n      console.error('Erro ao repostar:', error);\r\n      setError('Erro ao repostar');\r\n      if (error.response?.status === 401) {\r\n        await logout();\r\n        navigate('/login');\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchMemes = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        const { data } = await api.get('/memes');\r\n        setMemes(Array.isArray(data) ? data : []);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar feed:', error);\r\n        setError('Erro ao carregar o feed');\r\n        if (error.response?.status === 401) {\r\n          await logout();\r\n          navigate('/login');\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMemes();\r\n  }, [logout, navigate]);\r\n\r\n  if (loading) return <div>Carregando...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <FeedContainer>\r\n      <UploadButton />\r\n      \r\n      <div className=\"feed-list\">\r\n        {memes.length === 0 ? (\r\n          <p>Nenhuma postagem encontrada. Que tal criar a primeira?</p>\r\n        ) : (\r\n          memes.map(meme => (\r\n            <div key={meme._id}>\r\n              <MemeCard meme={meme} />\r\n              {user && user._id !== meme.author?._id && (\r\n                <RepostButton onClick={() => handleRepost(meme._id)}>\r\n                  <span>üîÅ</span> Repostar ({meme.repostCount || 0})\r\n                </RepostButton>\r\n              )}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </FeedContainer>\r\n  );\r\n};\r\n\r\nexport default FeedPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}