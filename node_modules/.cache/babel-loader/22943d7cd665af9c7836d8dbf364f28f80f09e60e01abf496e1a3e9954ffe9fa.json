{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ifunny-clone\\\\client\\\\src\\\\pages\\\\FeedPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport api from '../services/api';\nimport MemeCard from '../components/memes/MemeCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedPage = () => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchMemes = async () => {\n      try {\n        const response = await api.get('/memes/hot');\n        setMemes(response.data);\n      } catch (error) {\n        console.error('Erro ao carregar memes:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMemes();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Carregando...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed-container\",\n    children: memes.map(meme => /*#__PURE__*/_jsxDEV(MemeCard, {\n      meme: meme\n    }, meme._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedPage, \"nDBRZJ1EJ/aszkQrVLG0Fxn1kt0=\");\n_c = FeedPage;\nexport default FeedPage;\nvar _c;\n$RefreshReg$(_c, \"FeedPage\");","map":{"version":3,"names":["React","useState","useEffect","api","MemeCard","jsxDEV","_jsxDEV","FeedPage","_s","memes","setMemes","loading","setLoading","fetchMemes","response","get","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","meme","_id","_c","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/ifunny-clone/client/src/pages/FeedPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\nimport MemeCard from '../components/memes/MemeCard';\r\n\r\nconst FeedPage = () => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchMemes = async () => {\r\n      try {\r\n        const response = await api.get('/memes/hot');\r\n        setMemes(response.data);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar memes:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMemes();\r\n  }, []);\r\n\r\n  if (loading) return <div>Carregando...</div>;\r\n\r\n  return (\r\n    <div className=\"feed-container\">\r\n      {memes.map(meme => (\r\n        <MemeCard key={meme._id} meme={meme} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB;AACjC,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAG,CAAC,YAAY,CAAC;QAC5CL,QAAQ,CAACI,QAAQ,CAACE,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,SAAS;QACRL,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,EAAE,oBAAOL,OAAA;IAAAa,QAAA,EAAK;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE5C,oBACEjB,OAAA;IAAKkB,SAAS,EAAC,gBAAgB;IAAAL,QAAA,EAC5BV,KAAK,CAACgB,GAAG,CAACC,IAAI,iBACbpB,OAAA,CAACF,QAAQ;MAAgBsB,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACC,GAAG;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACvC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACf,EAAA,CA5BID,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AA8Bd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}