{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import styled from'styled-components';import api from'../services/api';import MemeCard from'../components/MemeCard';import{useNavigate}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import{FiRefreshCw}from'react-icons/fi';import UploadButton from'../components/UploadButton';import Navbar from'../components/Navbar/Navbar';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const FeedContainer=styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: var(--background);\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  scroll-snap-type: y mandatory;\n  scroll-behavior: smooth;\n  overscroll-behavior-y: contain;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  padding-top: calc(60px + env(safe-area-inset-top));\n`;const FeedGrid=styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;const MemeWrapper=styled.div`\n  width: 100%;\n  height: calc(100vh - 60px - env(safe-area-inset-top));\n  scroll-snap-align: start;\n  position: relative;\n`;const EmptyFeed=styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: calc(100vh - 60px - env(safe-area-inset-top));\n  width: 100%;\n  text-align: center;\n  color: var(--text);\n  scroll-snap-align: start;\n  background: var(--card-bg);\n  padding: 16px;\n\n  h3 {\n    font-size: 1.5rem;\n    margin-bottom: 16px;\n  }\n\n  p {\n    color: var(--text-light);\n    margin-bottom: 24px;\n  }\n`;const LoadingIndicator=styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: calc(100vh - 60px - env(safe-area-inset-top));\n  width: 100%;\n  color: var(--text-light);\n  scroll-snap-align: start;\n`;const ErrorMessage=styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: calc(100vh - 60px - env(safe-area-inset-top));\n  width: 100%;\n  color: var(--danger);\n  padding: 20px;\n  scroll-snap-align: start;\n\n  button {\n    margin-top: 20px;\n    padding: 12px 24px;\n    border-radius: 24px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: 500;\n  }\n`;const RepostButton=styled.button`\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n  background: rgba(0, 0, 0, 0.7);\n  color: white;\n  border: none;\n  padding: 10px 16px;\n  border-radius: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 14px;\n  z-index: 10;\n  transition: all 0.2s ease;\n  \n  &:active {\n    transform: scale(0.95);\n    background: rgba(0, 0, 0, 0.9);\n  }\n`;const TrendingPage=()=>{const[memes,setMemes]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const{user,logout}=useAuth();const navigate=useNavigate();const fetchTrendingMemes=useCallback(async()=>{try{setLoading(true);setError(null);const{data}=await api.get('/feed/trending?limit=50');setMemes(data.data);}catch(error){var _error$response;console.error('Error fetching trending memes:',error);setError('Erro ao carregar os memes em destaque. Tente novamente mais tarde.');if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){await logout();navigate('/login');}}finally{setLoading(false);}},[logout,navigate]);const handleRefresh=useCallback(()=>{fetchTrendingMemes();},[fetchTrendingMemes]);const handleRepost=async memeId=>{try{await api.post(`/memes/${memeId}/repost`);fetchTrendingMemes();}catch(error){var _error$response2;console.error('Erro ao repostar:',error);setError('Erro ao repostar');if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===401){await logout();navigate('/login');}}};useEffect(()=>{fetchTrendingMemes();},[fetchTrendingMemes]);if(loading){return/*#__PURE__*/_jsx(FeedContainer,{children:/*#__PURE__*/_jsx(LoadingIndicator,{children:\"Carregando memes em destaque...\"})});}if(error){return/*#__PURE__*/_jsx(FeedContainer,{children:/*#__PURE__*/_jsxs(ErrorMessage,{children:[error,/*#__PURE__*/_jsxs(\"button\",{onClick:handleRefresh,children:[/*#__PURE__*/_jsx(FiRefreshCw,{}),\" Tentar novamente\"]})]})});}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(FeedContainer,{children:/*#__PURE__*/_jsx(FeedGrid,{children:memes.length===0?/*#__PURE__*/_jsxs(EmptyFeed,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Nenhum meme em destaque encontrado\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Que tal criar o primeiro?\"}),/*#__PURE__*/_jsx(UploadButton,{size:\"large\"})]}):memes.map(meme=>{var _meme$author;return/*#__PURE__*/_jsxs(MemeWrapper,{children:[/*#__PURE__*/_jsx(MemeCard,{meme:meme,isSquareView:false,style:{width:'100%',height:'100%'}}),user&&user._id!==((_meme$author=meme.author)===null||_meme$author===void 0?void 0:_meme$author._id)&&/*#__PURE__*/_jsxs(RepostButton,{onClick:()=>handleRepost(meme._id),children:[/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDD01\"}),\" Repostar (\",meme.repostCount||0,\")\"]})]},meme._id);})})})});};export default TrendingPage;","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","api","MemeCard","useNavigate","useAuth","FiRefreshCw","UploadButton","Navbar","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","FeedContainer","div","FeedGrid","MemeWrapper","EmptyFeed","LoadingIndicator","ErrorMessage","RepostButton","button","TrendingPage","memes","setMemes","loading","setLoading","error","setError","user","logout","navigate","fetchTrendingMemes","data","get","_error$response","console","response","status","handleRefresh","handleRepost","memeId","post","_error$response2","children","onClick","length","size","map","meme","_meme$author","isSquareView","style","width","height","_id","author","repostCount"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/jokersta_apk/src/pages/TrendingPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { FiRefreshCw } from 'react-icons/fi';\nimport UploadButton from '../components/UploadButton';\nimport Navbar from '../components/Navbar/Navbar';\n\nconst FeedContainer = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: var(--background);\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  scroll-snap-type: y mandatory;\n  scroll-behavior: smooth;\n  overscroll-behavior-y: contain;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  padding-top: calc(60px + env(safe-area-inset-top));\n`;\n\nconst FeedGrid = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst MemeWrapper = styled.div`\n  width: 100%;\n  height: calc(100vh - 60px - env(safe-area-inset-top));\n  scroll-snap-align: start;\n  position: relative;\n`;\n\nconst EmptyFeed = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: calc(100vh - 60px - env(safe-area-inset-top));\n  width: 100%;\n  text-align: center;\n  color: var(--text);\n  scroll-snap-align: start;\n  background: var(--card-bg);\n  padding: 16px;\n\n  h3 {\n    font-size: 1.5rem;\n    margin-bottom: 16px;\n  }\n\n  p {\n    color: var(--text-light);\n    margin-bottom: 24px;\n  }\n`;\n\nconst LoadingIndicator = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: calc(100vh - 60px - env(safe-area-inset-top));\n  width: 100%;\n  color: var(--text-light);\n  scroll-snap-align: start;\n`;\n\nconst ErrorMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: calc(100vh - 60px - env(safe-area-inset-top));\n  width: 100%;\n  color: var(--danger);\n  padding: 20px;\n  scroll-snap-align: start;\n\n  button {\n    margin-top: 20px;\n    padding: 12px 24px;\n    border-radius: 24px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: 500;\n  }\n`;\n\nconst RepostButton = styled.button`\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n  background: rgba(0, 0, 0, 0.7);\n  color: white;\n  border: none;\n  padding: 10px 16px;\n  border-radius: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 14px;\n  z-index: 10;\n  transition: all 0.2s ease;\n  \n  &:active {\n    transform: scale(0.95);\n    background: rgba(0, 0, 0, 0.9);\n  }\n`;\n\nconst TrendingPage = () => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const fetchTrendingMemes = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { data } = await api.get('/feed/trending?limit=50');\n      setMemes(data.data);\n    } catch (error) {\n      console.error('Error fetching trending memes:', error);\n      setError('Erro ao carregar os memes em destaque. Tente novamente mais tarde.');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [logout, navigate]);\n\n  const handleRefresh = useCallback(() => {\n    fetchTrendingMemes();\n  }, [fetchTrendingMemes]);\n\n  const handleRepost = async (memeId) => {\n    try {\n      await api.post(`/memes/${memeId}/repost`);\n      fetchTrendingMemes();\n    } catch (error) {\n      console.error('Erro ao repostar:', error);\n      setError('Erro ao repostar');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTrendingMemes();\n  }, [fetchTrendingMemes]);\n\n  if (loading) {\n    return (\n      <FeedContainer>\n        <LoadingIndicator>Carregando memes em destaque...</LoadingIndicator>\n      </FeedContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      <FeedContainer>\n        <ErrorMessage>\n          {error}\n          <button onClick={handleRefresh}>\n            <FiRefreshCw /> Tentar novamente\n          </button>\n        </ErrorMessage>\n      </FeedContainer>\n    );\n  }\n\n  return (\n    <>\n      <FeedContainer>\n        <FeedGrid>\n          {memes.length === 0 ? (\n            <EmptyFeed>\n              <h3>Nenhum meme em destaque encontrado</h3>\n              <p>Que tal criar o primeiro?</p>\n              <UploadButton size=\"large\" />\n            </EmptyFeed>\n          ) : (\n            memes.map((meme) => (\n              <MemeWrapper key={meme._id}>\n                <MemeCard\n                  meme={meme}\n                  isSquareView={false}\n                  style={{ width: '100%', height: '100%' }}\n                />\n                {user && user._id !== meme.author?._id && (\n                  <RepostButton onClick={() => handleRepost(meme._id)}>\n                    <span>🔁</span> Repostar ({meme.repostCount || 0})\n                  </RepostButton>\n                )}\n              </MemeWrapper>\n            ))\n          )}\n        </FeedGrid>\n      </FeedContainer>\n    </>\n  );\n};\n\nexport default TrendingPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}