{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ifunny-clone\\\\client\\\\src\\\\components\\\\profile\\\\UserMemes.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../../services/api';\nimport { useParams } from 'react-router-dom';\nimport MemeCard from '../MemeCard'; // Supondo que você tenha um MemeCard separado\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 25px;\n  padding: 20px;\n`;\n_c = MemeGrid;\nconst UserMemes = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchUserMemes = async () => {\n      try {\n        setLoading(true);\n        const {\n          data\n        } = await api.get(`/users/${userId}/memes`);\n        setMemes(data);\n      } catch (err) {\n        setError('Falha ao carregar memes');\n        console.error('Erro ao buscar memes:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserMemes();\n  }, [userId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Carregando memes...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 21\n  }, this);\n  if (memes.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Nenhum meme encontrado\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 34\n  }, this);\n  return /*#__PURE__*/_jsxDEV(MemeGrid, {\n    children: memes.map(meme => /*#__PURE__*/_jsxDEV(MemeCard, {\n      meme: meme\n    }, meme._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(UserMemes, \"0rOS5UHb6S01qu9oZgKgYmkIqv4=\", false, function () {\n  return [useParams];\n});\n_c2 = UserMemes;\nexport default UserMemes;\nvar _c, _c2;\n$RefreshReg$(_c, \"MemeGrid\");\n$RefreshReg$(_c2, \"UserMemes\");","map":{"version":3,"names":["React","useState","useEffect","styled","api","useParams","MemeCard","jsxDEV","_jsxDEV","MemeGrid","div","_c","UserMemes","_s","userId","memes","setMemes","loading","setLoading","error","setError","fetchUserMemes","data","get","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","meme","_id","_c2","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/ifunny-clone/client/src/components/profile/UserMemes.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport api from '../../services/api';\r\nimport { useParams } from 'react-router-dom';\r\nimport MemeCard from '../MemeCard'; // Supondo que você tenha um MemeCard separado\r\n\r\nconst MemeGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 25px;\r\n  padding: 20px;\r\n`;\r\n\r\nconst UserMemes = () => {\r\n  const { userId } = useParams();\r\n  const [memes, setMemes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchUserMemes = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const { data } = await api.get(`/users/${userId}/memes`);\r\n        setMemes(data);\r\n      } catch (err) {\r\n        setError('Falha ao carregar memes');\r\n        console.error('Erro ao buscar memes:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserMemes();\r\n  }, [userId]);\r\n\r\n  if (loading) return <div>Carregando memes...</div>;\r\n  if (error) return <div>{error}</div>;\r\n  if (memes.length === 0) return <div>Nenhum meme encontrado</div>;\r\n\r\n  return (\r\n    <MemeGrid>\r\n      {memes.map(meme => (\r\n        <MemeCard key={meme._id} meme={meme} />\r\n      ))}\r\n    </MemeGrid>\r\n  );\r\n};\r\n\r\nexport default UserMemes;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,GAAG,MAAM,oBAAoB;AACpC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,QAAQ,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAQ,GAAGN,MAAM,CAACO,GAAG;AAC3B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,QAAQ;AAOd,MAAMG,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAO,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMmB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChB,MAAM;UAAEI;QAAK,CAAC,GAAG,MAAMlB,GAAG,CAACmB,GAAG,CAAC,UAAUT,MAAM,QAAQ,CAAC;QACxDE,QAAQ,CAACM,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZJ,QAAQ,CAAC,yBAAyB,CAAC;QACnCK,OAAO,CAACN,KAAK,CAAC,uBAAuB,EAAEK,GAAG,CAAC;MAC7C,CAAC,SAAS;QACRN,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACP,MAAM,CAAC,CAAC;EAEZ,IAAIG,OAAO,EAAE,oBAAOT,OAAA;IAAAkB,QAAA,EAAK;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAClD,IAAIX,KAAK,EAAE,oBAAOX,OAAA;IAAAkB,QAAA,EAAMP;EAAK;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EACpC,IAAIf,KAAK,CAACgB,MAAM,KAAK,CAAC,EAAE,oBAAOvB,OAAA;IAAAkB,QAAA,EAAK;EAAsB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEhE,oBACEtB,OAAA,CAACC,QAAQ;IAAAiB,QAAA,EACNX,KAAK,CAACiB,GAAG,CAACC,IAAI,iBACbzB,OAAA,CAACF,QAAQ;MAAgB2B,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACC,GAAG;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACvC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEf,CAAC;AAACjB,EAAA,CAlCID,SAAS;EAAA,QACMP,SAAS;AAAA;AAAA8B,GAAA,GADxBvB,SAAS;AAoCf,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAAwB,GAAA;AAAAC,YAAA,CAAAzB,EAAA;AAAAyB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}