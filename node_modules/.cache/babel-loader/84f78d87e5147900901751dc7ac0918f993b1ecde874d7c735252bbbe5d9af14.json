{"ast":null,"code":"// src/services/auth.js\nimport api from'./api';/**\n * Tipos de erros personalizados para autenticação\n */const AuthErrorTypes={CONFLICT:'CONFLICT',// Quando há conflito (usuário/email já existe)\nAUTH_ERROR:'AUTH_ERROR',// Erros de autenticação (credenciais inválidas)\nSESSION_EXPIRED:'SESSION_EXPIRED',// Sessão expirada\nNETWORK_ERROR:'NETWORK_ERROR',// Problemas de conexão\nVALIDATION_ERROR:'VALIDATION_ERROR',// Erros de validação\nUNKNOWN_ERROR:'UNKNOWN_ERROR'// Erros não identificados\n};/**\n * Registra um novo usuário\n * @param {Object} userData - Dados do usuário para registro\n * @returns {Promise<Object>} Dados do usuário registrado\n * @throws {Object} Erro personalizado\n */export const register=async userData=>{var _error$response$data;try{const{data}=await api.post('/auth/register',userData);// Armazena o token se vier na resposta\nif(data.token){localStorage.setItem('token',data.token);}return data;}catch(error){console.error('[Auth Service] Register Error:',error);// Tratamento específico para cada tipo de erro\nif(error.response){switch(error.response.status){case 400:throw{type:AuthErrorTypes.VALIDATION_ERROR,message:'Dados inválidos',details:error.response.data.errors};case 409:throw{type:AuthErrorTypes.CONFLICT,message:error.response.data.message||'Conflito no registro',conflicts:error.response.data.conflicts};default:throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Erro ao registrar usuário'};}}else if(error.request){throw{type:AuthErrorTypes.NETWORK_ERROR,message:'Sem resposta do servidor'};}else{throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:'Erro desconhecido ao registrar'};}}};/**\n * Realiza o login do usuário\n * @param {Object} credentials - Credenciais de login (email/username e senha)\n * @returns {Promise<Object>} Dados do usuário e token\n * @throws {Object} Erro personalizado\n */export const login=async credentials=>{var _error$response$data2,_error$response$data3,_error$response$data4;try{const{data}=await api.post('/auth/login',credentials);// Armazena o token\nlocalStorage.setItem('token',data.token);return data;}catch(error){console.error('[Auth Service] Login Error:',error);if(error.response){switch(error.response.status){case 400:throw{type:AuthErrorTypes.VALIDATION_ERROR,message:'Credenciais inválidas',details:error.response.data.errors};case 401:throw{type:AuthErrorTypes.AUTH_ERROR,message:((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.message)||'Credenciais inválidas'};case 403:throw{type:AuthErrorTypes.AUTH_ERROR,message:((_error$response$data3=error.response.data)===null||_error$response$data3===void 0?void 0:_error$response$data3.message)||'Conta desativada ou bloqueada'};default:throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:((_error$response$data4=error.response.data)===null||_error$response$data4===void 0?void 0:_error$response$data4.message)||'Erro ao fazer login'};}}else if(error.request){throw{type:AuthErrorTypes.NETWORK_ERROR,message:'Sem resposta do servidor'};}else{throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:'Erro desconhecido ao fazer login'};}}};/**\n * Verifica a autenticação do usuário\n * @returns {Promise<Object>} Dados do usuário autenticado\n * @throws {Object} Erro personalizado\n */export const checkAuth=async()=>{try{const token=localStorage.getItem('token');if(!token){throw{type:AuthErrorTypes.AUTH_ERROR,message:'Nenhum token encontrado'};}const{data}=await api.get('/auth/check',{headers:{Authorization:`Bearer ${token}`}});return data;}catch(error){var _error$response;console.error('[Auth Service] Check Auth Error:',error);// Remove o token se for inválido\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');throw{type:AuthErrorTypes.SESSION_EXPIRED,message:'Sessão expirada'};}if(error.response){var _error$response$data5;throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:((_error$response$data5=error.response.data)===null||_error$response$data5===void 0?void 0:_error$response$data5.message)||'Erro ao verificar autenticação'};}else if(error.request){throw{type:AuthErrorTypes.NETWORK_ERROR,message:'Sem resposta do servidor'};}else{throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:error.message||'Erro desconhecido ao verificar autenticação'};}}};/**\n * Realiza o logout do usuário\n * @returns {Promise<Object>} Resultado do logout\n * @throws {Object} Erro personalizado\n */export const logout=async()=>{try{// Tenta fazer logout no servidor\nawait api.post('/auth/logout');// Remove os dados locais independente do resultado\nlocalStorage.removeItem('token');localStorage.removeItem('user');return{success:true};}catch(error){console.error('[Auth Service] Logout Error:',error);// Mesmo com erro, remove os dados locais\nlocalStorage.removeItem('token');localStorage.removeItem('user');if(error.response){var _error$response$data6;throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:((_error$response$data6=error.response.data)===null||_error$response$data6===void 0?void 0:_error$response$data6.message)||'Erro ao fazer logout'};}else if(error.request){throw{type:AuthErrorTypes.NETWORK_ERROR,message:'Sem resposta do servidor'};}else{throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:'Erro desconhecido ao fazer logout'};}}};/**\n * Solicita redefinição de senha\n * @param {string} email - Email do usuário\n * @returns {Promise<Object>} Resultado da solicitação\n * @throws {Object} Erro personalizado\n */export const requestPasswordReset=async email=>{try{const{data}=await api.post('/auth/request-password-reset',{email});return data;}catch(error){console.error('[Auth Service] Password Reset Request Error:',error);if(error.response){var _error$response$data7;throw{type:error.response.status===404?AuthErrorTypes.AUTH_ERROR:AuthErrorTypes.UNKNOWN_ERROR,message:((_error$response$data7=error.response.data)===null||_error$response$data7===void 0?void 0:_error$response$data7.message)||'Erro ao solicitar redefinição de senha'};}else{throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:'Erro desconhecido ao solicitar redefinição de senha'};}}};/**\n * Redefine a senha do usuário\n * @param {string} token - Token de redefinição\n * @param {string} newPassword - Nova senha\n * @returns {Promise<Object>} Resultado da redefinição\n * @throws {Object} Erro personalizado\n */export const resetPassword=async(token,newPassword)=>{try{const{data}=await api.post('/auth/reset-password',{token,newPassword});return data;}catch(error){console.error('[Auth Service] Password Reset Error:',error);if(error.response){var _error$response$data8;throw{type:error.response.status===400||error.response.status===401?AuthErrorTypes.AUTH_ERROR:AuthErrorTypes.UNKNOWN_ERROR,message:((_error$response$data8=error.response.data)===null||_error$response$data8===void 0?void 0:_error$response$data8.message)||'Erro ao redefinir senha'};}else{throw{type:AuthErrorTypes.UNKNOWN_ERROR,message:'Erro desconhecido ao redefinir senha'};}}};export default{register,login,checkAuth,logout,requestPasswordReset,resetPassword,AuthErrorTypes// Exporta os tipos de erro para uso externo\n};","map":{"version":3,"names":["api","AuthErrorTypes","CONFLICT","AUTH_ERROR","SESSION_EXPIRED","NETWORK_ERROR","VALIDATION_ERROR","UNKNOWN_ERROR","register","userData","_error$response$data","data","post","token","localStorage","setItem","error","console","response","status","type","message","details","errors","conflicts","request","login","credentials","_error$response$data2","_error$response$data3","_error$response$data4","checkAuth","getItem","get","headers","Authorization","_error$response","removeItem","_error$response$data5","logout","success","_error$response$data6","requestPasswordReset","email","_error$response$data7","resetPassword","newPassword","_error$response$data8"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/client2/src/services/auth.js"],"sourcesContent":["// src/services/auth.js\nimport api from './api';\n\n/**\n * Tipos de erros personalizados para autenticação\n */\nconst AuthErrorTypes = {\n  CONFLICT: 'CONFLICT',           // Quando há conflito (usuário/email já existe)\n  AUTH_ERROR: 'AUTH_ERROR',       // Erros de autenticação (credenciais inválidas)\n  SESSION_EXPIRED: 'SESSION_EXPIRED', // Sessão expirada\n  NETWORK_ERROR: 'NETWORK_ERROR', // Problemas de conexão\n  VALIDATION_ERROR: 'VALIDATION_ERROR', // Erros de validação\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR'  // Erros não identificados\n};\n\n/**\n * Registra um novo usuário\n * @param {Object} userData - Dados do usuário para registro\n * @returns {Promise<Object>} Dados do usuário registrado\n * @throws {Object} Erro personalizado\n */\nexport const register = async (userData) => {\n  try {\n    const { data } = await api.post('/auth/register', userData);\n    \n    // Armazena o token se vier na resposta\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Register Error:', error);\n    \n    // Tratamento específico para cada tipo de erro\n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          throw {\n            type: AuthErrorTypes.VALIDATION_ERROR,\n            message: 'Dados inválidos',\n            details: error.response.data.errors\n          };\n        case 409:\n          throw {\n            type: AuthErrorTypes.CONFLICT,\n            message: error.response.data.message || 'Conflito no registro',\n            conflicts: error.response.data.conflicts\n          };\n        default:\n          throw {\n            type: AuthErrorTypes.UNKNOWN_ERROR,\n            message: error.response.data?.message || 'Erro ao registrar usuário'\n          };\n      }\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao registrar'\n      };\n    }\n  }\n};\n\n/**\n * Realiza o login do usuário\n * @param {Object} credentials - Credenciais de login (email/username e senha)\n * @returns {Promise<Object>} Dados do usuário e token\n * @throws {Object} Erro personalizado\n */\nexport const login = async (credentials) => {\n  try {\n    const { data } = await api.post('/auth/login', credentials);\n    \n    // Armazena o token\n    localStorage.setItem('token', data.token);\n    \n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Login Error:', error);\n    \n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          throw {\n            type: AuthErrorTypes.VALIDATION_ERROR,\n            message: 'Credenciais inválidas',\n            details: error.response.data.errors\n          };\n        case 401:\n          throw {\n            type: AuthErrorTypes.AUTH_ERROR,\n            message: error.response.data?.message || 'Credenciais inválidas'\n          };\n        case 403:\n          throw {\n            type: AuthErrorTypes.AUTH_ERROR,\n            message: error.response.data?.message || 'Conta desativada ou bloqueada'\n          };\n        default:\n          throw {\n            type: AuthErrorTypes.UNKNOWN_ERROR,\n            message: error.response.data?.message || 'Erro ao fazer login'\n          };\n      }\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao fazer login'\n      };\n    }\n  }\n};\n\n/**\n * Verifica a autenticação do usuário\n * @returns {Promise<Object>} Dados do usuário autenticado\n * @throws {Object} Erro personalizado\n */\nexport const checkAuth = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw {\n        type: AuthErrorTypes.AUTH_ERROR,\n        message: 'Nenhum token encontrado'\n      };\n    }\n    \n    const { data } = await api.get('/auth/check', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    \n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Check Auth Error:', error);\n    \n    // Remove o token se for inválido\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      throw {\n        type: AuthErrorTypes.SESSION_EXPIRED,\n        message: 'Sessão expirada'\n      };\n    }\n    \n    if (error.response) {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.response.data?.message || 'Erro ao verificar autenticação'\n      };\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.message || 'Erro desconhecido ao verificar autenticação'\n      };\n    }\n  }\n};\n\n/**\n * Realiza o logout do usuário\n * @returns {Promise<Object>} Resultado do logout\n * @throws {Object} Erro personalizado\n */\nexport const logout = async () => {\n  try {\n    // Tenta fazer logout no servidor\n    await api.post('/auth/logout');\n    \n    // Remove os dados locais independente do resultado\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('[Auth Service] Logout Error:', error);\n    \n    // Mesmo com erro, remove os dados locais\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    \n    if (error.response) {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.response.data?.message || 'Erro ao fazer logout'\n      };\n    } else if (error.request) {\n      throw {\n        type: AuthErrorTypes.NETWORK_ERROR,\n        message: 'Sem resposta do servidor'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao fazer logout'\n      };\n    }\n  }\n};\n\n/**\n * Solicita redefinição de senha\n * @param {string} email - Email do usuário\n * @returns {Promise<Object>} Resultado da solicitação\n * @throws {Object} Erro personalizado\n */\nexport const requestPasswordReset = async (email) => {\n  try {\n    const { data } = await api.post('/auth/request-password-reset', { email });\n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Password Reset Request Error:', error);\n    \n    if (error.response) {\n      throw {\n        type: error.response.status === 404 \n          ? AuthErrorTypes.AUTH_ERROR \n          : AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.response.data?.message || 'Erro ao solicitar redefinição de senha'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao solicitar redefinição de senha'\n      };\n    }\n  }\n};\n\n/**\n * Redefine a senha do usuário\n * @param {string} token - Token de redefinição\n * @param {string} newPassword - Nova senha\n * @returns {Promise<Object>} Resultado da redefinição\n * @throws {Object} Erro personalizado\n */\nexport const resetPassword = async (token, newPassword) => {\n  try {\n    const { data } = await api.post('/auth/reset-password', { token, newPassword });\n    return data;\n  } catch (error) {\n    console.error('[Auth Service] Password Reset Error:', error);\n    \n    if (error.response) {\n      throw {\n        type: error.response.status === 400 || error.response.status === 401\n          ? AuthErrorTypes.AUTH_ERROR \n          : AuthErrorTypes.UNKNOWN_ERROR,\n        message: error.response.data?.message || 'Erro ao redefinir senha'\n      };\n    } else {\n      throw {\n        type: AuthErrorTypes.UNKNOWN_ERROR,\n        message: 'Erro desconhecido ao redefinir senha'\n      };\n    }\n  }\n};\n\nexport default {\n  register,\n  login,\n  checkAuth,\n  logout,\n  requestPasswordReset,\n  resetPassword,\n  AuthErrorTypes // Exporta os tipos de erro para uso externo\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}