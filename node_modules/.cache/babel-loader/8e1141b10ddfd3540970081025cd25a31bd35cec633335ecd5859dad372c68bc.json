{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{Capacitor}from'@capacitor/core';import{StatusBar,Style}from'@capacitor/status-bar';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState(()=>{// Prioriza o tema dark para mobile\nif(Capacitor.isNativePlatform()){return'dark';}// Para web, verifica preferência salva ou usa dark como padrão\nconst savedTheme=localStorage.getItem('theme');const systemPrefersDark=window.matchMedia&&window.matchMedia('(prefers-color-scheme: dark)').matches;return savedTheme||(systemPrefersDark?'dark':'light');});const toggleTheme=()=>{setTheme(prevTheme=>{const newTheme=prevTheme==='light'?'dark':'light';localStorage.setItem('theme',newTheme);// Atualiza a status bar no Android\nif(Capacitor.isNativePlatform()){StatusBar.setStyle({style:newTheme==='dark'?Style.Dark:Style.Light});}return newTheme;});};// Aplica o tema ao body e configura a Status Bar\nuseEffect(()=>{document.body.setAttribute('data-theme',theme);if(Capacitor.isNativePlatform()){// Configurações específicas para Android\nStatusBar.setBackgroundColor({color:theme==='dark'?'#121212':'#ffffff'});StatusBar.setStyle({style:theme==='dark'?Style.Dark:Style.Light});}},[theme]);return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,toggleTheme},children:children});};export const useTheme=()=>{const context=useContext(ThemeContext);if(!context){throw new Error('useTheme must be used within a ThemeProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Capacitor","StatusBar","Style","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","theme","setTheme","isNativePlatform","savedTheme","localStorage","getItem","systemPrefersDark","window","matchMedia","matches","toggleTheme","prevTheme","newTheme","setItem","setStyle","style","Dark","Light","document","body","setAttribute","setBackgroundColor","color","Provider","value","useTheme","context","Error"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/jokerstar-apk/src/styles/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { StatusBar, Style } from '@capacitor/status-bar';\n\nconst ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(() => {\n    // Prioriza o tema dark para mobile\n    if (Capacitor.isNativePlatform()) {\n      return 'dark';\n    }\n    \n    // Para web, verifica preferência salva ou usa dark como padrão\n    const savedTheme = localStorage.getItem('theme');\n    const systemPrefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    \n    return savedTheme || (systemPrefersDark ? 'dark' : 'light');\n  });\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => {\n      const newTheme = prevTheme === 'light' ? 'dark' : 'light';\n      localStorage.setItem('theme', newTheme);\n      \n      // Atualiza a status bar no Android\n      if (Capacitor.isNativePlatform()) {\n        StatusBar.setStyle({\n          style: newTheme === 'dark' ? Style.Dark : Style.Light\n        });\n      }\n      \n      return newTheme;\n    });\n  };\n\n  // Aplica o tema ao body e configura a Status Bar\n  useEffect(() => {\n    document.body.setAttribute('data-theme', theme);\n    \n    if (Capacitor.isNativePlatform()) {\n      // Configurações específicas para Android\n      StatusBar.setBackgroundColor({ \n        color: theme === 'dark' ? '#121212' : '#ffffff'\n      });\n      StatusBar.setStyle({\n        style: theme === 'dark' ? Style.Dark : Style.Light\n      });\n    }\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,SAAS,KAAQ,iBAAiB,CAC3C,OAASC,SAAS,CAAEC,KAAK,KAAQ,uBAAuB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEzD,KAAM,CAAAC,YAAY,cAAGT,aAAa,CAAC,CAAC,CAEpC,MAAO,MAAM,CAAAU,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,IAAM,CACvC;AACA,GAAIE,SAAS,CAACW,gBAAgB,CAAC,CAAC,CAAE,CAChC,MAAO,MAAM,CACf,CAEA;AACA,KAAM,CAAAC,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAChD,KAAM,CAAAC,iBAAiB,CAAGC,MAAM,CAACC,UAAU,EAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,CAExG,MAAO,CAAAN,UAAU,GAAKG,iBAAiB,CAAG,MAAM,CAAG,OAAO,CAAC,CAC7D,CAAC,CAAC,CAEF,KAAM,CAAAI,WAAW,CAAGA,CAAA,GAAM,CACxBT,QAAQ,CAACU,SAAS,EAAI,CACpB,KAAM,CAAAC,QAAQ,CAAGD,SAAS,GAAK,OAAO,CAAG,MAAM,CAAG,OAAO,CACzDP,YAAY,CAACS,OAAO,CAAC,OAAO,CAAED,QAAQ,CAAC,CAEvC;AACA,GAAIrB,SAAS,CAACW,gBAAgB,CAAC,CAAC,CAAE,CAChCV,SAAS,CAACsB,QAAQ,CAAC,CACjBC,KAAK,CAAEH,QAAQ,GAAK,MAAM,CAAGnB,KAAK,CAACuB,IAAI,CAAGvB,KAAK,CAACwB,KAClD,CAAC,CAAC,CACJ,CAEA,MAAO,CAAAL,QAAQ,CACjB,CAAC,CAAC,CACJ,CAAC,CAED;AACAtB,SAAS,CAAC,IAAM,CACd4B,QAAQ,CAACC,IAAI,CAACC,YAAY,CAAC,YAAY,CAAEpB,KAAK,CAAC,CAE/C,GAAIT,SAAS,CAACW,gBAAgB,CAAC,CAAC,CAAE,CAChC;AACAV,SAAS,CAAC6B,kBAAkB,CAAC,CAC3BC,KAAK,CAAEtB,KAAK,GAAK,MAAM,CAAG,SAAS,CAAG,SACxC,CAAC,CAAC,CACFR,SAAS,CAACsB,QAAQ,CAAC,CACjBC,KAAK,CAAEf,KAAK,GAAK,MAAM,CAAGP,KAAK,CAACuB,IAAI,CAAGvB,KAAK,CAACwB,KAC/C,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAACjB,KAAK,CAAC,CAAC,CAEX,mBACEL,IAAA,CAACC,YAAY,CAAC2B,QAAQ,EAACC,KAAK,CAAE,CAAExB,KAAK,CAAEU,WAAY,CAAE,CAAAX,QAAA,CAClDA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED,MAAO,MAAM,CAAA0B,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAGtC,UAAU,CAACQ,YAAY,CAAC,CACxC,GAAI,CAAC8B,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}