{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\client2\\\\src\\\\pages\\\\FeedPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport UploadButton from '../components/UploadButton';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { FiRefreshCw } from 'react-icons/fi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: var(--background);\n`;\n_c = FeedContainer;\nconst FeedHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n_c2 = FeedHeader;\nconst FeedTitle = styled.h1`\n  font-size: 24px;\n  color: var(--text);\n`;\n_c3 = FeedTitle;\nconst RefreshButton = styled.button`\n  background: var(--card-bg);\n  border: 1px solid var(--border-light);\n  padding: 8px 16px;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 14px;\n  color: var(--text);\n  transition: var(--transition);\n  \n  &:hover {\n    background: var(--border-light);\n    box-shadow: var(--shadow-hover);\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n`;\n_c4 = RefreshButton;\nconst RepostButton = styled.button`\n  background: var(--card-bg);\n  border: 1px solid var(--border-light);\n  padding: 8px 16px;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  margin-top: 8px;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 14px;\n  color: var(--text);\n  transition: var(--transition);\n  \n  &:hover {\n    background: var(--border-light);\n    box-shadow: var(--shadow-hover);\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n`;\n_c5 = RepostButton;\nconst EmptyFeed = styled.div`\n  text-align: center;\n  padding: 40px 20px;\n  background: var(--card-bg);\n  border-radius: var(--radius-md);\n  box-shadow: var(--shadow);\n  color: var(--text);\n`;\n_c6 = EmptyFeed;\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 40px;\n  font-size: 18px;\n  color: var(--text-light);\n`;\n_c7 = LoadingIndicator;\nconst ErrorMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  background: var(--card-bg);\n  color: var(--dislike-color);\n  border-radius: var(--radius-md);\n  margin: 20px 0;\n  box-shadow: var(--shadow);\n  border: 1px solid var(--border-light);\n`;\n_c8 = ErrorMessage;\nconst FeedPage = () => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [deletingMemeId, setDeletingMemeId] = useState(null);\n  const {\n    user,\n    logout\n  } = useAuth();\n  const navigate = useNavigate();\n  const fetchMemes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const {\n        data\n      } = await api.get('/memes');\n\n      // Filtra memes deletados no frontend (backup caso o backend não filtre)\n      const validMemes = Array.isArray(data === null || data === void 0 ? void 0 : data.data) ? data.data.filter(meme => !meme.isDeleted) : [];\n      setMemes(validMemes);\n    } catch (error) {\n      var _error$response;\n      console.error('Erro ao carregar feed:', error);\n      setError('Erro ao carregar o feed. Tente novamente mais tarde.');\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        await logout();\n        navigate('/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleMemeDeleted = deletedMemeId => {\n    // Remove o meme deletado da lista local\n    setMemes(prevMemes => prevMemes.filter(meme => meme._id !== deletedMemeId));\n    setDeletingMemeId(null);\n  };\n  const handleRepost = async memeId => {\n    try {\n      await api.post(`/memes/${memeId}/repost`);\n      await fetchMemes(); // Atualiza a lista após repostar\n    } catch (error) {\n      var _error$response2;\n      console.error('Erro ao repostar:', error);\n      setError('Erro ao repostar');\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n        await logout();\n        navigate('/login');\n      }\n    }\n  };\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(FeedContainer, {\n      children: /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Carregando memes...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(FeedContainer, {\n      children: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: [error, /*#__PURE__*/_jsxDEV(RefreshButton, {\n          onClick: fetchMemes,\n          children: [/*#__PURE__*/_jsxDEV(FiRefreshCw, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), \" Tentar novamente\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(FeedContainer, {\n    children: [/*#__PURE__*/_jsxDEV(FeedHeader, {\n      children: [/*#__PURE__*/_jsxDEV(FeedTitle, {\n        children: \"Feed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(UploadButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RefreshButton, {\n          onClick: fetchMemes,\n          children: [/*#__PURE__*/_jsxDEV(FiRefreshCw, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), \" Atualizar\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), memes.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyFeed, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Nenhuma postagem encontrada\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Que tal criar a primeira?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(UploadButton, {\n        style: {\n          marginTop: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-list\",\n      children: memes.map(meme => {\n        var _meme$author;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '24px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(MemeCard, {\n            meme: meme,\n            onDelete: handleMemeDeleted,\n            isDeleting: deletingMemeId === meme._id,\n            onStartDelete: () => setDeletingMemeId(meme._id),\n            commentCount: meme.commentCount || 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this), user && user._id !== ((_meme$author = meme.author) === null || _meme$author === void 0 ? void 0 : _meme$author._id) && /*#__PURE__*/_jsxDEV(RepostButton, {\n            onClick: () => handleRepost(meme._id),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uD83D\\uDD01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 19\n            }, this), \" Repostar (\", meme.repostCount || 0, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this)]\n        }, meme._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedPage, \"mU2mQ4u7gwP33qCBumYZeOR4CnY=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c9 = FeedPage;\nexport default FeedPage;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"FeedContainer\");\n$RefreshReg$(_c2, \"FeedHeader\");\n$RefreshReg$(_c3, \"FeedTitle\");\n$RefreshReg$(_c4, \"RefreshButton\");\n$RefreshReg$(_c5, \"RepostButton\");\n$RefreshReg$(_c6, \"EmptyFeed\");\n$RefreshReg$(_c7, \"LoadingIndicator\");\n$RefreshReg$(_c8, \"ErrorMessage\");\n$RefreshReg$(_c9, \"FeedPage\");","map":{"version":3,"names":["React","useState","useEffect","styled","api","MemeCard","UploadButton","useNavigate","useAuth","FiRefreshCw","jsxDEV","_jsxDEV","FeedContainer","div","_c","FeedHeader","_c2","FeedTitle","h1","_c3","RefreshButton","button","_c4","RepostButton","_c5","EmptyFeed","_c6","LoadingIndicator","_c7","ErrorMessage","_c8","FeedPage","_s","memes","setMemes","loading","setLoading","error","setError","deletingMemeId","setDeletingMemeId","user","logout","navigate","fetchMemes","data","get","validMemes","Array","isArray","filter","meme","isDeleted","_error$response","console","response","status","handleMemeDeleted","deletedMemeId","prevMemes","_id","handleRepost","memeId","post","_error$response2","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","style","marginTop","className","map","_meme$author","marginBottom","onDelete","isDeleting","onStartDelete","commentCount","author","repostCount","_c9","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/client2/src/pages/FeedPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport UploadButton from '../components/UploadButton';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { FiRefreshCw } from 'react-icons/fi';\n\nconst FeedContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: var(--background);\n`;\n\nconst FeedHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst FeedTitle = styled.h1`\n  font-size: 24px;\n  color: var(--text);\n`;\n\nconst RefreshButton = styled.button`\n  background: var(--card-bg);\n  border: 1px solid var(--border-light);\n  padding: 8px 16px;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 14px;\n  color: var(--text);\n  transition: var(--transition);\n  \n  &:hover {\n    background: var(--border-light);\n    box-shadow: var(--shadow-hover);\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n`;\n\nconst RepostButton = styled.button`\n  background: var(--card-bg);\n  border: 1px solid var(--border-light);\n  padding: 8px 16px;\n  border-radius: var(--radius-lg);\n  cursor: pointer;\n  margin-top: 8px;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 14px;\n  color: var(--text);\n  transition: var(--transition);\n  \n  &:hover {\n    background: var(--border-light);\n    box-shadow: var(--shadow-hover);\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n`;\n\nconst EmptyFeed = styled.div`\n  text-align: center;\n  padding: 40px 20px;\n  background: var(--card-bg);\n  border-radius: var(--radius-md);\n  box-shadow: var(--shadow);\n  color: var(--text);\n`;\n\nconst LoadingIndicator = styled.div`\n  text-align: center;\n  padding: 40px;\n  font-size: 18px;\n  color: var(--text-light);\n`;\n\nconst ErrorMessage = styled.div`\n  text-align: center;\n  padding: 20px;\n  background: var(--card-bg);\n  color: var(--dislike-color);\n  border-radius: var(--radius-md);\n  margin: 20px 0;\n  box-shadow: var(--shadow);\n  border: 1px solid var(--border-light);\n`;\n\nconst FeedPage = () => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [deletingMemeId, setDeletingMemeId] = useState(null);\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const fetchMemes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { data } = await api.get('/memes');\n      \n      // Filtra memes deletados no frontend (backup caso o backend não filtre)\n      const validMemes = Array.isArray(data?.data) \n        ? data.data.filter(meme => !meme.isDeleted)\n        : [];\n      \n      setMemes(validMemes);\n    } catch (error) {\n      console.error('Erro ao carregar feed:', error);\n      setError('Erro ao carregar o feed. Tente novamente mais tarde.');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMemeDeleted = (deletedMemeId) => {\n    // Remove o meme deletado da lista local\n    setMemes(prevMemes => prevMemes.filter(meme => meme._id !== deletedMemeId));\n    setDeletingMemeId(null);\n  };\n\n  const handleRepost = async (memeId) => {\n    try {\n      await api.post(`/memes/${memeId}/repost`);\n      await fetchMemes(); // Atualiza a lista após repostar\n    } catch (error) {\n      console.error('Erro ao repostar:', error);\n      setError('Erro ao repostar');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n\n  if (loading) {\n    return (\n      <FeedContainer>\n        <LoadingIndicator>Carregando memes...</LoadingIndicator>\n      </FeedContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      <FeedContainer>\n        <ErrorMessage>\n          {error}\n          <RefreshButton onClick={fetchMemes}>\n            <FiRefreshCw /> Tentar novamente\n          </RefreshButton>\n        </ErrorMessage>\n      </FeedContainer>\n    );\n  }\n\n  return (\n    <FeedContainer>\n      <FeedHeader>\n        <FeedTitle>Feed</FeedTitle>\n        <div>\n          <UploadButton />\n          <RefreshButton onClick={fetchMemes}>\n            <FiRefreshCw /> Atualizar\n          </RefreshButton>\n        </div>\n      </FeedHeader>\n      \n      {memes.length === 0 ? (\n        <EmptyFeed>\n          <h3>Nenhuma postagem encontrada</h3>\n          <p>Que tal criar a primeira?</p>\n          <UploadButton style={{ marginTop: '20px' }} />\n        </EmptyFeed>\n      ) : (\n        <div className=\"feed-list\">\n          {memes.map(meme => (\n            <div key={meme._id} style={{ marginBottom: '24px' }}>\n              <MemeCard \n                meme={meme}\n                onDelete={handleMemeDeleted}\n                isDeleting={deletingMemeId === meme._id}\n                onStartDelete={() => setDeletingMemeId(meme._id)}\n                commentCount={meme.commentCount || 0}\n              />\n              {user && user._id !== meme.author?._id && (\n                <RepostButton onClick={() => handleRepost(meme._id)}>\n                  <span>🔁</span> Repostar ({meme.repostCount || 0})\n                </RepostButton>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </FeedContainer>\n  );\n};\n\nexport default FeedPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,GAAG,MAAM,iBAAiB;AACjC,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,WAAW,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,aAAa,GAAGT,MAAM,CAACU,GAAG;AAChC;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,aAAa;AAOnB,MAAMG,UAAU,GAAGZ,MAAM,CAACU,GAAG;AAC7B;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GALID,UAAU;AAOhB,MAAME,SAAS,GAAGd,MAAM,CAACe,EAAE;AAC3B;AACA;AACA,CAAC;AAACC,GAAA,GAHIF,SAAS;AAKf,MAAMG,aAAa,GAAGjB,MAAM,CAACkB,MAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GArBIF,aAAa;AAuBnB,MAAMG,YAAY,GAAGpB,MAAM,CAACkB,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAtBID,YAAY;AAwBlB,MAAME,SAAS,GAAGtB,MAAM,CAACU,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACa,GAAA,GAPID,SAAS;AASf,MAAME,gBAAgB,GAAGxB,MAAM,CAACU,GAAG;AACnC;AACA;AACA;AACA;AACA,CAAC;AAACe,GAAA,GALID,gBAAgB;AAOtB,MAAME,YAAY,GAAG1B,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACiB,GAAA,GATID,YAAY;AAWlB,MAAME,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkC,OAAO,EAAEC,UAAU,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACsC,cAAc,EAAEC,iBAAiB,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM;IAAEwC,IAAI;IAAEC;EAAO,CAAC,GAAGlC,OAAO,CAAC,CAAC;EAClC,MAAMmC,QAAQ,GAAGpC,WAAW,CAAC,CAAC;EAE9B,MAAMqC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACFR,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAM;QAAEO;MAAK,CAAC,GAAG,MAAMzC,GAAG,CAAC0C,GAAG,CAAC,QAAQ,CAAC;;MAExC;MACA,MAAMC,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEA,IAAI,CAAC,GACxCA,IAAI,CAACA,IAAI,CAACK,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACC,SAAS,CAAC,GACzC,EAAE;MAENlB,QAAQ,CAACa,UAAU,CAAC;IACtB,CAAC,CAAC,OAAOV,KAAK,EAAE;MAAA,IAAAgB,eAAA;MACdC,OAAO,CAACjB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CC,QAAQ,CAAC,sDAAsD,CAAC;MAChE,IAAI,EAAAe,eAAA,GAAAhB,KAAK,CAACkB,QAAQ,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,EAAE;QAClC,MAAMd,MAAM,CAAC,CAAC;QACdC,QAAQ,CAAC,QAAQ,CAAC;MACpB;IACF,CAAC,SAAS;MACRP,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMqB,iBAAiB,GAAIC,aAAa,IAAK;IAC3C;IACAxB,QAAQ,CAACyB,SAAS,IAAIA,SAAS,CAACT,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACS,GAAG,KAAKF,aAAa,CAAC,CAAC;IAC3ElB,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAMqB,YAAY,GAAG,MAAOC,MAAM,IAAK;IACrC,IAAI;MACF,MAAM1D,GAAG,CAAC2D,IAAI,CAAC,UAAUD,MAAM,SAAS,CAAC;MACzC,MAAMlB,UAAU,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA,IAAA2B,gBAAA;MACdV,OAAO,CAACjB,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzCC,QAAQ,CAAC,kBAAkB,CAAC;MAC5B,IAAI,EAAA0B,gBAAA,GAAA3B,KAAK,CAACkB,QAAQ,cAAAS,gBAAA,uBAAdA,gBAAA,CAAgBR,MAAM,MAAK,GAAG,EAAE;QAClC,MAAMd,MAAM,CAAC,CAAC;QACdC,QAAQ,CAAC,QAAQ,CAAC;MACpB;IACF;EACF,CAAC;EAEDzC,SAAS,CAAC,MAAM;IACd0C,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIT,OAAO,EAAE;IACX,oBACExB,OAAA,CAACC,aAAa;MAAAqD,QAAA,eACZtD,OAAA,CAACgB,gBAAgB;QAAAsC,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC;EAEpB;EAEA,IAAIhC,KAAK,EAAE;IACT,oBACE1B,OAAA,CAACC,aAAa;MAAAqD,QAAA,eACZtD,OAAA,CAACkB,YAAY;QAAAoC,QAAA,GACV5B,KAAK,eACN1B,OAAA,CAACS,aAAa;UAACkD,OAAO,EAAE1B,UAAW;UAAAqB,QAAA,gBACjCtD,OAAA,CAACF,WAAW;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,qBACjB;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAEpB;EAEA,oBACE1D,OAAA,CAACC,aAAa;IAAAqD,QAAA,gBACZtD,OAAA,CAACI,UAAU;MAAAkD,QAAA,gBACTtD,OAAA,CAACM,SAAS;QAAAgD,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC,eAC3B1D,OAAA;QAAAsD,QAAA,gBACEtD,OAAA,CAACL,YAAY;UAAA4D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChB1D,OAAA,CAACS,aAAa;UAACkD,OAAO,EAAE1B,UAAW;UAAAqB,QAAA,gBACjCtD,OAAA,CAACF,WAAW;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,cACjB;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,EAEZpC,KAAK,CAACsC,MAAM,KAAK,CAAC,gBACjB5D,OAAA,CAACc,SAAS;MAAAwC,QAAA,gBACRtD,OAAA;QAAAsD,QAAA,EAAI;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpC1D,OAAA;QAAAsD,QAAA,EAAG;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAChC1D,OAAA,CAACL,YAAY;QAACkE,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAO;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,gBAEZ1D,OAAA;MAAK+D,SAAS,EAAC,WAAW;MAAAT,QAAA,EACvBhC,KAAK,CAAC0C,GAAG,CAACxB,IAAI;QAAA,IAAAyB,YAAA;QAAA,oBACbjE,OAAA;UAAoB6D,KAAK,EAAE;YAAEK,YAAY,EAAE;UAAO,CAAE;UAAAZ,QAAA,gBAClDtD,OAAA,CAACN,QAAQ;YACP8C,IAAI,EAAEA,IAAK;YACX2B,QAAQ,EAAErB,iBAAkB;YAC5BsB,UAAU,EAAExC,cAAc,KAAKY,IAAI,CAACS,GAAI;YACxCoB,aAAa,EAAEA,CAAA,KAAMxC,iBAAiB,CAACW,IAAI,CAACS,GAAG,CAAE;YACjDqB,YAAY,EAAE9B,IAAI,CAAC8B,YAAY,IAAI;UAAE;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,EACD5B,IAAI,IAAIA,IAAI,CAACmB,GAAG,OAAAgB,YAAA,GAAKzB,IAAI,CAAC+B,MAAM,cAAAN,YAAA,uBAAXA,YAAA,CAAahB,GAAG,kBACpCjD,OAAA,CAACY,YAAY;YAAC+C,OAAO,EAAEA,CAAA,KAAMT,YAAY,CAACV,IAAI,CAACS,GAAG,CAAE;YAAAK,QAAA,gBAClDtD,OAAA;cAAAsD,QAAA,EAAM;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAAW,EAAClB,IAAI,CAACgC,WAAW,IAAI,CAAC,EAAC,GACnD;UAAA;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CACf;QAAA,GAZOlB,IAAI,CAACS,GAAG;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAab,CAAC;MAAA,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAEpB,CAAC;AAACrC,EAAA,CArHID,QAAQ;EAAA,QAKavB,OAAO,EACfD,WAAW;AAAA;AAAA6E,GAAA,GANxBrD,QAAQ;AAuHd,eAAeA,QAAQ;AAAC,IAAAjB,EAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAsD,GAAA;AAAAC,YAAA,CAAAvE,EAAA;AAAAuE,YAAA,CAAArE,GAAA;AAAAqE,YAAA,CAAAlE,GAAA;AAAAkE,YAAA,CAAA/D,GAAA;AAAA+D,YAAA,CAAA7D,GAAA;AAAA6D,YAAA,CAAA3D,GAAA;AAAA2D,YAAA,CAAAzD,GAAA;AAAAyD,YAAA,CAAAvD,GAAA;AAAAuD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}