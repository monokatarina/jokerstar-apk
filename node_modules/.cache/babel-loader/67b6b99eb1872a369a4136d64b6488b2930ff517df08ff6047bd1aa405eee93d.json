{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import api from'../services/api';import MemeCard from'../components/MemeCard';import UploadButton from'../components/UploadButton';import{useNavigate}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import{FiRefreshCw}from'react-icons/fi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FeedContainer=styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: var(--background);\n  overflow-x: auto;\n  overflow-y: hidden;\n  scroll-snap-type: x mandatory;\n  scroll-behavior: smooth;\n  -webkit-overflow-scrolling: touch;\n  touch-action: pan-x;\n  overscroll-behavior-x: contain;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;const FeedGrid=styled.div`\n  display: inline-flex;\n  height: 100%;\n  padding-left: 8px;\n`;const MemeWrapper=styled.div`\n  position: relative;\n  width: calc(100vw - 16px);\n  height: calc(100vh - 16px);\n  margin: 16px 8px;\n  scroll-snap-align: center;\n  flex: 0 0 auto;\n  overflow: hidden;\n  border-radius: 12px;\n  background: var(--card-bg);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n  transition: transform 0.2s ease;\n\n  &:not(.active) {\n    opacity: 0.9;\n    transform: scale(0.98);\n  }\n\n  &.active {\n    opacity: 1;\n    transform: scale(1);\n  }\n`;const EmptyFeed=styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: calc(100vw - 16px);\n  margin: 0 8px;\n  text-align: center;\n  color: var(--text);\n  scroll-snap-align: center;\n  background: var(--card-bg);\n  border-radius: 12px;\n\n  h3 {\n    font-size: 1.5rem;\n    margin-bottom: 16px;\n  }\n\n  p {\n    color: var(--text-light);\n    margin-bottom: 24px;\n  }\n`;const LoadingIndicator=styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: calc(100vw - 16px);\n  margin: 0 8px;\n  color: var(--text-light);\n  scroll-snap-align: center;\n  background: var(--card-bg);\n  border-radius: 12px;\n`;const ErrorMessage=styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: calc(100vw - 16px);\n  margin: 0 8px;\n  color: var(--danger);\n  padding: 20px;\n  scroll-snap-align: center;\n  background: var(--card-bg);\n  border-radius: 12px;\n\n  button {\n    margin-top: 20px;\n    padding: 12px 24px;\n    border-radius: 24px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: 500;\n  }\n`;const FeedPage=()=>{const[memes,setMemes]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[currentIndex,setCurrentIndex]=useState(0);const feedContainerRef=useRef(null);const scrollTimeoutRef=useRef(null);const isScrollingRef=useRef(false);const{logout}=useAuth();const navigate=useNavigate();const fetchMemes=async()=>{try{setLoading(true);setError(null);const{data}=await api.get('/memes');const validMemes=Array.isArray(data===null||data===void 0?void 0:data.data)?data.data.filter(meme=>!meme.isDeleted):[];setMemes(validMemes);}catch(error){var _error$response;console.error('Erro ao carregar feed:',error);setError('Erro ao carregar o feed. Tente novamente mais tarde.');if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){await logout();navigate('/login');}}finally{setLoading(false);}};const scrollToIndex=index=>{if(feedContainerRef.current&&!isScrollingRef.current){isScrollingRef.current=true;const width=feedContainerRef.current.offsetWidth;feedContainerRef.current.scrollTo({left:width*index,behavior:'smooth'});// Reset the flag after scroll completes\nsetTimeout(()=>{isScrollingRef.current=false;},500);}};const handleScroll=()=>{if(isScrollingRef.current)return;if(scrollTimeoutRef.current){clearTimeout(scrollTimeoutRef.current);}scrollTimeoutRef.current=setTimeout(()=>{if(feedContainerRef.current){const scrollLeft=feedContainerRef.current.scrollLeft;const width=feedContainerRef.current.offsetWidth;const index=Math.round(scrollLeft/width);if(index!==currentIndex){setCurrentIndex(index);scrollToIndex(index);}}},100);};const handleMemeDeleted=deletedMemeId=>{var _memes$currentIndex;setMemes(prev=>prev.filter(meme=>meme._id!==deletedMemeId));// Adjust current index if we deleted the current meme\nif(((_memes$currentIndex=memes[currentIndex])===null||_memes$currentIndex===void 0?void 0:_memes$currentIndex._id)===deletedMemeId){const newIndex=Math.min(currentIndex,memes.length-2);setCurrentIndex(newIndex>=0?newIndex:0);}};useEffect(()=>{const container=feedContainerRef.current;if(container){container.addEventListener('scroll',handleScroll);return()=>container.removeEventListener('scroll',handleScroll);}},[currentIndex]);useEffect(()=>{fetchMemes();},[]);useEffect(()=>{// Scroll to current index when memes change\nif(memes.length>0){scrollToIndex(currentIndex);}},[memes,currentIndex]);if(loading){return/*#__PURE__*/_jsx(FeedContainer,{ref:feedContainerRef,children:/*#__PURE__*/_jsx(LoadingIndicator,{children:\"Carregando...\"})});}if(error){return/*#__PURE__*/_jsx(FeedContainer,{ref:feedContainerRef,children:/*#__PURE__*/_jsxs(ErrorMessage,{children:[error,/*#__PURE__*/_jsxs(\"button\",{onClick:fetchMemes,children:[/*#__PURE__*/_jsx(FiRefreshCw,{}),\" Tentar novamente\"]})]})});}return/*#__PURE__*/_jsx(FeedContainer,{ref:feedContainerRef,children:/*#__PURE__*/_jsx(FeedGrid,{children:memes.length===0?/*#__PURE__*/_jsxs(EmptyFeed,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Nenhum meme encontrado\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Seja o primeiro a compartilhar sua cria\\xE7\\xE3o!\"}),/*#__PURE__*/_jsx(UploadButton,{size:\"large\"})]}):memes.map((meme,index)=>/*#__PURE__*/_jsx(MemeWrapper,{className:index===currentIndex?'active':'',children:/*#__PURE__*/_jsx(MemeCard,{meme:meme,onDelete:handleMemeDeleted,onCommentCountChange:newCount=>{setMemes(prev=>prev.map(m=>m._id===meme._id?{...m,commentCount:newCount}:m));},isSquareView:false,isActive:index===currentIndex,style:{width:'100%',height:'100%'}})},meme._id))})});};export default FeedPage;","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","api","MemeCard","UploadButton","useNavigate","useAuth","FiRefreshCw","jsx","_jsx","jsxs","_jsxs","FeedContainer","div","FeedGrid","MemeWrapper","EmptyFeed","LoadingIndicator","ErrorMessage","FeedPage","memes","setMemes","loading","setLoading","error","setError","currentIndex","setCurrentIndex","feedContainerRef","scrollTimeoutRef","isScrollingRef","logout","navigate","fetchMemes","data","get","validMemes","Array","isArray","filter","meme","isDeleted","_error$response","console","response","status","scrollToIndex","index","current","width","offsetWidth","scrollTo","left","behavior","setTimeout","handleScroll","clearTimeout","scrollLeft","Math","round","handleMemeDeleted","deletedMemeId","_memes$currentIndex","prev","_id","newIndex","min","length","container","addEventListener","removeEventListener","ref","children","onClick","size","map","className","onDelete","onCommentCountChange","newCount","m","commentCount","isSquareView","isActive","style","height"],"sources":["C:/Users/drrod/OneDrive/√Årea de Trabalho/jokersta_apk/src/pages/FeedPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport UploadButton from '../components/UploadButton';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { FiRefreshCw } from 'react-icons/fi';\n\nconst FeedContainer = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: var(--background);\n  overflow-x: auto;\n  overflow-y: hidden;\n  scroll-snap-type: x mandatory;\n  scroll-behavior: smooth;\n  -webkit-overflow-scrolling: touch;\n  touch-action: pan-x;\n  overscroll-behavior-x: contain;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst FeedGrid = styled.div`\n  display: inline-flex;\n  height: 100%;\n  padding-left: 8px;\n`;\n\nconst MemeWrapper = styled.div`\n  position: relative;\n  width: calc(100vw - 16px);\n  height: calc(100vh - 16px);\n  margin: 16px 8px;\n  scroll-snap-align: center;\n  flex: 0 0 auto;\n  overflow: hidden;\n  border-radius: 12px;\n  background: var(--card-bg);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n  transition: transform 0.2s ease;\n\n  &:not(.active) {\n    opacity: 0.9;\n    transform: scale(0.98);\n  }\n\n  &.active {\n    opacity: 1;\n    transform: scale(1);\n  }\n`;\n\nconst EmptyFeed = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: calc(100vw - 16px);\n  margin: 0 8px;\n  text-align: center;\n  color: var(--text);\n  scroll-snap-align: center;\n  background: var(--card-bg);\n  border-radius: 12px;\n\n  h3 {\n    font-size: 1.5rem;\n    margin-bottom: 16px;\n  }\n\n  p {\n    color: var(--text-light);\n    margin-bottom: 24px;\n  }\n`;\n\nconst LoadingIndicator = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: calc(100vw - 16px);\n  margin: 0 8px;\n  color: var(--text-light);\n  scroll-snap-align: center;\n  background: var(--card-bg);\n  border-radius: 12px;\n`;\n\nconst ErrorMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: calc(100vw - 16px);\n  margin: 0 8px;\n  color: var(--danger);\n  padding: 20px;\n  scroll-snap-align: center;\n  background: var(--card-bg);\n  border-radius: 12px;\n\n  button {\n    margin-top: 20px;\n    padding: 12px 24px;\n    border-radius: 24px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: 500;\n  }\n`;\n\nconst FeedPage = () => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const feedContainerRef = useRef(null);\n  const scrollTimeoutRef = useRef(null);\n  const isScrollingRef = useRef(false);\n  const { logout } = useAuth();\n  const navigate = useNavigate();\n\n  const fetchMemes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { data } = await api.get('/memes');\n      const validMemes = Array.isArray(data?.data)\n        ? data.data.filter(meme => !meme.isDeleted)\n        : [];\n      setMemes(validMemes);\n    } catch (error) {\n      console.error('Erro ao carregar feed:', error);\n      setError('Erro ao carregar o feed. Tente novamente mais tarde.');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const scrollToIndex = (index) => {\n    if (feedContainerRef.current && !isScrollingRef.current) {\n      isScrollingRef.current = true;\n      const width = feedContainerRef.current.offsetWidth;\n      feedContainerRef.current.scrollTo({\n        left: width * index,\n        behavior: 'smooth',\n      });\n      \n      // Reset the flag after scroll completes\n      setTimeout(() => {\n        isScrollingRef.current = false;\n      }, 500);\n    }\n  };\n\n  const handleScroll = () => {\n    if (isScrollingRef.current) return;\n\n    if (scrollTimeoutRef.current) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n\n    scrollTimeoutRef.current = setTimeout(() => {\n      if (feedContainerRef.current) {\n        const scrollLeft = feedContainerRef.current.scrollLeft;\n        const width = feedContainerRef.current.offsetWidth;\n        const index = Math.round(scrollLeft / width);\n\n        if (index !== currentIndex) {\n          setCurrentIndex(index);\n          scrollToIndex(index);\n        }\n      }\n    }, 100);\n  };\n\n  const handleMemeDeleted = (deletedMemeId) => {\n    setMemes(prev => prev.filter(meme => meme._id !== deletedMemeId));\n    \n    // Adjust current index if we deleted the current meme\n    if (memes[currentIndex]?._id === deletedMemeId) {\n      const newIndex = Math.min(currentIndex, memes.length - 2);\n      setCurrentIndex(newIndex >= 0 ? newIndex : 0);\n    }\n  };\n\n  useEffect(() => {\n    const container = feedContainerRef.current;\n    if (container) {\n      container.addEventListener('scroll', handleScroll);\n      return () => container.removeEventListener('scroll', handleScroll);\n    }\n  }, [currentIndex]);\n\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n\n  useEffect(() => {\n    // Scroll to current index when memes change\n    if (memes.length > 0) {\n      scrollToIndex(currentIndex);\n    }\n  }, [memes, currentIndex]);\n\n  if (loading) {\n    return (\n      <FeedContainer ref={feedContainerRef}>\n        <LoadingIndicator>Carregando...</LoadingIndicator>\n      </FeedContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      <FeedContainer ref={feedContainerRef}>\n        <ErrorMessage>\n          {error}\n          <button onClick={fetchMemes}>\n            <FiRefreshCw /> Tentar novamente\n          </button>\n        </ErrorMessage>\n      </FeedContainer>\n    );\n  }\n\n  return (\n    <FeedContainer ref={feedContainerRef}>\n      <FeedGrid>\n        {memes.length === 0 ? (\n          <EmptyFeed>\n            <h3>Nenhum meme encontrado</h3>\n            <p>Seja o primeiro a compartilhar sua cria√ß√£o!</p>\n            <UploadButton size=\"large\" />\n          </EmptyFeed>\n        ) : (\n          memes.map((meme, index) => (\n            <MemeWrapper\n              key={meme._id}\n              className={index === currentIndex ? 'active' : ''}\n            >\n              <MemeCard\n                meme={meme}\n                onDelete={handleMemeDeleted}\n                onCommentCountChange={(newCount) => {\n                  setMemes(prev =>\n                    prev.map(m =>\n                      m._id === meme._id ? { ...m, commentCount: newCount } : m\n                    )\n                  );\n                }}\n                isSquareView={false}\n                isActive={index === currentIndex}\n                style={{ width: '100%', height: '100%' }}\n              />\n            </MemeWrapper>\n          ))\n        )}\n      </FeedGrid>\n    </FeedContainer>\n  );\n};\n\nexport default FeedPage;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,GAAG,KAAM,iBAAiB,CACjC,MAAO,CAAAC,QAAQ,KAAM,wBAAwB,CAC7C,MAAO,CAAAC,YAAY,KAAM,4BAA4B,CACrD,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,OAAO,KAAQ,yBAAyB,CACjD,OAASC,WAAW,KAAQ,gBAAgB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE7C,KAAM,CAAAC,aAAa,CAAGX,MAAM,CAACY,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAGb,MAAM,CAACY,GAAG;AAC3B;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAE,WAAW,CAAGd,MAAM,CAACY,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAG,SAAS,CAAGf,MAAM,CAACY,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAI,gBAAgB,CAAGhB,MAAM,CAACY,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAK,YAAY,CAAGjB,MAAM,CAACY,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,KAAM,CAAAM,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAACC,KAAK,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}