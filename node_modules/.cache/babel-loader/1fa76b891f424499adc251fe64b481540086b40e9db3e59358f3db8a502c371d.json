{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\client2\\\\src\\\\components\\\\profile\\\\UserLikes.jsx\",\n  _s = $RefreshSig$();\n// src/components/profile/UserLikes.jsx\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../../services/api';\nimport MemeThumbnail from '../MemeThumbnail';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n`;\n_c = MemeGrid;\nconst EmptyMessage = styled.div`\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 40px;\n  color: var(--text-light);\n  font-size: 1.1rem;\n`;\n_c2 = EmptyMessage;\nconst UserLikes = ({\n  userId\n}) => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const fetchLikedMemes = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const {\n          data\n        } = await api.get(`/users/${userId}/liked-memes`);\n\n        // Filtro no frontend como camada adicional de segurança\n        const validMemes = Array.isArray(data) ? data.filter(meme => {\n          // Verifica se o meme existe e não está deletado\n          const isNotDeleted = !meme.isDeleted;\n          // Verifica se o autor não deletou sua conta\n          const hasValidAuthor = meme.author && !meme.author.isDeleted;\n          return isNotDeleted && hasValidAuthor;\n        }) : [];\n        setMemes(validMemes);\n      } catch (error) {\n        var _error$response;\n        console.error('Error fetching liked memes:', error);\n        setError('Failed to load liked memes');\n        if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n          // Tratamento para token inválido/não autorizado\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchLikedMemes();\n  }, [userId, user]); // Adicionei user como dependência para recarregar se o usuário mudar\n\n  const handleMemeDeleted = deletedMemeId => {\n    // Atualização otimista - remove o meme da lista imediatamente\n    setMemes(prev => prev.filter(m => m._id !== deletedMemeId));\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(EmptyMessage, {\n    children: \"Loading liked memes...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(EmptyMessage, {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: memes.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyMessage, {\n      children: userId === (user === null || user === void 0 ? void 0 : user._id) ? \"You haven't liked any memes yet\" : \"This user hasn't liked any memes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(MemeGrid, {\n      children: memes.map(meme => /*#__PURE__*/_jsxDEV(MemeThumbnail, {\n        meme: meme,\n        onDelete: handleMemeDeleted // Passa a função de deleção\n      }, meme._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(UserLikes, \"bSgrCTGHoxdykImX2vBG7fSITHk=\", false, function () {\n  return [useAuth];\n});\n_c3 = UserLikes;\nexport default UserLikes;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MemeGrid\");\n$RefreshReg$(_c2, \"EmptyMessage\");\n$RefreshReg$(_c3, \"UserLikes\");","map":{"version":3,"names":["useState","useEffect","styled","api","MemeThumbnail","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","MemeGrid","div","_c","EmptyMessage","_c2","UserLikes","userId","_s","memes","setMemes","loading","setLoading","error","setError","user","fetchLikedMemes","data","get","validMemes","Array","isArray","filter","meme","isNotDeleted","isDeleted","hasValidAuthor","author","_error$response","console","response","status","handleMemeDeleted","deletedMemeId","prev","m","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","onDelete","_c3","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/client2/src/components/profile/UserLikes.jsx"],"sourcesContent":["// src/components/profile/UserLikes.jsx\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../../services/api';\nimport MemeThumbnail from '../MemeThumbnail';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst MemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n`;\n\nconst EmptyMessage = styled.div`\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 40px;\n  color: var(--text-light);\n  font-size: 1.1rem;\n`;\n\nconst UserLikes = ({ userId }) => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    const fetchLikedMemes = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const { data } = await api.get(`/users/${userId}/liked-memes`);\n        \n        // Filtro no frontend como camada adicional de segurança\n        const validMemes = Array.isArray(data) \n          ? data.filter(meme => {\n              // Verifica se o meme existe e não está deletado\n              const isNotDeleted = !meme.isDeleted;\n              // Verifica se o autor não deletou sua conta\n              const hasValidAuthor = meme.author && !meme.author.isDeleted;\n              return isNotDeleted && hasValidAuthor;\n            })\n          : [];\n        \n        setMemes(validMemes);\n      } catch (error) {\n        console.error('Error fetching liked memes:', error);\n        setError('Failed to load liked memes');\n        if (error.response?.status === 401) {\n          // Tratamento para token inválido/não autorizado\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchLikedMemes();\n  }, [userId, user]); // Adicionei user como dependência para recarregar se o usuário mudar\n\n  const handleMemeDeleted = (deletedMemeId) => {\n    // Atualização otimista - remove o meme da lista imediatamente\n    setMemes(prev => prev.filter(m => m._id !== deletedMemeId));\n  };\n\n  if (loading) return <EmptyMessage>Loading liked memes...</EmptyMessage>;\n  if (error) return <EmptyMessage>{error}</EmptyMessage>;\n\n  return (\n    <>\n      {memes.length === 0 ? (\n        <EmptyMessage>\n          {userId === user?._id \n            ? \"You haven't liked any memes yet\" \n            : \"This user hasn't liked any memes\"}\n        </EmptyMessage>\n      ) : (\n        <MemeGrid>\n          {memes.map(meme => (\n            <MemeThumbnail \n              key={meme._id} \n              meme={meme}\n              onDelete={handleMemeDeleted} // Passa a função de deleção\n            />\n          ))}\n        </MemeGrid>\n      )}\n    </>\n  );\n};\n\nexport default UserLikes;"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,GAAG,MAAM,oBAAoB;AACpC,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,SAASC,OAAO,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErD,MAAMC,QAAQ,GAAGR,MAAM,CAACS,GAAG;AAC3B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,QAAQ;AAOd,MAAMG,YAAY,GAAGX,MAAM,CAACS,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GANID,YAAY;AAQlB,MAAME,SAAS,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM;IAAEwB;EAAK,CAAC,GAAGnB,OAAO,CAAC,CAAC;EAE1BJ,SAAS,CAAC,MAAM;IACd,MAAMwB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACFJ,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;QACd,MAAM;UAAEG;QAAK,CAAC,GAAG,MAAMvB,GAAG,CAACwB,GAAG,CAAC,UAAUX,MAAM,cAAc,CAAC;;QAE9D;QACA,MAAMY,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAClCA,IAAI,CAACK,MAAM,CAACC,IAAI,IAAI;UAClB;UACA,MAAMC,YAAY,GAAG,CAACD,IAAI,CAACE,SAAS;UACpC;UACA,MAAMC,cAAc,GAAGH,IAAI,CAACI,MAAM,IAAI,CAACJ,IAAI,CAACI,MAAM,CAACF,SAAS;UAC5D,OAAOD,YAAY,IAAIE,cAAc;QACvC,CAAC,CAAC,GACF,EAAE;QAENhB,QAAQ,CAACS,UAAU,CAAC;MACtB,CAAC,CAAC,OAAON,KAAK,EAAE;QAAA,IAAAe,eAAA;QACdC,OAAO,CAAChB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDC,QAAQ,CAAC,4BAA4B,CAAC;QACtC,IAAI,EAAAc,eAAA,GAAAf,KAAK,CAACiB,QAAQ,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,EAAE;UAClC;QAAA;MAEJ,CAAC,SAAS;QACRnB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDI,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACT,MAAM,EAAEQ,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEpB,MAAMiB,iBAAiB,GAAIC,aAAa,IAAK;IAC3C;IACAvB,QAAQ,CAACwB,IAAI,IAAIA,IAAI,CAACZ,MAAM,CAACa,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKH,aAAa,CAAC,CAAC;EAC7D,CAAC;EAED,IAAItB,OAAO,EAAE,oBAAOb,OAAA,CAACM,YAAY;IAAAiC,QAAA,EAAC;EAAsB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAc,CAAC;EACvE,IAAI5B,KAAK,EAAE,oBAAOf,OAAA,CAACM,YAAY;IAAAiC,QAAA,EAAExB;EAAK;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAe,CAAC;EAEtD,oBACE3C,OAAA,CAAAE,SAAA;IAAAqC,QAAA,EACG5B,KAAK,CAACiC,MAAM,KAAK,CAAC,gBACjB5C,OAAA,CAACM,YAAY;MAAAiC,QAAA,EACV9B,MAAM,MAAKQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEqB,GAAG,IACjB,iCAAiC,GACjC;IAAkC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,gBAEf3C,OAAA,CAACG,QAAQ;MAAAoC,QAAA,EACN5B,KAAK,CAACkC,GAAG,CAACpB,IAAI,iBACbzB,OAAA,CAACH,aAAa;QAEZ4B,IAAI,EAAEA,IAAK;QACXqB,QAAQ,EAAEZ,iBAAkB,CAAC;MAAA,GAFxBT,IAAI,CAACa,GAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGd,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM;EACX,gBACD,CAAC;AAEP,CAAC;AAACjC,EAAA,CApEIF,SAAS;EAAA,QAIIV,OAAO;AAAA;AAAAiD,GAAA,GAJpBvC,SAAS;AAsEf,eAAeA,SAAS;AAAC,IAAAH,EAAA,EAAAE,GAAA,EAAAwC,GAAA;AAAAC,YAAA,CAAA3C,EAAA;AAAA2C,YAAA,CAAAzC,GAAA;AAAAyC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}