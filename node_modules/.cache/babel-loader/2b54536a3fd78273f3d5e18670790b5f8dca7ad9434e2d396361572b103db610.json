{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ifunny-clone\\\\client\\\\src\\\\components\\\\profile\\\\UserLikes.jsx\",\n  _s = $RefreshSig$();\n// src/components/profile/UserLikes.jsx\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../../services/api';\nimport MemeThumbnail from '../MemeThumbnail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n`;\n_c = MemeGrid;\nconst UserLikes = ({\n  userId\n}) => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchLikedMemes = async () => {\n      try {\n        const {\n          data\n        } = await api.get(`/users/${userId}/liked-memes`);\n        setMemes(data);\n      } catch (error) {\n        console.error('Error fetching liked memes:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchLikedMemes();\n  }, [userId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading liked memes...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(MemeGrid, {\n    children: memes.map(meme => /*#__PURE__*/_jsxDEV(MemeThumbnail, {\n      meme: meme\n    }, meme._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(UserLikes, \"nDBRZJ1EJ/aszkQrVLG0Fxn1kt0=\");\n_c2 = UserLikes;\nexport default UserLikes;\nvar _c, _c2;\n$RefreshReg$(_c, \"MemeGrid\");\n$RefreshReg$(_c2, \"UserLikes\");","map":{"version":3,"names":["useState","useEffect","styled","api","MemeThumbnail","jsxDEV","_jsxDEV","MemeGrid","div","_c","UserLikes","userId","_s","memes","setMemes","loading","setLoading","fetchLikedMemes","data","get","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","meme","_id","_c2","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/ifunny-clone/client/src/components/profile/UserLikes.jsx"],"sourcesContent":["// src/components/profile/UserLikes.jsx\r\nimport { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport api from '../../services/api';\r\nimport MemeThumbnail from '../MemeThumbnail';\r\n\r\nconst MemeGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  gap: 20px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst UserLikes = ({ userId }) => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchLikedMemes = async () => {\r\n      try {\r\n        const { data } = await api.get(`/users/${userId}/liked-memes`);\r\n        setMemes(data);\r\n      } catch (error) {\r\n        console.error('Error fetching liked memes:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchLikedMemes();\r\n  }, [userId]);\r\n\r\n  if (loading) return <div>Loading liked memes...</div>;\r\n\r\n  return (\r\n    <MemeGrid>\r\n      {memes.map(meme => (\r\n        <MemeThumbnail key={meme._id} meme={meme} />\r\n      ))}\r\n    </MemeGrid>\r\n  );\r\n};\r\n\r\nexport default UserLikes;"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,GAAG,MAAM,oBAAoB;AACpC,OAAOC,aAAa,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,QAAQ,GAAGL,MAAM,CAACM,GAAG;AAC3B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,QAAQ;AAOd,MAAMG,SAAS,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMgB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMf,GAAG,CAACgB,GAAG,CAAC,UAAUR,MAAM,cAAc,CAAC;QAC9DG,QAAQ,CAACI,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,SAAS;QACRJ,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EAEZ,IAAII,OAAO,EAAE,oBAAOT,OAAA;IAAAgB,QAAA,EAAK;EAAsB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAErD,oBACEpB,OAAA,CAACC,QAAQ;IAAAe,QAAA,EACNT,KAAK,CAACc,GAAG,CAACC,IAAI,iBACbtB,OAAA,CAACF,aAAa;MAAgBwB,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACC,GAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAC5C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEf,CAAC;AAACd,EAAA,CA5BIF,SAAS;AAAAoB,GAAA,GAATpB,SAAS;AA8Bf,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAAqB,GAAA;AAAAC,YAAA,CAAAtB,EAAA;AAAAsB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}