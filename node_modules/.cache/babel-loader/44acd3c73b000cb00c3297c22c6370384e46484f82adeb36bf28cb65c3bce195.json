{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import api from'../services/api';import MemeCard from'../components/MemeCard';import UploadButton from'../components/UploadButton';import{useNavigate}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import{FiRefreshCw}from'react-icons/fi';import Navbar from'../components/Navbar/Navbar';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const FeedContainer=styled.div`\n  width: 100%;\n  height: calc(100vh - 60px); // Ajuste para o navbar\n  background-color: var(--background);\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  scroll-snap-type: y proximity;\n  scroll-behavior: smooth;\n  overscroll-behavior-y: contain;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  padding-bottom: 20px; // Espaço extra no final\n`;const FeedGrid=styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 8px;\n`;const MemeWrapper=styled.div`\n  position: relative;\n  width: calc(100% - 16px);\n  min-height: 80vh; // Altura mínima para garantir que o card seja visível\n  margin: 8px;\n  scroll-snap-align: start;\n  border-radius: 12px;\n  background: var(--card-bg);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n  transition: transform 0.2s ease;\n  overflow: hidden;\n\n  &:not(.active) {\n    opacity: 0.95;\n  }\n\n  &.active {\n    opacity: 1;\n  }\n`;const EmptyFeed=styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: calc(100vh - 120px);\n  width: calc(100% - 16px);\n  margin: 8px;\n  text-align: center;\n  color: var(--text);\n  scroll-snap-align: start;\n  background: var(--card-bg);\n  border-radius: 12px;\n\n  h3 {\n    font-size: 1.5rem;\n    margin-bottom: 16px;\n  }\n\n  p {\n    color: var(--text-light);\n    margin-bottom: 24px;\n  }\n`;const LoadingIndicator=styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: calc(100vh - 120px);\n  width: calc(100% - 16px);\n  margin: 8px;\n  color: var(--text-light);\n  scroll-snap-align: start;\n  background: var(--card-bg);\n  border-radius: 12px;\n`;const ErrorMessage=styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: calc(100vh - 120px);\n  width: calc(100% - 16px);\n  margin: 8px;\n  color: var(--danger);\n  padding: 20px;\n  scroll-snap-align: start;\n  background: var(--card-bg);\n  border-radius: 12px;\n\n  button {\n    margin-top: 20px;\n    padding: 12px 24px;\n    border-radius: 24px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: 500;\n  }\n`;const FeedPage=()=>{const[memes,setMemes]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[currentIndex,setCurrentIndex]=useState(0);const feedContainerRef=useRef(null);const scrollTimeoutRef=useRef(null);const isScrollingRef=useRef(false);const{logout}=useAuth();const navigate=useNavigate();const[commentOpen,setCommentOpen]=useState(false);const lastScrollPosition=useRef(0);const[navbarVisible,setNavbarVisible]=useState(true);const fetchMemes=async()=>{try{setLoading(true);setError(null);const{data}=await api.get('/memes');const validMemes=Array.isArray(data===null||data===void 0?void 0:data.data)?data.data.filter(meme=>!meme.isDeleted):[];setMemes(validMemes);}catch(error){var _error$response;console.error('Erro ao carregar feed:',error);setError('Erro ao carregar o feed. Tente novamente mais tarde.');if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){await logout();navigate('/login');}}finally{setLoading(false);}};const handleScroll=()=>{if(commentOpen)return;// Lógica para mostrar/esconder navbar\nconst currentScrollPosition=feedContainerRef.current.scrollTop;if(currentScrollPosition>lastScrollPosition.current&&currentScrollPosition>60){// Rolando para baixo\nsetNavbarVisible(false);}else{// Rolando para cima\nsetNavbarVisible(true);}lastScrollPosition.current=currentScrollPosition;// Lógica para snap\nif(scrollTimeoutRef.current){clearTimeout(scrollTimeoutRef.current);}scrollTimeoutRef.current=setTimeout(()=>{if(feedContainerRef.current){const scrollTop=feedContainerRef.current.scrollTop;const containerHeight=feedContainerRef.current.offsetHeight;const index=Math.round(scrollTop/containerHeight);if(index!==currentIndex){setCurrentIndex(index);}}},100);};const handleMemeDeleted=deletedMemeId=>{var _memes$currentIndex;setMemes(prev=>prev.filter(meme=>meme._id!==deletedMemeId));if(((_memes$currentIndex=memes[currentIndex])===null||_memes$currentIndex===void 0?void 0:_memes$currentIndex._id)===deletedMemeId){const newIndex=Math.min(currentIndex,memes.length-2);setCurrentIndex(newIndex>=0?newIndex:0);}};useEffect(()=>{const container=feedContainerRef.current;if(container){container.addEventListener('scroll',handleScroll);return()=>container.removeEventListener('scroll',handleScroll);}},[currentIndex,commentOpen]);useEffect(()=>{fetchMemes();},[]);useEffect(()=>{return()=>{setCommentOpen(false);};},[]);useEffect(()=>{// Scroll to current index when memes change\nif(memes.length>0&&feedContainerRef.current){const containerHeight=feedContainerRef.current.offsetHeight;feedContainerRef.current.scrollTo({top:currentIndex*containerHeight,behavior:'smooth'});}},[memes,currentIndex]);if(loading){return/*#__PURE__*/_jsx(FeedContainer,{ref:feedContainerRef,children:/*#__PURE__*/_jsx(LoadingIndicator,{children:\"Carregando...\"})});}if(error){return/*#__PURE__*/_jsx(FeedContainer,{ref:feedContainerRef,children:/*#__PURE__*/_jsxs(ErrorMessage,{children:[error,/*#__PURE__*/_jsxs(\"button\",{onClick:fetchMemes,children:[/*#__PURE__*/_jsx(FiRefreshCw,{}),\" Tentar novamente\"]})]})});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{navbarVisible:navbarVisible}),/*#__PURE__*/_jsx(FeedContainer,{ref:feedContainerRef,children:/*#__PURE__*/_jsx(FeedGrid,{children:memes.length===0?/*#__PURE__*/_jsxs(EmptyFeed,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Nenhum meme encontrado\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Seja o primeiro a compartilhar sua cria\\xE7\\xE3o!\"}),/*#__PURE__*/_jsx(UploadButton,{size:\"large\"})]}):memes.map((meme,index)=>/*#__PURE__*/_jsx(MemeWrapper,{className:index===currentIndex?'active':'',children:/*#__PURE__*/_jsx(MemeCard,{meme:meme,onDelete:handleMemeDeleted,onCommentCountChange:newCount=>{setMemes(prev=>prev.map(m=>m._id===meme._id?{...m,commentCount:newCount}:m));},isSquareView:false,isActive:index===currentIndex,style:{width:'100%',height:'100%'},setCommentOpen:setCommentOpen})},meme._id))})})]});};export default FeedPage;","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","api","MemeCard","UploadButton","useNavigate","useAuth","FiRefreshCw","Navbar","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","FeedContainer","div","FeedGrid","MemeWrapper","EmptyFeed","LoadingIndicator","ErrorMessage","FeedPage","memes","setMemes","loading","setLoading","error","setError","currentIndex","setCurrentIndex","feedContainerRef","scrollTimeoutRef","isScrollingRef","logout","navigate","commentOpen","setCommentOpen","lastScrollPosition","navbarVisible","setNavbarVisible","fetchMemes","data","get","validMemes","Array","isArray","filter","meme","isDeleted","_error$response","console","response","status","handleScroll","currentScrollPosition","current","scrollTop","clearTimeout","setTimeout","containerHeight","offsetHeight","index","Math","round","handleMemeDeleted","deletedMemeId","_memes$currentIndex","prev","_id","newIndex","min","length","container","addEventListener","removeEventListener","scrollTo","top","behavior","ref","children","onClick","size","map","className","onDelete","onCommentCountChange","newCount","m","commentCount","isSquareView","isActive","style","width","height"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/jokersta_apk/src/pages/FeedPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport UploadButton from '../components/UploadButton';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { FiRefreshCw } from 'react-icons/fi';\nimport Navbar from '../components/Navbar/Navbar'\n\nconst FeedContainer = styled.div`\n  width: 100%;\n  height: calc(100vh - 60px); // Ajuste para o navbar\n  background-color: var(--background);\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  scroll-snap-type: y proximity;\n  scroll-behavior: smooth;\n  overscroll-behavior-y: contain;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  padding-bottom: 20px; // Espaço extra no final\n`;\n\nconst FeedGrid = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0 8px;\n`;\n\nconst MemeWrapper = styled.div`\n  position: relative;\n  width: calc(100% - 16px);\n  min-height: 80vh; // Altura mínima para garantir que o card seja visível\n  margin: 8px;\n  scroll-snap-align: start;\n  border-radius: 12px;\n  background: var(--card-bg);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n  transition: transform 0.2s ease;\n  overflow: hidden;\n\n  &:not(.active) {\n    opacity: 0.95;\n  }\n\n  &.active {\n    opacity: 1;\n  }\n`;\n\nconst EmptyFeed = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: calc(100vh - 120px);\n  width: calc(100% - 16px);\n  margin: 8px;\n  text-align: center;\n  color: var(--text);\n  scroll-snap-align: start;\n  background: var(--card-bg);\n  border-radius: 12px;\n\n  h3 {\n    font-size: 1.5rem;\n    margin-bottom: 16px;\n  }\n\n  p {\n    color: var(--text-light);\n    margin-bottom: 24px;\n  }\n`;\n\nconst LoadingIndicator = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: calc(100vh - 120px);\n  width: calc(100% - 16px);\n  margin: 8px;\n  color: var(--text-light);\n  scroll-snap-align: start;\n  background: var(--card-bg);\n  border-radius: 12px;\n`;\n\nconst ErrorMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: calc(100vh - 120px);\n  width: calc(100% - 16px);\n  margin: 8px;\n  color: var(--danger);\n  padding: 20px;\n  scroll-snap-align: start;\n  background: var(--card-bg);\n  border-radius: 12px;\n\n  button {\n    margin-top: 20px;\n    padding: 12px 24px;\n    border-radius: 24px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: 500;\n  }\n`;\n\nconst FeedPage = () => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const feedContainerRef = useRef(null);\n  const scrollTimeoutRef = useRef(null);\n  const isScrollingRef = useRef(false);\n  const { logout } = useAuth();\n  const navigate = useNavigate();\n  const [commentOpen, setCommentOpen] = useState(false);\n  const lastScrollPosition = useRef(0);\n  const [navbarVisible, setNavbarVisible] = useState(true);\n\n  const fetchMemes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { data } = await api.get('/memes');\n      const validMemes = Array.isArray(data?.data)\n        ? data.data.filter(meme => !meme.isDeleted)\n        : [];\n      setMemes(validMemes);\n    } catch (error) {\n      console.error('Erro ao carregar feed:', error);\n      setError('Erro ao carregar o feed. Tente novamente mais tarde.');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleScroll = () => {\n    if (commentOpen) return;\n\n    // Lógica para mostrar/esconder navbar\n    const currentScrollPosition = feedContainerRef.current.scrollTop;\n    if (currentScrollPosition > lastScrollPosition.current && currentScrollPosition > 60) {\n      // Rolando para baixo\n      setNavbarVisible(false);\n    } else {\n      // Rolando para cima\n      setNavbarVisible(true);\n    }\n    lastScrollPosition.current = currentScrollPosition;\n\n    // Lógica para snap\n    if (scrollTimeoutRef.current) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n\n    scrollTimeoutRef.current = setTimeout(() => {\n      if (feedContainerRef.current) {\n        const scrollTop = feedContainerRef.current.scrollTop;\n        const containerHeight = feedContainerRef.current.offsetHeight;\n        const index = Math.round(scrollTop / containerHeight);\n\n        if (index !== currentIndex) {\n          setCurrentIndex(index);\n        }\n      }\n    }, 100);\n  };\n\n  const handleMemeDeleted = (deletedMemeId) => {\n    setMemes(prev => prev.filter(meme => meme._id !== deletedMemeId));\n    \n    if (memes[currentIndex]?._id === deletedMemeId) {\n      const newIndex = Math.min(currentIndex, memes.length - 2);\n      setCurrentIndex(newIndex >= 0 ? newIndex : 0);\n    }\n  };\n\n  useEffect(() => {\n    const container = feedContainerRef.current;\n    if (container) {\n      container.addEventListener('scroll', handleScroll);\n      return () => container.removeEventListener('scroll', handleScroll);\n    }\n  }, [currentIndex, commentOpen]);\n\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      setCommentOpen(false);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Scroll to current index when memes change\n    if (memes.length > 0 && feedContainerRef.current) {\n      const containerHeight = feedContainerRef.current.offsetHeight;\n      feedContainerRef.current.scrollTo({\n        top: currentIndex * containerHeight,\n        behavior: 'smooth'\n      });\n    }\n  }, [memes, currentIndex]);\n\n  if (loading) {\n    return (\n      \n      <FeedContainer ref={feedContainerRef}>\n        <LoadingIndicator>Carregando...</LoadingIndicator>\n      </FeedContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      \n      <FeedContainer ref={feedContainerRef}>\n        <ErrorMessage>\n          {error}\n          <button onClick={fetchMemes}>\n            <FiRefreshCw /> Tentar novamente\n          </button>\n        </ErrorMessage>\n      </FeedContainer>\n    );\n  }\n\n  return (\n    <>\n      <Navbar navbarVisible={navbarVisible} />\n      <FeedContainer ref={feedContainerRef}>\n        <FeedGrid>\n          {memes.length === 0 ? (\n            <EmptyFeed>\n              <h3>Nenhum meme encontrado</h3>\n              <p>Seja o primeiro a compartilhar sua criação!</p>\n              <UploadButton size=\"large\" />\n            </EmptyFeed>\n          ) : (\n            memes.map((meme, index) => (\n              <MemeWrapper\n                key={meme._id}\n                className={index === currentIndex ? 'active' : ''}\n              >\n                <MemeCard\n                  meme={meme}\n                  onDelete={handleMemeDeleted}\n                  onCommentCountChange={(newCount) => {\n                    setMemes(prev =>\n                      prev.map(m =>\n                        m._id === meme._id ? { ...m, commentCount: newCount } : m\n                      )\n                    );\n                  }}\n                  isSquareView={false}\n                  isActive={index === currentIndex}\n                  style={{ width: '100%', height: '100%' }}\n                  setCommentOpen={setCommentOpen}\n                />\n              </MemeWrapper>\n            ))\n          )}\n        </FeedGrid>\n      </FeedContainer>\n    </>\n  );\n};\n\nexport default FeedPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}