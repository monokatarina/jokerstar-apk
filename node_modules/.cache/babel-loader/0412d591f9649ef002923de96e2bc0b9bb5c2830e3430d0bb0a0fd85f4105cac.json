{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ifunny-clone\\\\client\\\\src\\\\pages\\\\FeedPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport UploadButton from '../components/UploadButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedContainer = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n_c = FeedContainer;\nconst FeedPage = () => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchMemes = async () => {\n      try {\n        const {\n          data\n        } = await api.get('/memes');\n        setMemes(data);\n      } catch (error) {\n        console.error('Erro ao carregar feed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMemes();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Carregando...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(FeedContainer, {\n    children: [/*#__PURE__*/_jsxDEV(UploadButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-list\",\n      children: memes.map(meme => /*#__PURE__*/_jsxDEV(MemeCard, {\n        meme: meme\n      }, meme._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedPage, \"nDBRZJ1EJ/aszkQrVLG0Fxn1kt0=\");\n_c2 = FeedPage;\nexport default FeedPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"FeedContainer\");\n$RefreshReg$(_c2, \"FeedPage\");","map":{"version":3,"names":["React","useState","useEffect","styled","api","MemeCard","UploadButton","jsxDEV","_jsxDEV","FeedContainer","div","_c","FeedPage","_s","memes","setMemes","loading","setLoading","fetchMemes","data","get","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","meme","_id","_c2","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/ifunny-clone/client/src/pages/FeedPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport api from '../services/api';\r\nimport MemeCard from '../components/MemeCard';\r\nimport UploadButton from '../components/UploadButton';\r\n\r\nconst FeedContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n`;\r\n\r\nconst FeedPage = () => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchMemes = async () => {\r\n      try {\r\n        const { data } = await api.get('/memes');\r\n        setMemes(data);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar feed:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchMemes();\r\n  }, []);\r\n\r\n  if (loading) return <div>Carregando...</div>;\r\n\r\n  return (\r\n    <FeedContainer>\r\n      <UploadButton />\r\n      \r\n      <div className=\"feed-list\">\r\n        {memes.map(meme => (\r\n          <MemeCard key={meme._id} meme={meme} />\r\n        ))}\r\n      </div>\r\n    </FeedContainer>\r\n  );\r\n};\r\n\r\nexport default FeedPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,GAAG,MAAM,iBAAiB;AACjC,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,YAAY,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,aAAa,GAAGN,MAAM,CAACO,GAAG;AAChC;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAJIF,aAAa;AAMnB,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMgB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMf,GAAG,CAACgB,GAAG,CAAC,QAAQ,CAAC;QACxCL,QAAQ,CAACI,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,SAAS;QACRJ,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,EAAE,oBAAOR,OAAA;IAAAe,QAAA,EAAK;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE5C,oBACEnB,OAAA,CAACC,aAAa;IAAAc,QAAA,gBACZf,OAAA,CAACF,YAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEhBnB,OAAA;MAAKoB,SAAS,EAAC,WAAW;MAAAL,QAAA,EACvBT,KAAK,CAACe,GAAG,CAACC,IAAI,iBACbtB,OAAA,CAACH,QAAQ;QAAgByB,IAAI,EAAEA;MAAK,GAArBA,IAAI,CAACC,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEpB,CAAC;AAACd,EAAA,CA/BID,QAAQ;AAAAoB,GAAA,GAARpB,QAAQ;AAiCd,eAAeA,QAAQ;AAAC,IAAAD,EAAA,EAAAqB,GAAA;AAAAC,YAAA,CAAAtB,EAAA;AAAAsB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}