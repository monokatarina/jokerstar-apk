{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import api from'../services/api';import MemeCard from'../components/MemeCard';import UploadButton from'../components/UploadButton';import{useNavigate}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import{FiRefreshCw}from'react-icons/fi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FeedContainer=styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: var(--background);\n  overflow-x: auto;\n  overflow-y: hidden;\n  white-space: nowrap;\n  scroll-snap-type: x mandatory;\n  scroll-behavior: smooth;\n  -webkit-overflow-scrolling: touch;\n  touch-action: pan-x;\n  overscroll-behavior-x: contain;\n  scrollbar-width: none; /* Firefox */\n  &::-webkit-scrollbar {\n    display: none; /* Chrome/Safari */\n  }\n`;const FeedGrid=styled.div`\n  display: inline-flex;\n  gap: 0;\n  height: 100%;\n`;const MemeWrapper=styled.div`\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  scroll-snap-align: start;\n  flex: 0 0 auto;\n  overflow: hidden;\n`;const EmptyFeed=styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100vw;\n  text-align: center;\n  color: var(--text);\n  scroll-snap-align: start;\n\n  h3 {\n    font-size: 1.5rem;\n    margin-bottom: 16px;\n  }\n\n  p {\n    color: var(--text-light);\n    margin-bottom: 24px;\n  }\n`;const LoadingIndicator=styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: 100vw;\n  color: var(--text-light);\n  scroll-snap-align: start;\n`;const ErrorMessage=styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: 100vw;\n  color: var(--danger);\n  padding: 20px;\n  scroll-snap-align: start;\n\n  button {\n    margin-top: 20px;\n    padding: 12px 24px;\n    border-radius: 24px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: 500;\n  }\n`;const FeedPage=()=>{const[memes,setMemes]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[currentIndex,setCurrentIndex]=useState(0);const feedContainerRef=useRef(null);const{user,logout}=useAuth();const navigate=useNavigate();const fetchMemes=async()=>{try{setLoading(true);setError(null);const{data}=await api.get('/memes');const validMemes=Array.isArray(data===null||data===void 0?void 0:data.data)?data.data.filter(meme=>!meme.isDeleted):[];setMemes(validMemes);}catch(error){var _error$response;console.error('Erro ao carregar feed:',error);setError('Erro ao carregar o feed. Tente novamente mais tarde.');if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){await logout();navigate('/login');}}finally{setLoading(false);}};const handleMemeDeleted=deletedMemeId=>{setMemes(prevMemes=>prevMemes.filter(meme=>meme._id!==deletedMemeId));};const handleScroll=()=>{if(feedContainerRef.current){const scrollLeft=feedContainerRef.current.scrollLeft;const width=feedContainerRef.current.offsetWidth;const newIndex=Math.round(scrollLeft/width);setCurrentIndex(newIndex);}};const scrollToIndex=index=>{if(feedContainerRef.current){const width=feedContainerRef.current.offsetWidth;feedContainerRef.current.scrollTo({left:width*index,behavior:'smooth'});}};useEffect(()=>{const container=feedContainerRef.current;if(container){container.addEventListener('scroll',handleScroll);return()=>container.removeEventListener('scroll',handleScroll);}},[]);useEffect(()=>{fetchMemes();},[]);if(loading){return/*#__PURE__*/_jsx(FeedContainer,{ref:feedContainerRef,children:/*#__PURE__*/_jsx(LoadingIndicator,{children:\"Carregando...\"})});}if(error){return/*#__PURE__*/_jsx(FeedContainer,{ref:feedContainerRef,children:/*#__PURE__*/_jsxs(ErrorMessage,{children:[error,/*#__PURE__*/_jsxs(\"button\",{onClick:fetchMemes,children:[/*#__PURE__*/_jsx(FiRefreshCw,{}),\" Tentar novamente\"]})]})});}return/*#__PURE__*/_jsx(FeedContainer,{ref:feedContainerRef,children:/*#__PURE__*/_jsx(FeedGrid,{children:memes.length===0?/*#__PURE__*/_jsxs(EmptyFeed,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Nenhum meme encontrado\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Seja o primeiro a compartilhar sua cria\\xE7\\xE3o!\"}),/*#__PURE__*/_jsx(UploadButton,{size:\"large\"})]}):memes.map((meme,index)=>/*#__PURE__*/_jsx(MemeWrapper,{children:/*#__PURE__*/_jsx(MemeCard,{meme:meme,onDelete:handleMemeDeleted,onCommentCountChange:newCount=>{setMemes(prevMemes=>prevMemes.map(m=>m._id===meme._id?{...m,commentCount:newCount}:m));},isSquareView:false,isActive:index===currentIndex,style:{width:'90%',height:'90%'}})},meme._id))})});};export default FeedPage;","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","api","MemeCard","UploadButton","useNavigate","useAuth","FiRefreshCw","jsx","_jsx","jsxs","_jsxs","FeedContainer","div","FeedGrid","MemeWrapper","EmptyFeed","LoadingIndicator","ErrorMessage","FeedPage","memes","setMemes","loading","setLoading","error","setError","currentIndex","setCurrentIndex","feedContainerRef","user","logout","navigate","fetchMemes","data","get","validMemes","Array","isArray","filter","meme","isDeleted","_error$response","console","response","status","handleMemeDeleted","deletedMemeId","prevMemes","_id","handleScroll","current","scrollLeft","width","offsetWidth","newIndex","Math","round","scrollToIndex","index","scrollTo","left","behavior","container","addEventListener","removeEventListener","ref","children","onClick","length","size","map","onDelete","onCommentCountChange","newCount","m","commentCount","isSquareView","isActive","style","height"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/jokersta_apk/src/pages/FeedPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport api from '../services/api';\nimport MemeCard from '../components/MemeCard';\nimport UploadButton from '../components/UploadButton';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { FiRefreshCw } from 'react-icons/fi';\n\nconst FeedContainer = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: var(--background);\n  overflow-x: auto;\n  overflow-y: hidden;\n  white-space: nowrap;\n  scroll-snap-type: x mandatory;\n  scroll-behavior: smooth;\n  -webkit-overflow-scrolling: touch;\n  touch-action: pan-x;\n  overscroll-behavior-x: contain;\n  scrollbar-width: none; /* Firefox */\n  &::-webkit-scrollbar {\n    display: none; /* Chrome/Safari */\n  }\n`;\n\nconst FeedGrid = styled.div`\n  display: inline-flex;\n  gap: 0;\n  height: 100%;\n`;\n\nconst MemeWrapper = styled.div`\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  scroll-snap-align: start;\n  flex: 0 0 auto;\n  overflow: hidden;\n`;\n\nconst EmptyFeed = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100vw;\n  text-align: center;\n  color: var(--text);\n  scroll-snap-align: start;\n\n  h3 {\n    font-size: 1.5rem;\n    margin-bottom: 16px;\n  }\n\n  p {\n    color: var(--text-light);\n    margin-bottom: 24px;\n  }\n`;\n\nconst LoadingIndicator = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: 100vw;\n  color: var(--text-light);\n  scroll-snap-align: start;\n`;\n\nconst ErrorMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: 100vw;\n  color: var(--danger);\n  padding: 20px;\n  scroll-snap-align: start;\n\n  button {\n    margin-top: 20px;\n    padding: 12px 24px;\n    border-radius: 24px;\n    background: var(--primary);\n    color: white;\n    border: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: 500;\n  }\n`;\n\nconst FeedPage = () => {\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const feedContainerRef = useRef(null);\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const fetchMemes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const { data } = await api.get('/memes');\n      \n      const validMemes = Array.isArray(data?.data) \n        ? data.data.filter(meme => !meme.isDeleted)\n        : [];\n      \n      setMemes(validMemes);\n    } catch (error) {\n      console.error('Erro ao carregar feed:', error);\n      setError('Erro ao carregar o feed. Tente novamente mais tarde.');\n      if (error.response?.status === 401) {\n        await logout();\n        navigate('/login');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMemeDeleted = (deletedMemeId) => {\n    setMemes(prevMemes => prevMemes.filter(meme => meme._id !== deletedMemeId));\n  };\n\n  const handleScroll = () => {\n    if (feedContainerRef.current) {\n      const scrollLeft = feedContainerRef.current.scrollLeft;\n      const width = feedContainerRef.current.offsetWidth;\n      const newIndex = Math.round(scrollLeft / width);\n      setCurrentIndex(newIndex);\n    }\n  };\n\n  const scrollToIndex = (index) => {\n    if (feedContainerRef.current) {\n      const width = feedContainerRef.current.offsetWidth;\n      feedContainerRef.current.scrollTo({\n        left: width * index,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  useEffect(() => {\n    const container = feedContainerRef.current;\n    if (container) {\n      container.addEventListener('scroll', handleScroll);\n      return () => container.removeEventListener('scroll', handleScroll);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n\n  if (loading) {\n    return (\n      <FeedContainer ref={feedContainerRef}>\n        <LoadingIndicator>Carregando...</LoadingIndicator>\n      </FeedContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      <FeedContainer ref={feedContainerRef}>\n        <ErrorMessage>\n          {error}\n          <button onClick={fetchMemes}>\n            <FiRefreshCw /> Tentar novamente\n          </button>\n        </ErrorMessage>\n      </FeedContainer>\n    );\n  }\n\n  return (\n    <FeedContainer ref={feedContainerRef}>\n      <FeedGrid>\n        {memes.length === 0 ? (\n          <EmptyFeed>\n            <h3>Nenhum meme encontrado</h3>\n            <p>Seja o primeiro a compartilhar sua criação!</p>\n            <UploadButton size=\"large\" />\n          </EmptyFeed>\n        ) : (\n          memes.map((meme, index) => (\n            <MemeWrapper key={meme._id}>\n              <MemeCard \n                meme={meme}\n                onDelete={handleMemeDeleted}\n                onCommentCountChange={(newCount) => {\n                  setMemes(prevMemes => prevMemes.map(m => \n                    m._id === meme._id ? { ...m, commentCount: newCount } : m\n                  ))}\n                }\n                isSquareView={false}\n                isActive={index === currentIndex}\n                style={{\n                  width: '90%',\n                  height: '90%',\n                }}\n              />\n            </MemeWrapper>\n          ))\n        )}\n      </FeedGrid>\n    </FeedContainer>\n  );\n};\n\nexport default FeedPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}