{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nexport class LocalNotificationsWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.pending = [];\n    this.deliveredNotifications = [];\n    this.hasNotificationSupport = () => {\n      if (!('Notification' in window) || !Notification.requestPermission) {\n        return false;\n      }\n      if (Notification.permission !== 'granted') {\n        // don't test for `new Notification` if permission has already been granted\n        // otherwise this sends a real notification on supported browsers\n        try {\n          new Notification('');\n        } catch (e) {\n          if (e.name == 'TypeError') {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n  }\n  async getDeliveredNotifications() {\n    const deliveredSchemas = [];\n    for (const notification of this.deliveredNotifications) {\n      const deliveredSchema = {\n        title: notification.title,\n        id: parseInt(notification.tag),\n        body: notification.body\n      };\n      deliveredSchemas.push(deliveredSchema);\n    }\n    return {\n      notifications: deliveredSchemas\n    };\n  }\n  async removeDeliveredNotifications(delivered) {\n    for (const toRemove of delivered.notifications) {\n      const found = this.deliveredNotifications.find(n => n.tag === String(toRemove.id));\n      found === null || found === void 0 ? void 0 : found.close();\n      this.deliveredNotifications = this.deliveredNotifications.filter(() => !found);\n    }\n  }\n  async removeAllDeliveredNotifications() {\n    for (const notification of this.deliveredNotifications) {\n      notification.close();\n    }\n    this.deliveredNotifications = [];\n  }\n  async createChannel() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async deleteChannel() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async listChannels() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async schedule(options) {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n    for (const notification of options.notifications) {\n      this.sendNotification(notification);\n    }\n    return {\n      notifications: options.notifications.map(notification => ({\n        id: notification.id\n      }))\n    };\n  }\n  async getPending() {\n    return {\n      notifications: this.pending\n    };\n  }\n  async registerActionTypes() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async cancel(pending) {\n    this.pending = this.pending.filter(notification => !pending.notifications.find(n => n.id === notification.id));\n  }\n  async areEnabled() {\n    const {\n      display\n    } = await this.checkPermissions();\n    return {\n      value: display === 'granted'\n    };\n  }\n  async changeExactNotificationSetting() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async checkExactNotificationSetting() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async requestPermissions() {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n    const display = this.transformNotificationPermission(await Notification.requestPermission());\n    return {\n      display\n    };\n  }\n  async checkPermissions() {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n    const display = this.transformNotificationPermission(Notification.permission);\n    return {\n      display\n    };\n  }\n  transformNotificationPermission(permission) {\n    switch (permission) {\n      case 'granted':\n        return 'granted';\n      case 'denied':\n        return 'denied';\n      default:\n        return 'prompt';\n    }\n  }\n  sendPending() {\n    var _a;\n    const toRemove = [];\n    const now = new Date().getTime();\n    for (const notification of this.pending) {\n      if (((_a = notification.schedule) === null || _a === void 0 ? void 0 : _a.at) && notification.schedule.at.getTime() <= now) {\n        this.buildNotification(notification);\n        toRemove.push(notification);\n      }\n    }\n    this.pending = this.pending.filter(notification => !toRemove.find(n => n === notification));\n  }\n  sendNotification(notification) {\n    var _a;\n    if ((_a = notification.schedule) === null || _a === void 0 ? void 0 : _a.at) {\n      const diff = notification.schedule.at.getTime() - new Date().getTime();\n      this.pending.push(notification);\n      setTimeout(() => {\n        this.sendPending();\n      }, diff);\n      return;\n    }\n    this.buildNotification(notification);\n  }\n  buildNotification(notification) {\n    const localNotification = new Notification(notification.title, {\n      body: notification.body,\n      tag: String(notification.id)\n    });\n    localNotification.addEventListener('click', this.onClick.bind(this, notification), false);\n    localNotification.addEventListener('show', this.onShow.bind(this, notification), false);\n    localNotification.addEventListener('close', () => {\n      this.deliveredNotifications = this.deliveredNotifications.filter(() => !this);\n    }, false);\n    this.deliveredNotifications.push(localNotification);\n    return localNotification;\n  }\n  onClick(notification) {\n    const data = {\n      actionId: 'tap',\n      notification\n    };\n    this.notifyListeners('localNotificationActionPerformed', data);\n  }\n  onShow(notification) {\n    this.notifyListeners('localNotificationReceived', notification);\n  }\n}","map":{"version":3,"names":["WebPlugin","LocalNotificationsWeb","constructor","pending","deliveredNotifications","hasNotificationSupport","window","Notification","requestPermission","permission","e","name","getDeliveredNotifications","deliveredSchemas","notification","deliveredSchema","title","id","parseInt","tag","body","push","notifications","removeDeliveredNotifications","delivered","toRemove","found","find","n","String","close","filter","removeAllDeliveredNotifications","createChannel","unimplemented","deleteChannel","listChannels","schedule","options","unavailable","sendNotification","map","getPending","registerActionTypes","cancel","areEnabled","display","checkPermissions","value","changeExactNotificationSetting","checkExactNotificationSetting","requestPermissions","transformNotificationPermission","sendPending","now","Date","getTime","_a","at","buildNotification","diff","setTimeout","localNotification","addEventListener","onClick","bind","onShow","data","actionId","notifyListeners"],"sources":["C:\\Users\\drrod\\OneDrive\\√Årea de Trabalho\\jokersta_apk\\node_modules\\@capacitor\\local-notifications\\src\\web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { PermissionState } from '@capacitor/core';\n\nimport type {\n  DeliveredNotifications,\n  EnabledResult,\n  ListChannelsResult,\n  LocalNotificationSchema,\n  LocalNotificationsPlugin,\n  PendingResult,\n  PermissionStatus,\n  ScheduleOptions,\n  ScheduleResult,\n  SettingsPermissionStatus,\n} from './definitions';\n\nexport class LocalNotificationsWeb\n  extends WebPlugin\n  implements LocalNotificationsPlugin\n{\n  protected pending: LocalNotificationSchema[] = [];\n  protected deliveredNotifications: Notification[] = [];\n\n  async getDeliveredNotifications(): Promise<DeliveredNotifications> {\n    const deliveredSchemas = [];\n    for (const notification of this.deliveredNotifications) {\n      const deliveredSchema: LocalNotificationSchema = {\n        title: notification.title,\n        id: parseInt(notification.tag),\n        body: notification.body,\n      };\n      deliveredSchemas.push(deliveredSchema);\n    }\n    return {\n      notifications: deliveredSchemas,\n    };\n  }\n  async removeDeliveredNotifications(\n    delivered: DeliveredNotifications,\n  ): Promise<void> {\n    for (const toRemove of delivered.notifications) {\n      const found = this.deliveredNotifications.find(\n        n => n.tag === String(toRemove.id),\n      );\n      found?.close();\n      this.deliveredNotifications = this.deliveredNotifications.filter(\n        () => !found,\n      );\n    }\n  }\n  async removeAllDeliveredNotifications(): Promise<void> {\n    for (const notification of this.deliveredNotifications) {\n      notification.close();\n    }\n    this.deliveredNotifications = [];\n  }\n  async createChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async deleteChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async listChannels(): Promise<ListChannelsResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async schedule(options: ScheduleOptions): Promise<ScheduleResult> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    for (const notification of options.notifications) {\n      this.sendNotification(notification);\n    }\n\n    return {\n      notifications: options.notifications.map(notification => ({\n        id: notification.id,\n      })),\n    };\n  }\n\n  async getPending(): Promise<PendingResult> {\n    return {\n      notifications: this.pending,\n    };\n  }\n\n  async registerActionTypes(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async cancel(pending: ScheduleResult): Promise<void> {\n    this.pending = this.pending.filter(\n      notification =>\n        !pending.notifications.find(n => n.id === notification.id),\n    );\n  }\n\n  async areEnabled(): Promise<EnabledResult> {\n    const { display } = await this.checkPermissions();\n\n    return {\n      value: display === 'granted',\n    };\n  }\n\n  async changeExactNotificationSetting(): Promise<SettingsPermissionStatus> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async checkExactNotificationSetting(): Promise<SettingsPermissionStatus> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      await Notification.requestPermission(),\n    );\n\n    return { display };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      Notification.permission,\n    );\n\n    return { display };\n  }\n\n  protected hasNotificationSupport = (): boolean => {\n    if (!('Notification' in window) || !Notification.requestPermission) {\n      return false;\n    }\n\n    if (Notification.permission !== 'granted') {\n      // don't test for `new Notification` if permission has already been granted\n      // otherwise this sends a real notification on supported browsers\n      try {\n        new Notification('');\n      } catch (e) {\n        if (e.name == 'TypeError') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  protected transformNotificationPermission(\n    permission: NotificationPermission,\n  ): PermissionState {\n    switch (permission) {\n      case 'granted':\n        return 'granted';\n      case 'denied':\n        return 'denied';\n      default:\n        return 'prompt';\n    }\n  }\n\n  protected sendPending(): void {\n    const toRemove: LocalNotificationSchema[] = [];\n    const now = new Date().getTime();\n\n    for (const notification of this.pending) {\n      if (\n        notification.schedule?.at &&\n        notification.schedule.at.getTime() <= now\n      ) {\n        this.buildNotification(notification);\n        toRemove.push(notification);\n      }\n    }\n\n    this.pending = this.pending.filter(\n      notification => !toRemove.find(n => n === notification),\n    );\n  }\n\n  protected sendNotification(notification: LocalNotificationSchema): void {\n    if (notification.schedule?.at) {\n      const diff = notification.schedule.at.getTime() - new Date().getTime();\n\n      this.pending.push(notification);\n      setTimeout(() => {\n        this.sendPending();\n      }, diff);\n      return;\n    }\n    this.buildNotification(notification);\n  }\n\n  protected buildNotification(\n    notification: LocalNotificationSchema,\n  ): Notification {\n    const localNotification = new Notification(notification.title, {\n      body: notification.body,\n      tag: String(notification.id),\n    });\n    localNotification.addEventListener(\n      'click',\n      this.onClick.bind(this, notification),\n      false,\n    );\n    localNotification.addEventListener(\n      'show',\n      this.onShow.bind(this, notification),\n      false,\n    );\n    localNotification.addEventListener(\n      'close',\n      () => {\n        this.deliveredNotifications = this.deliveredNotifications.filter(\n          () => !this,\n        );\n      },\n      false,\n    );\n    this.deliveredNotifications.push(localNotification);\n    return localNotification;\n  }\n\n  protected onClick(notification: LocalNotificationSchema): void {\n    const data = {\n      actionId: 'tap',\n      notification,\n    };\n    this.notifyListeners('localNotificationActionPerformed', data);\n  }\n\n  protected onShow(notification: LocalNotificationSchema): void {\n    this.notifyListeners('localNotificationReceived', notification);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}