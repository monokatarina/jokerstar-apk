{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ifunny-clone\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthContext.js\nimport React, { createContext, useState, useEffect, useCallback, useContext } from 'react';\nimport { checkAuth, logout as apiLogout } from '../services/auth';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [initialCheckDone, setInitialCheckDone] = useState(false);\n  const verifyAuth = useCallback(async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setLoading(false);\n      setInitialCheckDone(true);\n      return;\n    }\n    try {\n      setLoading(true);\n      const response = await checkAuth();\n      setUser((response === null || response === void 0 ? void 0 : response.user) || null);\n    } catch (error) {\n      console.error('Auth verification failed:', error);\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setLoading(false);\n      setInitialCheckDone(true);\n    }\n  }, []);\n  const logout = useCallback(async () => {\n    try {\n      await apiLogout();\n    } finally {\n      localStorage.removeItem('token');\n      setUser(null);\n    }\n  }, []);\n\n  /**\n   * Atualiza os dados do usuário autenticado\n   * @param {Object} updates - Objeto com as propriedades a serem atualizadas\n   * @param {boolean} [shouldRevalidate=true] - Se deve verificar a autenticação após atualizar\n   */\n  const updateUser = useCallback(async (updates, shouldRevalidate = true) => {\n    try {\n      // Otimista: atualiza o estado local primeiro\n      setUser(prev => ({\n        ...prev,\n        ...updates\n      }));\n      if (shouldRevalidate) {\n        // Se necessário, faz uma nova verificação no servidor\n        await verifyAuth();\n      }\n    } catch (error) {\n      console.error('Failed to update user:', error);\n      throw error;\n    }\n  }, [verifyAuth]);\n\n  /**\n   * Atualiza a foto de perfil do usuário\n   * @param {File} avatarFile - Arquivo da imagem do avatar\n   */\n  const updateAvatar = useCallback(async avatarFile => {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', avatarFile);\n      const {\n        data\n      } = await api.put('/users/profile', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      await updateUser(data);\n      return data;\n    } catch (error) {\n      console.error('Failed to update avatar:', error);\n      throw error;\n    }\n  }, [updateUser]);\n  useEffect(() => {\n    verifyAuth();\n  }, [verifyAuth]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      initialCheckDone,\n      verifyAuth,\n      logout,\n      updateUser,\n      updateAvatar\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"tbZKCjZCtRnQgJNEamz1AcFnWqI=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useContext","checkAuth","logout","apiLogout","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","initialCheckDone","setInitialCheckDone","verifyAuth","token","localStorage","getItem","response","error","console","removeItem","updateUser","updates","shouldRevalidate","prev","updateAvatar","avatarFile","formData","FormData","append","data","put","headers","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/ifunny-clone/client/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\nimport React, { createContext, useState, useEffect, useCallback, useContext } from 'react';\nimport { checkAuth, logout as apiLogout } from '../services/auth';\nimport api from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [initialCheckDone, setInitialCheckDone] = useState(false);\n\n  const verifyAuth = useCallback(async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setLoading(false);\n      setInitialCheckDone(true);\n      return;\n    }\n  \n    try {\n      setLoading(true);\n      const response = await checkAuth();\n      setUser(response?.user || null);\n    } catch (error) {\n      console.error('Auth verification failed:', error);\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setLoading(false);\n      setInitialCheckDone(true);\n    }\n  }, []);\n\n  const logout = useCallback(async () => {\n    try {\n      await apiLogout();\n    } finally {\n      localStorage.removeItem('token');\n      setUser(null);\n    }\n  }, []);\n\n  /**\n   * Atualiza os dados do usuário autenticado\n   * @param {Object} updates - Objeto com as propriedades a serem atualizadas\n   * @param {boolean} [shouldRevalidate=true] - Se deve verificar a autenticação após atualizar\n   */\n  const updateUser = useCallback(async (updates, shouldRevalidate = true) => {\n    try {\n      // Otimista: atualiza o estado local primeiro\n      setUser(prev => ({ ...prev, ...updates }));\n      \n      if (shouldRevalidate) {\n        // Se necessário, faz uma nova verificação no servidor\n        await verifyAuth();\n      }\n    } catch (error) {\n      console.error('Failed to update user:', error);\n      throw error;\n    }\n  }, [verifyAuth]);\n\n  /**\n   * Atualiza a foto de perfil do usuário\n   * @param {File} avatarFile - Arquivo da imagem do avatar\n   */\n  const updateAvatar = useCallback(async (avatarFile) => {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', avatarFile);\n      \n      const { data } = await api.put('/users/profile', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      await updateUser(data);\n      return data;\n    } catch (error) {\n      console.error('Failed to update avatar:', error);\n      throw error;\n    }\n  }, [updateUser]);\n\n  useEffect(() => {\n    verifyAuth();\n  }, [verifyAuth]);\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      loading,\n      initialCheckDone,\n      verifyAuth,\n      logout,\n      updateUser,\n      updateAvatar\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}