{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\client2\\\\src\\\\contexts\\\\NotificationContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// contexts/NotificationContext.jsx\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport api from '../services/api';\nimport { useAuth } from './AuthContext';\nimport { initSocket } from '../services/socket';\nimport { debounce } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const {\n    user\n  } = useAuth();\n  const [socket, setSocket] = useState(null);\n\n  // Debounced version of setNotifications to prevent rapid updates\n  const debouncedSetNotifications = useCallback(debounce(newNotifications => {\n    setNotifications(newNotifications);\n  }, 300), []);\n\n  // Carrega notificações iniciais\n  const loadNotifications = useCallback(async () => {\n    try {\n      var _response$data;\n      setLoading(true);\n      const response = await api.get('/notifications', {\n        params: {\n          limit: 20,\n          skip: 0\n        }\n      });\n\n      // Verifica a estrutura dos dados e atualiza o estado\n      const notificationsData = Array.isArray((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data) ? response.data.data : [];\n      debouncedSetNotifications(notificationsData);\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n      debouncedSetNotifications([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [debouncedSetNotifications]);\n\n  // Carrega contagem de não lidas\n  const loadUnreadCount = useCallback(async () => {\n    if (!user) return;\n    try {\n      const response = await api.get('/notifications/unread-count');\n      setUnreadCount(response.data.count || 0);\n    } catch (error) {\n      console.error('Failed to load unread count:', error);\n      setUnreadCount(0);\n    }\n  }, [user]);\n\n  // Marca notificações como lidas\n  const markAsRead = useCallback(async notificationIds => {\n    if (!notificationIds || notificationIds.length === 0) return;\n    try {\n      await api.post('/notifications/mark-read', {\n        notificationIds\n      });\n      setUnreadCount(prev => Math.max(0, prev - notificationIds.length));\n      setNotifications(prev => prev.map(n => notificationIds.includes(n._id) ? {\n        ...n,\n        read: true\n      } : n));\n    } catch (error) {\n      console.error('Failed to mark as read:', error);\n    }\n  }, []);\n\n  // Função para mostrar alerta de notificação\n  const showNotificationAlert = useCallback(notification => {\n    if ('Notification' in window && Notification.permission === 'granted') {\n      var _notification$sender, _notification$sender$;\n      const title = getNotificationTitle(notification);\n      const options = {\n        body: getNotificationBody(notification),\n        icon: ((_notification$sender = notification.sender) === null || _notification$sender === void 0 ? void 0 : (_notification$sender$ = _notification$sender.profile) === null || _notification$sender$ === void 0 ? void 0 : _notification$sender$.avatar) || '/logo192.png'\n      };\n      new Notification(title, options);\n    }\n  }, []);\n\n  // Handler para novas notificações via WebSocket\n  const handleNewNotification = useCallback(notification => {\n    setNotifications(prev => {\n      // Evita duplicatas\n      if (!prev.some(n => n._id === notification._id)) {\n        return [notification, ...prev];\n      }\n      return prev;\n    });\n    setUnreadCount(prev => prev + 1);\n    if (document.visibilityState !== 'visible') {\n      showNotificationAlert(notification);\n    }\n  }, [showNotificationAlert]);\n\n  // Configura WebSocket e carrega dados iniciais\n  useEffect(() => {\n    if (!user) {\n      // Limpa notificações quando o usuário desloga\n      setNotifications([]);\n      setUnreadCount(0);\n      return;\n    }\n\n    // Inicializa o socket\n    const token = localStorage.getItem('token');\n    const newSocket = initSocket(token);\n    setSocket(newSocket);\n\n    // Configura handlers de eventos\n    newSocket.on('connect_error', err => {\n      console.error('Connection error:', err);\n    });\n    newSocket.on('new-notification', handleNewNotification);\n\n    // Carrega dados iniciais\n    const loadInitialData = async () => {\n      try {\n        await Promise.all([loadNotifications(), loadUnreadCount()]);\n      } catch (error) {\n        console.error('Error loading initial data:', error);\n      }\n    };\n    loadInitialData();\n\n    // Cleanup\n    return () => {\n      newSocket.off('new-notification', handleNewNotification);\n      newSocket.disconnect();\n    };\n  }, [user, handleNewNotification, loadNotifications, loadUnreadCount]);\n\n  // Funções auxiliares para texto de notificação\n  const getNotificationTitle = notification => {\n    var _notification$sender2, _notification$metadat, _notification$sender3, _notification$metadat2;\n    switch (notification.type) {\n      case 'like':\n        return `${((_notification$sender2 = notification.sender) === null || _notification$sender2 === void 0 ? void 0 : _notification$sender2.username) || 'Alguém'} curtiu seu meme`;\n      case 'like_grouped':\n        return `Seu meme tem ${((_notification$metadat = notification.metadata) === null || _notification$metadat === void 0 ? void 0 : _notification$metadat.count) || 'muitas'} curtidas`;\n      case 'comment':\n        return `${((_notification$sender3 = notification.sender) === null || _notification$sender3 === void 0 ? void 0 : _notification$sender3.username) || 'Alguém'} comentou no seu meme`;\n      case 'comment_grouped':\n        return `Seu meme tem ${((_notification$metadat2 = notification.metadata) === null || _notification$metadat2 === void 0 ? void 0 : _notification$metadat2.count) || 'muitos'} comentários`;\n      default:\n        return 'Nova notificação';\n    }\n  };\n  const getNotificationBody = notification => {\n    var _notification$meme, _notification$meme2;\n    switch (notification.type) {\n      case 'like':\n      case 'comment':\n        return (_notification$meme = notification.meme) !== null && _notification$meme !== void 0 && _notification$meme.caption ? truncate(notification.meme.caption, 50) : 'Veja agora';\n      case 'like_grouped':\n      case 'comment_grouped':\n        return (_notification$meme2 = notification.meme) !== null && _notification$meme2 !== void 0 && _notification$meme2.caption ? truncate(notification.meme.caption, 50) : 'Veja todas as interações';\n      default:\n        return '';\n    }\n  };\n  const truncate = (str, n) => {\n    return (str === null || str === void 0 ? void 0 : str.length) > n ? str.substr(0, n - 1) + '...' : str;\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      unreadCount,\n      loading,\n      markAsRead,\n      loadNotifications,\n      loadUnreadCount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"R/EH7U0vHgs8SqpmuT/mFLwUEzk=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nexport const useNotifications = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","api","useAuth","initSocket","debounce","jsxDEV","_jsxDEV","NotificationContext","NotificationProvider","children","_s","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","user","socket","setSocket","debouncedSetNotifications","newNotifications","loadNotifications","_response$data","response","get","params","limit","skip","notificationsData","Array","isArray","data","error","console","loadUnreadCount","count","markAsRead","notificationIds","length","post","prev","Math","max","map","n","includes","_id","read","showNotificationAlert","notification","window","Notification","permission","_notification$sender","_notification$sender$","title","getNotificationTitle","options","body","getNotificationBody","icon","sender","profile","avatar","handleNewNotification","some","document","visibilityState","token","localStorage","getItem","newSocket","on","err","loadInitialData","Promise","all","off","disconnect","_notification$sender2","_notification$metadat","_notification$sender3","_notification$metadat2","type","username","metadata","_notification$meme","_notification$meme2","meme","caption","truncate","str","substr","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotifications","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/client2/src/contexts/NotificationContext.jsx"],"sourcesContent":["// contexts/NotificationContext.jsx\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport api from '../services/api';\r\nimport { useAuth } from './AuthContext';\r\nimport { initSocket } from '../services/socket';\r\nimport { debounce } from 'lodash';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const { user } = useAuth();\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  // Debounced version of setNotifications to prevent rapid updates\r\n  const debouncedSetNotifications = useCallback(\r\n    debounce((newNotifications) => {\r\n      setNotifications(newNotifications);\r\n    }, 300),\r\n    []\r\n  );\r\n\r\n  // Carrega notificações iniciais\r\n  const loadNotifications = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('/notifications', {\r\n        params: { limit: 20, skip: 0 }\r\n      });\r\n      \r\n      // Verifica a estrutura dos dados e atualiza o estado\r\n      const notificationsData = Array.isArray(response.data?.data) \r\n        ? response.data.data \r\n        : [];\r\n      \r\n      debouncedSetNotifications(notificationsData);\r\n    } catch (error) {\r\n      console.error('Failed to load notifications:', error);\r\n      debouncedSetNotifications([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [debouncedSetNotifications]);\r\n\r\n  // Carrega contagem de não lidas\r\n  const loadUnreadCount = useCallback(async () => {\r\n    if (!user) return;\r\n    try {\r\n      const response = await api.get('/notifications/unread-count');\r\n      setUnreadCount(response.data.count || 0);\r\n    } catch (error) {\r\n      console.error('Failed to load unread count:', error);\r\n      setUnreadCount(0);\r\n    }\r\n  }, [user]);\r\n\r\n  // Marca notificações como lidas\r\n  const markAsRead = useCallback(async (notificationIds) => {\r\n    if (!notificationIds || notificationIds.length === 0) return;\r\n    try {\r\n      await api.post('/notifications/mark-read', { notificationIds });\r\n      setUnreadCount(prev => Math.max(0, prev - notificationIds.length));\r\n      setNotifications(prev => \r\n        prev.map(n => \r\n          notificationIds.includes(n._id) ? { ...n, read: true } : n\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to mark as read:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Função para mostrar alerta de notificação\r\n  const showNotificationAlert = useCallback((notification) => {\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const title = getNotificationTitle(notification);\r\n      const options = {\r\n        body: getNotificationBody(notification),\r\n        icon: notification.sender?.profile?.avatar || '/logo192.png'\r\n      };\r\n      new Notification(title, options);\r\n    }\r\n  }, []);\r\n\r\n  // Handler para novas notificações via WebSocket\r\n  const handleNewNotification = useCallback((notification) => {\r\n    setNotifications(prev => {\r\n      // Evita duplicatas\r\n      if (!prev.some(n => n._id === notification._id)) {\r\n        return [notification, ...prev];\r\n      }\r\n      return prev;\r\n    });\r\n    \r\n    setUnreadCount(prev => prev + 1);\r\n    \r\n    if (document.visibilityState !== 'visible') {\r\n      showNotificationAlert(notification);\r\n    }\r\n  }, [showNotificationAlert]);\r\n\r\n  // Configura WebSocket e carrega dados iniciais\r\n  useEffect(() => {\r\n    if (!user) {\r\n      // Limpa notificações quando o usuário desloga\r\n      setNotifications([]);\r\n      setUnreadCount(0);\r\n      return;\r\n    }\r\n\r\n    // Inicializa o socket\r\n    const token = localStorage.getItem('token');\r\n    const newSocket = initSocket(token);\r\n    setSocket(newSocket);\r\n\r\n    // Configura handlers de eventos\r\n    newSocket.on('connect_error', (err) => {\r\n      console.error('Connection error:', err);\r\n    });\r\n\r\n    newSocket.on('new-notification', handleNewNotification);\r\n\r\n    // Carrega dados iniciais\r\n    const loadInitialData = async () => {\r\n      try {\r\n        await Promise.all([loadNotifications(), loadUnreadCount()]);\r\n      } catch (error) {\r\n        console.error('Error loading initial data:', error);\r\n      }\r\n    };\r\n    \r\n    loadInitialData();\r\n\r\n    // Cleanup\r\n    return () => {\r\n      newSocket.off('new-notification', handleNewNotification);\r\n      newSocket.disconnect();\r\n    };\r\n  }, [user, handleNewNotification, loadNotifications, loadUnreadCount]);\r\n\r\n  // Funções auxiliares para texto de notificação\r\n  const getNotificationTitle = (notification) => {\r\n    switch(notification.type) {\r\n      case 'like':\r\n        return `${notification.sender?.username || 'Alguém'} curtiu seu meme`;\r\n      case 'like_grouped':\r\n        return `Seu meme tem ${notification.metadata?.count || 'muitas'} curtidas`;\r\n      case 'comment':\r\n        return `${notification.sender?.username || 'Alguém'} comentou no seu meme`;\r\n      case 'comment_grouped':\r\n        return `Seu meme tem ${notification.metadata?.count || 'muitos'} comentários`;\r\n      default:\r\n        return 'Nova notificação';\r\n    }\r\n  };\r\n\r\n  const getNotificationBody = (notification) => {\r\n    switch(notification.type) {\r\n      case 'like':\r\n      case 'comment':\r\n        return notification.meme?.caption \r\n          ? truncate(notification.meme.caption, 50) \r\n          : 'Veja agora';\r\n      case 'like_grouped':\r\n      case 'comment_grouped':\r\n        return notification.meme?.caption \r\n          ? truncate(notification.meme.caption, 50) \r\n          : 'Veja todas as interações';\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n\r\n  const truncate = (str, n) => {\r\n    return str?.length > n ? str.substr(0, n-1) + '...' : str;\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider\r\n      value={{\r\n        notifications,\r\n        unreadCount,\r\n        loading,\r\n        markAsRead,\r\n        loadNotifications,\r\n        loadUnreadCount\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}