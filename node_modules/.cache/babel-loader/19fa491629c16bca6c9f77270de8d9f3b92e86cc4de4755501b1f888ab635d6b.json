{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drrod\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ifunny-clone\\\\client\\\\src\\\\pages\\\\TrendingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MemeCard from '../components/MemeCard';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../services/api';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n  background-color: var(--background);\n`;\n_c = Container;\nconst Title = styled.h1`\n  color: var(--text);\n  margin-bottom: 2rem;\n  font-size: 2rem;\n  text-align: center;\n`;\n_c2 = Title;\nconst MemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n  margin-top: 2rem;\n`;\n_c3 = MemeGrid;\nconst Filters = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  margin-bottom: 2rem;\n`;\n_c4 = Filters;\nconst FilterButton = styled.button`\n  padding: 0.5rem 1rem;\n  border-radius: var(--radius-lg);\n  border: none;\n  background: ${({\n  $active\n}) => $active ? 'var(--primary)' : 'var(--card-bg)'};\n  color: ${({\n  $active\n}) => $active ? 'var(--text-inverse)' : 'var(--text)'};\n  cursor: pointer;\n  transition: var(--transition);\n  border: 1px solid var(--border-light);\n  font-weight: 500;\n\n  &:hover {\n    background: ${({\n  $active\n}) => $active ? 'var(--primary-hover)' : 'var(--border-light)'};\n    box-shadow: var(--shadow-hover);\n  }\n\n  &:active {\n    transform: scale(0.98);\n  }\n`;\n_c5 = FilterButton;\nconst LoadingMessage = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: var(--text-light);\n  font-size: 1.1rem;\n`;\n_c6 = LoadingMessage;\nconst TrendingPage = () => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('all');\n  const navigate = useNavigate();\n  const {\n    theme\n  } = useTheme();\n  useEffect(() => {\n    const fetchTrendingMemes = async () => {\n      try {\n        setLoading(true);\n        const {\n          data\n        } = await api.get('/feed/trending');\n        setMemes(Array.isArray(data === null || data === void 0 ? void 0 : data.data) ? data.data : []);\n      } catch (error) {\n        console.error('Error fetching trending memes:', error);\n        navigate('/error', {\n          state: {\n            message: 'Failed to load trending memes'\n          }\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTrendingMemes();\n  }, [navigate]);\n  const filteredMemes = memes.filter(meme => {\n    if (filter === 'all') return true;\n    if (filter === 'images') return meme.mediaType === 'image';\n    if (filter === 'videos') return meme.mediaType === 'video';\n    return true;\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Destaques - Os memes mais populares\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filters, {\n      children: [/*#__PURE__*/_jsxDEV(FilterButton, {\n        $active: filter === 'all',\n        onClick: () => setFilter('all'),\n        children: \"Todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {\n        $active: filter === 'images',\n        onClick: () => setFilter('images'),\n        children: \"Imagens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {\n        $active: filter === 'videos',\n        onClick: () => setFilter('videos'),\n        children: \"V\\xEDdeos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingMessage, {\n      children: \"Carregando memes em destaque...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(MemeGrid, {\n      children: filteredMemes.map(meme => /*#__PURE__*/_jsxDEV(MemeCard, {\n        meme: meme,\n        showAuthor: true,\n        showMetrics: true\n      }, meme._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(TrendingPage, \"Eq8nogltcR2OJoyLWyFQ+Xjk4mg=\", false, function () {\n  return [useNavigate, useTheme];\n});\n_c7 = TrendingPage;\nexport default TrendingPage;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"MemeGrid\");\n$RefreshReg$(_c4, \"Filters\");\n$RefreshReg$(_c5, \"FilterButton\");\n$RefreshReg$(_c6, \"LoadingMessage\");\n$RefreshReg$(_c7, \"TrendingPage\");","map":{"version":3,"names":["React","useState","useEffect","styled","MemeCard","useNavigate","api","useTheme","jsxDEV","_jsxDEV","Container","div","_c","Title","h1","_c2","MemeGrid","_c3","Filters","_c4","FilterButton","button","$active","_c5","LoadingMessage","_c6","TrendingPage","_s","memes","setMemes","loading","setLoading","filter","setFilter","navigate","theme","fetchTrendingMemes","data","get","Array","isArray","error","console","state","message","filteredMemes","meme","mediaType","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","showAuthor","showMetrics","_id","_c7","$RefreshReg$"],"sources":["C:/Users/drrod/OneDrive/Área de Trabalho/ifunny-clone/client/src/pages/TrendingPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport MemeCard from '../components/MemeCard';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../services/api';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\nconst Container = styled.div`\r\n  padding: 2rem;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  background-color: var(--background);\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  color: var(--text);\r\n  margin-bottom: 2rem;\r\n  font-size: 2rem;\r\n  text-align: center;\r\n`;\r\n\r\nconst MemeGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 1.5rem;\r\n  margin-top: 2rem;\r\n`;\r\n\r\nconst Filters = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst FilterButton = styled.button`\r\n  padding: 0.5rem 1rem;\r\n  border-radius: var(--radius-lg);\r\n  border: none;\r\n  background: ${({ $active }) => $active ? 'var(--primary)' : 'var(--card-bg)'};\r\n  color: ${({ $active }) => $active ? 'var(--text-inverse)' : 'var(--text)'};\r\n  cursor: pointer;\r\n  transition: var(--transition);\r\n  border: 1px solid var(--border-light);\r\n  font-weight: 500;\r\n\r\n  &:hover {\r\n    background: ${({ $active }) => $active ? 'var(--primary-hover)' : 'var(--border-light)'};\r\n    box-shadow: var(--shadow-hover);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.98);\r\n  }\r\n`;\r\n\r\nconst LoadingMessage = styled.div`\r\n  text-align: center;\r\n  padding: 2rem;\r\n  color: var(--text-light);\r\n  font-size: 1.1rem;\r\n`;\r\n\r\nconst TrendingPage = () => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [filter, setFilter] = useState('all');\r\n  const navigate = useNavigate();\r\n  const { theme } = useTheme();\r\n\r\n  useEffect(() => {\r\n    const fetchTrendingMemes = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const { data } = await api.get('/feed/trending');\r\n        setMemes(Array.isArray(data?.data) ? data.data : []);\r\n      } catch (error) {\r\n        console.error('Error fetching trending memes:', error);\r\n        navigate('/error', { state: { message: 'Failed to load trending memes' } });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTrendingMemes();\r\n  }, [navigate]);\r\n\r\n  const filteredMemes = memes.filter(meme => {\r\n    if (filter === 'all') return true;\r\n    if (filter === 'images') return meme.mediaType === 'image';\r\n    if (filter === 'videos') return meme.mediaType === 'video';\r\n    return true;\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Destaques - Os memes mais populares</Title>\r\n      \r\n      <Filters>\r\n        <FilterButton \r\n          $active={filter === 'all'}\r\n          onClick={() => setFilter('all')}\r\n        >\r\n          Todos\r\n        </FilterButton>\r\n        <FilterButton \r\n          $active={filter === 'images'}\r\n          onClick={() => setFilter('images')}\r\n        >\r\n          Imagens\r\n        </FilterButton>\r\n        <FilterButton \r\n          $active={filter === 'videos'}\r\n          onClick={() => setFilter('videos')}\r\n        >\r\n          Vídeos\r\n        </FilterButton>\r\n      </Filters>\r\n\r\n      {loading ? (\r\n        <LoadingMessage>Carregando memes em destaque...</LoadingMessage>\r\n      ) : (\r\n        <MemeGrid>\r\n          {filteredMemes.map(meme => (\r\n            <MemeCard \r\n              key={meme._id} \r\n              meme={meme} \r\n              showAuthor \r\n              showMetrics\r\n            />\r\n          ))}\r\n        </MemeGrid>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TrendingPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}